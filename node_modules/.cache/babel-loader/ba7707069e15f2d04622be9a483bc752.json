{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport uniqid from 'uniqid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      this.props.handleInputChange(e.target.value);\n    };\n\n    this.handleUpdateBtn = e => {\n      e.preventDefault();\n      this.props.handleUpdateBtn(e.target);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        onChange: this.handleInputChange,\n        value: this.props.inputText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.handleUpdateBtn,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeUserInfoToEditMode = e => this.props.changeUserInfoToEditMode(e.target);\n  }\n\n  render() {\n    const info = this.props.info;\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [info.text, /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: this.changeUserInfoToEditMode,\n        children: \"\\u270E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UserInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeUserInfoToEditMode = element => {\n      const target = element.parentNode;\n      const parent = Array.from(target.parentNode.children);\n      const index = parent.indexOf(target);\n      const newArray = [...this.state.userInfoArray];\n      newArray.forEach(item => item.mode.isEdit = false);\n      newArray[index].mode.isEdit = true;\n      this.setState({\n        userInfoArray: newArray\n      });\n    };\n\n    this.handleInputChange = inputText => {\n      this.setState({\n        inputText: inputText\n      });\n    };\n\n    this.handleUpdateBtn = element => {\n      console.log(element);\n    };\n\n    this.state = {\n      inputText: '',\n      userInfoArray: [{\n        name: 'firstName',\n        text: 'First Name',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'lastName',\n        text: 'Last Name',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'currentRole',\n        text: 'Fullstack Javascript Developer',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'address',\n        text: 'Houston, TX',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'phone',\n        text: '(555) 555-5555',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'email',\n        text: 'yourname@email.com',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'github',\n        text: 'https://github.com',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }]\n    };\n  }\n\n  render() {\n    const appMode = this.props.appMode;\n    const display = [];\n    this.state.userInfoArray.map(info => {\n      if (!appMode.isEdit && !info.mode.isEdit) {\n        display.push( /*#__PURE__*/_jsxDEV(InfoRow, {\n          info: info,\n          changeUserInfoToEditMode: this.changeUserInfoToEditMode\n        }, info.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this));\n      }\n\n      if (!appMode.isEdit && info.mode.isEdit) {\n        display.push( /*#__PURE__*/_jsxDEV(InfoRowForm, {\n          info: info,\n          inputText: this.state.inputText,\n          handleInputChange: this.handleInputChange,\n          handleUpdateBtn: this.handleUpdateBtn\n        }, info.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this));\n      }\n\n      return display;\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: display\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","uniqid","InfoRowForm","handleInputChange","e","props","target","value","handleUpdateBtn","preventDefault","render","inputText","InfoRow","changeUserInfoToEditMode","info","text","UserInfo","constructor","element","parentNode","parent","Array","from","children","index","indexOf","newArray","state","userInfoArray","forEach","item","mode","isEdit","setState","console","log","name","id","appMode","display","map","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport uniqid from 'uniqid';\n\nclass InfoRowForm extends Component {\n  handleInputChange = (e) => {\n    this.props.handleInputChange(e.target.value);\n  };\n  handleUpdateBtn = (e) => {\n    e.preventDefault();\n    this.props.handleUpdateBtn(e.target);\n  }\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          onChange={this.handleInputChange}\n          value={this.props.inputText}\n        ></input>\n        <button type=\"submit\" onClick={this.handleUpdateBtn}>Update</button>\n      </form>\n    );\n  }\n}\n\nclass InfoRow extends Component {\n  changeUserInfoToEditMode = (e) =>\n    this.props.changeUserInfoToEditMode(e.target);\n  render() {\n    const info = this.props.info;\n    return (\n      <p>\n        {info.text}\n        <span onClick={this.changeUserInfoToEditMode}>✎</span>\n      </p>\n    );\n  }\n}\n\nclass UserInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: '',\n      userInfoArray: [\n        {\n          name: 'firstName',\n          text: 'First Name',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'lastName',\n          text: 'Last Name',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'currentRole',\n          text: 'Fullstack Javascript Developer',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'address',\n          text: 'Houston, TX',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'phone',\n          text: '(555) 555-5555',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'email',\n          text: 'yourname@email.com',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'github',\n          text: 'https://github.com',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        }\n      ]\n    };\n  }\n  changeUserInfoToEditMode = (element) => {\n    const target = element.parentNode;\n    const parent = Array.from(target.parentNode.children);\n    const index = parent.indexOf(target);\n    const newArray = [...this.state.userInfoArray];\n    newArray.forEach((item) => (item.mode.isEdit = false));\n    newArray[index].mode.isEdit = true;\n    this.setState({\n      userInfoArray: newArray\n    });\n  };\n  handleInputChange = (inputText) => {\n    this.setState({\n      inputText: inputText\n    });\n  };\n  handleUpdateBtn = (element) => {\n    console.log(element)\n  }\n  render() {\n    const appMode = this.props.appMode;\n    const display = [];\n    this.state.userInfoArray.map((info) => {\n      if (!appMode.isEdit && !info.mode.isEdit) {\n        display.push(\n          <InfoRow\n            info={info}\n            key={info.id}\n            changeUserInfoToEditMode={this.changeUserInfoToEditMode}\n          />\n        );\n      }\n      if (!appMode.isEdit && info.mode.isEdit) {\n        display.push(\n          <InfoRowForm\n            info={info}\n            key={info.id}\n            inputText={this.state.inputText}\n            handleInputChange={this.handleInputChange}\n            handleUpdateBtn={this.handleUpdateBtn}\n          />\n        );\n      }\n      return display;\n    });\n    return <div className=\"UserInfoContainer\">{display}</div>;\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}