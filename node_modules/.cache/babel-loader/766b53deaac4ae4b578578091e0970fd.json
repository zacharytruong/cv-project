{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo'; // import WorkExperience from './WorkExperience';\n// import Education from './Education';\n// import Skills from './Skills';\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfoRowToEditMode = element => {\n      const target = element.closest('li').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n\n      for (const info in textUserInfoComponent) {\n        target === info ? tempObj[target].isEdit = true : tempObj[info].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: {\n          textUserInfoComponent: tempObj\n        }\n      });\n    };\n\n    this.changeModeToEdit = componentMode => {\n      componentMode.isEdit = true;\n      this.setState(componentMode);\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      componentMode.isEdit = false;\n      this.setState(componentMode);\n    };\n\n    this.handleInputChange = (objInput, inputText) => {// console.log(objInput)\n    };\n\n    this.findClickedTarget = element => {// const target = element.parentNode;\n      // const parent = Array.from(target.parentNode.children);\n      // return parent.indexOf(target);\n    };\n\n    this.handleUserInfoUpdateBtn = (field, element) => {// const index = this.findClickedTarget(element);\n      // const tempArr = [...this.state.userInfoArray];\n      // tempArr[index] = this.state[field];\n      // tempArr[index].mode.isEdit = false;\n      // this.setState({\n      //   [field]: '',\n      //   userInfoArray: tempArr\n      // });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyName,\n  //     inputCity,\n  //     inputFrom,\n  //     inputTo,\n  //     inputJobDescription\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyName: inputCompanyName,\n  //     city: inputCity,\n  //     from: inputFrom,\n  //     to: inputTo,\n  //     jobDescription: inputJobDescription\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyName: '',\n  //     inputCity: '',\n  //     inputFrom: '',\n  //     inputTo: '',\n  //     inputJobDescription: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchool,\n  //     inputSchoolCity,\n  //     inputSchoolFromYear,\n  //     inputSchoolToYear,\n  //     inputSchoolDegree\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     school: inputSchool,\n  //     schoolCity: inputSchoolCity,\n  //     schoolFromYeart: inputSchoolFromYear,\n  //     schoolToYear: inputSchoolToYear,\n  //     schoolDegree: inputSchoolDegree\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchool: '',\n  //     inputSchoolCity: '',\n  //     inputSchoolFromYear: '',\n  //     inputSchoolToYear: '',\n  //     inputSchoolDegree: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToEdit(modes.appMode),\n          children: \"EDIT MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToNonEdit(modes.appMode),\n          children: \"VIEW MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n        modes: modes,\n        userInfoComponentInput: inputs.userInfoComponentInput.inputUserInfo,\n        textDisplay: textDisplay,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","App","Component","constructor","props","changeInfoRowToEditMode","element","target","closest","getAttribute","textUserInfoComponent","state","textDisplay","tempObj","info","isEdit","setState","changeModeToEdit","componentMode","changeModeToNonEdit","handleInputChange","objInput","inputText","findClickedTarget","handleUserInfoUpdateBtn","field","modes","appMode","workExperienceMode","educationMode","skillsMode","componentsArray","workExperienceArray","educationArray","skillsArray","inputs","userInfoComponentInput","inputUserInfo","workExperienceComponentInput","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","educationComponentInput","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","skillsComponentInput","inputSkillName","textFirstName","text","id","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","textWorkExperienceComponent","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","textEducationComponent","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","textSkillsComponent","textSkillName","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\n// import WorkExperience from './WorkExperience';\n// import Education from './Education';\n// import Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n  changeInfoRowToEditMode = (element) => {\n    const target = element.closest('li').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    for (const info in textUserInfoComponent) {\n      target === info\n        ? (tempObj[target].isEdit = true)\n        : (tempObj[info].isEdit = false);\n    }\n    this.setState({\n      textDisplay: {\n        textUserInfoComponent: tempObj\n      }\n    });\n  };\n  changeModeToEdit = (componentMode) => {\n    componentMode.isEdit = true;\n    this.setState(componentMode);\n  };\n  changeModeToNonEdit = (componentMode) => {\n    componentMode.isEdit = false;\n    this.setState(componentMode);\n  };\n  handleInputChange = (objInput, inputText) => {\n    // console.log(objInput)\n    \n  };\n  findClickedTarget = (element) => {\n    // const target = element.parentNode;\n    // const parent = Array.from(target.parentNode.children);\n    // return parent.indexOf(target);\n  };\n  handleUserInfoUpdateBtn = (field, element) => {\n    // const index = this.findClickedTarget(element);\n    // const tempArr = [...this.state.userInfoArray];\n    // tempArr[index] = this.state[field];\n    // tempArr[index].mode.isEdit = false;\n    // this.setState({\n    //   [field]: '',\n    //   userInfoArray: tempArr\n    // });\n  };\n\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyName,\n  //     inputCity,\n  //     inputFrom,\n  //     inputTo,\n  //     inputJobDescription\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyName: inputCompanyName,\n  //     city: inputCity,\n  //     from: inputFrom,\n  //     to: inputTo,\n  //     jobDescription: inputJobDescription\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyName: '',\n  //     inputCity: '',\n  //     inputFrom: '',\n  //     inputTo: '',\n  //     inputJobDescription: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchool,\n  //     inputSchoolCity,\n  //     inputSchoolFromYear,\n  //     inputSchoolToYear,\n  //     inputSchoolDegree\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     school: inputSchool,\n  //     schoolCity: inputSchoolCity,\n  //     schoolFromYeart: inputSchoolFromYear,\n  //     schoolToYear: inputSchoolToYear,\n  //     schoolDegree: inputSchoolDegree\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchool: '',\n  //     inputSchoolCity: '',\n  //     inputSchoolFromYear: '',\n  //     inputSchoolToYear: '',\n  //     inputSchoolDegree: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <nav>\n          <button onClick={() => this.changeModeToEdit(modes.appMode)}>\n            EDIT MODE\n          </button>\n          <button onClick={() => this.changeModeToNonEdit(modes.appMode)}>\n            VIEW MODE\n          </button>\n        </nav>\n        <UserInfo\n          modes={modes}\n          userInfoComponentInput={inputs.userInfoComponentInput.inputUserInfo}\n          textDisplay={textDisplay}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        {/* <WorkExperience />\n        <Education />\n        <Skills /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}