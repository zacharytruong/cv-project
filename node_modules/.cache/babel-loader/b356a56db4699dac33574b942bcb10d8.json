{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      this.props.handleInputChange('userInfoComponentInput', 'inputUserInfo', e.target.value);\n    };\n\n    this.handleUserInfoUpdateBtn = e => {\n      e.preventDefault();\n      this.props.handleUserInfoUpdateBtn('', '', e.target);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        value: this.props.inputs,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.handleUserInfoUpdateBtn,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = e => this.props.changeInfoRowToEditMode(e.target);\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      info,\n      value,\n      inputs\n    } = this.props;\n    let element;\n\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = /*#__PURE__*/_jsxDEV(InfoRowForm, {\n          inputs: inputs,\n          datakey: info,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this);\n      } else {\n        element = /*#__PURE__*/_jsxDEV(\"li\", {\n          datakey: info,\n          children: [value.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.changeInfoRowToEditMode,\n            children: \"\\u270E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      element = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this);\n    }\n\n    return element;\n  }\n\n}\n\nclass BasicUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputs,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputs: inputs,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass ExtendedUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputs,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputs: inputs,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputs,\n      textDisplay\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: [/*#__PURE__*/_jsxDEV(BasicUserInfo, {\n        modes: modes,\n        inputs: inputs,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExtendedUserInfo, {\n        modes: modes,\n        inputs: inputs,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","InfoRowForm","handleInputChange","e","props","target","value","handleUserInfoUpdateBtn","preventDefault","render","inputs","InfoRow","changeInfoRowToEditMode","component","componentProp","inputText","obj","componentInput","element","modes","info","appMode","isEdit","text","BasicUserInfo","userInfoText","rows","Object","entries","id","push","ExtendedUserInfo","UserInfo","textDisplay","textUserInfoComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './UserInfo.css';\n\nclass InfoRowForm extends Component {\n  handleInputChange = (e) => {\n    this.props.handleInputChange(\n      'userInfoComponentInput',\n      'inputUserInfo',\n      e.target.value\n    );\n  };\n  handleUserInfoUpdateBtn = (e) => {\n    e.preventDefault();\n    this.props.handleUserInfoUpdateBtn('', '', e.target);\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={this.props.inputs}\n          onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.handleUserInfoUpdateBtn}>\n          Update\n        </button>\n      </form>\n    );\n  }\n}\n\nclass InfoRow extends Component {\n  changeInfoRowToEditMode = (e) => this.props.changeInfoRowToEditMode(e.target);\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, info, value, inputs } = this.props;\n    let element;\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = (\n          <InfoRowForm\n            inputs={inputs}\n            datakey={info}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n      } else {\n        element = (\n          <li datakey={info}>\n            {value.text} <span onClick={this.changeInfoRowToEditMode}>✎</span>\n          </li>\n        );\n      }\n    } else {\n      element = <li>{value.text}</li>;\n    }\n    return element;\n  }\n}\n\nclass BasicUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, inputs, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputs={inputs}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass ExtendedUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, inputs, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputs={inputs}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass UserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, inputs, textDisplay } = this.props;\n\n    return (\n      <div className=\"UserInfoContainer\">\n        <BasicUserInfo\n          modes={modes}\n          inputs={inputs}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <ExtendedUserInfo\n          modes={modes}\n          inputs={inputs}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}