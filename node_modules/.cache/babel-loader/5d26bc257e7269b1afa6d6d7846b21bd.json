{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/App.js\";\nimport React from 'react';\nimport Header from './components/Header';\nimport Builder from './components/Builder';\nimport Footer from './components/Footer';\nimport uniqid from 'uniqid';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeModeToEdit = modeName => {\n      const tempArr = [...this.state.modesArray];\n      const appModeIndex = tempArr.findIndex(item => item.name === modeName);\n      tempArr[appModeIndex].isEdit = true;\n      this.setState({\n        modesArray: tempArr\n      });\n    };\n\n    this.changeModeToNonEdit = modeName => {\n      const tempArr = [...this.state.modesArray];\n      const appModeIndex = tempArr.findIndex(item => item.name === modeName);\n      tempArr[appModeIndex].isEdit = false;\n      this.setState({\n        modesArray: tempArr\n      });\n      console.log(this.state.modesArray[0]);\n    };\n\n    this.handleInputChange = (obj, inputText) => {\n      this.setState({\n        [obj]: inputText\n      });\n    };\n\n    this.state = {\n      modesArray: [{\n        name: 'appMode',\n        isEdit: true\n      }, {\n        name: 'userInfoMode',\n        isEdit: false\n      }, {\n        name: 'workExperienceMode',\n        isEdit: false\n      }, {\n        name: 'educationMode',\n        isEdit: false\n      }, {\n        name: 'skillsMode',\n        isEdit: false\n      }],\n      componentsArray: [{\n        userInfoArray: []\n      }, {\n        workExperienceArray: []\n      }, {\n        educationArray: []\n      }, {\n        skillsArray: []\n      }],\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfoText: ''\n        },\n        workExperienceComponentInput: {\n          inputText: '',\n          inputCompanyNameText: '',\n          inputCityText: '',\n          inputFromText: '',\n          inputToText: '',\n          inputJobDescriptionText: ''\n        },\n        educationComponentInput: {\n          inputSchoolText: '',\n          inputSchoolCityText: '',\n          inputSchoolFromYearText: '',\n          inputSchoolToYearText: '',\n          inputSchoolDegreeText: ''\n        },\n        skillComponentInput: {\n          inputSkillText: ''\n        }\n      }\n    };\n  }\n\n  // findClickedTarget = (element) => {\n  //   const target = element.parentNode;\n  //   const parent = Array.from(target.parentNode.children);\n  //   return parent.indexOf(target);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...this.state.userInfoArray];\n  //   tempArr[index].text = this.state[field];\n  //   tempArr[index].mode.isEdit = false;\n  //   this.setState({\n  //     [field]: '',\n  //     userInfoArray: tempArr\n  //   });\n  // };\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyNameText,\n  //     inputCityText,\n  //     inputFromText,\n  //     inputToText,\n  //     inputJobDescriptionText\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyNameText: inputCompanyNameText,\n  //     cityText: inputCityText,\n  //     fromText: inputFromText,\n  //     toText: inputToText,\n  //     jobDescriptionText: inputJobDescriptionText\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyNameText: '',\n  //     inputCityText: '',\n  //     inputFromText: '',\n  //     inputToText: '',\n  //     inputJobDescriptionText: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchoolText,\n  //     inputSchoolCityText,\n  //     inputSchoolFromYearText,\n  //     inputSchoolToYearText,\n  //     inputSchoolDegreeText\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     schoolText: inputSchoolText,\n  //     schoolCityText: inputSchoolCityText,\n  //     schoolFromYeartText: inputSchoolFromYearText,\n  //     schoolToYearText: inputSchoolToYearText,\n  //     schoolDegreeText: inputSchoolDegreeText\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchoolText: '',\n  //     inputSchoolCityText: '',\n  //     inputSchoolFromYearText: '',\n  //     inputSchoolToYearText: '',\n  //     inputSchoolDegreeText: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modesArray,\n      componentsArray,\n      inputs\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: /*#__PURE__*/_jsxDEV(Header, {\n        modesArray: modesArray,\n        changeModeToEdit: this.changeModeToEdit,\n        changeModeToNonEdit: this.changeModeToNonEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/App.js"],"names":["React","Header","Builder","Footer","uniqid","App","Component","constructor","props","changeModeToEdit","modeName","tempArr","state","modesArray","appModeIndex","findIndex","item","name","isEdit","setState","changeModeToNonEdit","console","log","handleInputChange","obj","inputText","componentsArray","userInfoArray","workExperienceArray","educationArray","skillsArray","inputs","userInfoComponentInput","inputUserInfoText","workExperienceComponentInput","inputCompanyNameText","inputCityText","inputFromText","inputToText","inputJobDescriptionText","educationComponentInput","inputSchoolText","inputSchoolCityText","inputSchoolFromYearText","inputSchoolToYearText","inputSchoolDegreeText","skillComponentInput","inputSkillText","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './components/Header';\nimport Builder from './components/Builder';\nimport Footer from './components/Footer';\nimport uniqid from 'uniqid';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modesArray: [\n        {\n          name: 'appMode',\n          isEdit: true\n        },\n        {\n          name: 'userInfoMode',\n          isEdit: false\n        },\n        {\n          name: 'workExperienceMode',\n          isEdit: false\n        },\n        {\n          name: 'educationMode',\n          isEdit: false\n        },\n        {\n          name: 'skillsMode',\n          isEdit: false\n        }\n      ],\n      componentsArray: [\n        { userInfoArray: [] },\n        { workExperienceArray: [] },\n        { educationArray: [] },\n        { skillsArray: [] }\n      ],\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfoText: ''\n        },\n        workExperienceComponentInput: {\n          inputText: '',\n          inputCompanyNameText: '',\n          inputCityText: '',\n          inputFromText: '',\n          inputToText: '',\n          inputJobDescriptionText: ''\n        },\n        educationComponentInput: {\n          inputSchoolText: '',\n          inputSchoolCityText: '',\n          inputSchoolFromYearText: '',\n          inputSchoolToYearText: '',\n          inputSchoolDegreeText: ''\n        },\n        skillComponentInput: {\n          inputSkillText: ''\n        }\n      }\n    };\n  }\n  changeModeToEdit = (modeName) => {\n    const tempArr = [...this.state.modesArray];\n    const appModeIndex = tempArr.findIndex(item => item.name === modeName)\n    tempArr[appModeIndex].isEdit = true;\n    this.setState({\n      modesArray: tempArr\n    });\n  };\n  changeModeToNonEdit = (modeName) => {\n    const tempArr = [...this.state.modesArray];\n    const appModeIndex = tempArr.findIndex(item => item.name === modeName)\n    tempArr[appModeIndex].isEdit = false;\n    this.setState({\n      modesArray: tempArr\n    });\n    console.log(this.state.modesArray[0])\n  };\n  handleInputChange = (obj, inputText) => {\n    this.setState({\n      [obj]: inputText\n    });\n  };\n  // findClickedTarget = (element) => {\n  //   const target = element.parentNode;\n  //   const parent = Array.from(target.parentNode.children);\n  //   return parent.indexOf(target);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...this.state.userInfoArray];\n  //   tempArr[index].text = this.state[field];\n  //   tempArr[index].mode.isEdit = false;\n  //   this.setState({\n  //     [field]: '',\n  //     userInfoArray: tempArr\n  //   });\n  // };\n\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyNameText,\n  //     inputCityText,\n  //     inputFromText,\n  //     inputToText,\n  //     inputJobDescriptionText\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyNameText: inputCompanyNameText,\n  //     cityText: inputCityText,\n  //     fromText: inputFromText,\n  //     toText: inputToText,\n  //     jobDescriptionText: inputJobDescriptionText\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyNameText: '',\n  //     inputCityText: '',\n  //     inputFromText: '',\n  //     inputToText: '',\n  //     inputJobDescriptionText: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchoolText,\n  //     inputSchoolCityText,\n  //     inputSchoolFromYearText,\n  //     inputSchoolToYearText,\n  //     inputSchoolDegreeText\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     schoolText: inputSchoolText,\n  //     schoolCityText: inputSchoolCityText,\n  //     schoolFromYeartText: inputSchoolFromYearText,\n  //     schoolToYearText: inputSchoolToYearText,\n  //     schoolDegreeText: inputSchoolDegreeText\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchoolText: '',\n  //     inputSchoolCityText: '',\n  //     inputSchoolFromYearText: '',\n  //     inputSchoolToYearText: '',\n  //     inputSchoolDegreeText: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modesArray,\n      componentsArray,\n      inputs\n    } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <Header\n          modesArray={modesArray}\n          changeModeToEdit={this.changeModeToEdit}\n          changeModeToNonEdit={this.changeModeToNonEdit}\n        />\n        {/* <Builder\n          modesArray={modesArray}\n          componentsArray={componentsArray}\n          inputs={inputs}\n          changeModeToEdit={this.changeModeToEdit}\n          changeModeToNonEdit={this.changeModeToNonEdit}\n        /> */}\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}