{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience'; // import Education from './Education';\n// import Skills from './Skills';\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfoRowToEditMode = element => {\n      const target = element.closest('li').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n\n      for (const info in textUserInfoComponent) {\n        target === info ? tempObj[target].isEdit = true : tempObj[info].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: {\n          textUserInfoComponent: tempObj\n        }\n      });\n    };\n\n    this.changeModeToEdit = componentMode => {\n      componentMode.isEdit = true;\n      this.setState(componentMode);\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      componentMode.isEdit = false;\n      this.setState(componentMode);\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => {\n      const tempObj = { ...this.state.inputs\n      };\n      tempObj[component][componentProp] = inputText;\n      this.setState({\n        inputs: tempObj\n      });\n    };\n\n    this.findClickedTargetDatakey = element => {\n      return element.closest('form').getAttribute('datakey');\n    };\n\n    this.handleUserInfoUpdateBtn = element => {\n      const datakey = this.findClickedTargetDatakey(element);\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n      const inputUserInfo = this.state.inputs.userInfoComponentInput.inputUserInfo;\n      tempObj[datakey].text = inputUserInfo;\n      tempObj[datakey].isEdit = false;\n      const tempInputs = { ...this.state.inputs\n      };\n      tempInputs.userInfoComponentInput.inputUserInfo = '';\n      this.setState({\n        [textUserInfoComponent]: tempObj,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeWorkExperience = element => {// const index = this.findClickedTarget(element);\n      // this.setState({\n      //   workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n      // });\n    };\n\n    this.changeWorkExperienceMode = () => {\n      let mode = this.state.modes.workExperienceMode.isEdit;\n      let tempMode = { ...mode\n      };\n      if (tempMode) console.log(tempMode); //  this.setState({\n      //    [mode]: tempMode\n      //  })\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToEdit(modes.appMode),\n          children: \"EDIT MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToNonEdit(modes.appMode),\n          children: \"VIEW MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n        modes: modes,\n        inputs: inputs.userInfoComponentInput.inputUserInfo,\n        textDisplay: textDisplay,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WorkExperience, {\n        modes: modes,\n        componentsArray: componentsArray,\n        workExperienceComponentInput: inputs.workExperienceComponentInput,\n        textWorkExperienceComponent: textDisplay.textWorkExperienceComponent,\n        handleInputChange: this.handleInputChange,\n        removeWorkExperience: this.removeWorkExperience,\n        changeWorkExperienceMode: this.changeWorkExperienceMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","WorkExperience","App","Component","constructor","props","changeInfoRowToEditMode","element","target","closest","getAttribute","textUserInfoComponent","state","textDisplay","tempObj","info","isEdit","setState","changeModeToEdit","componentMode","changeModeToNonEdit","handleInputChange","component","componentProp","inputText","inputs","findClickedTargetDatakey","handleUserInfoUpdateBtn","datakey","inputUserInfo","userInfoComponentInput","text","tempInputs","removeWorkExperience","changeWorkExperienceMode","mode","modes","workExperienceMode","tempMode","console","log","appMode","educationMode","skillsMode","componentsArray","workExperienceArray","educationArray","skillsArray","workExperienceComponentInput","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","educationComponentInput","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","skillsComponentInput","inputSkillName","textFirstName","id","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","textWorkExperienceComponent","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","textEducationComponent","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","textSkillsComponent","textSkillName","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\n// import Education from './Education';\n// import Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n  changeInfoRowToEditMode = (element) => {\n    const target = element.closest('li').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    for (const info in textUserInfoComponent) {\n      target === info\n        ? (tempObj[target].isEdit = true)\n        : (tempObj[info].isEdit = false);\n    }\n    this.setState({\n      textDisplay: {\n        textUserInfoComponent: tempObj\n      }\n    });\n  };\n  changeModeToEdit = (componentMode) => {\n    componentMode.isEdit = true;\n    this.setState(componentMode);\n  };\n  changeModeToNonEdit = (componentMode) => {\n    componentMode.isEdit = false;\n    this.setState(componentMode);\n  };\n  handleInputChange = (component, componentProp, inputText) => {\n    const tempObj = { ...this.state.inputs };\n    tempObj[component][componentProp] = inputText;\n    this.setState({\n      inputs: tempObj\n    });\n  };\n  findClickedTargetDatakey = (element) => {\n    return element.closest('form').getAttribute('datakey');\n  };\n  handleUserInfoUpdateBtn = (element) => {\n    const datakey = this.findClickedTargetDatakey(element);\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    const inputUserInfo =\n      this.state.inputs.userInfoComponentInput.inputUserInfo;\n    tempObj[datakey].text = inputUserInfo;\n    tempObj[datakey].isEdit = false;\n    const tempInputs = { ...this.state.inputs };\n    tempInputs.userInfoComponentInput.inputUserInfo = '';\n    this.setState({\n      [textUserInfoComponent]: tempObj,\n      inputs: tempInputs\n    });\n  };\n\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyName,\n  //     inputCity,\n  //     inputFrom,\n  //     inputTo,\n  //     inputJobDescription\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyName: inputCompanyName,\n  //     city: inputCity,\n  //     from: inputFrom,\n  //     to: inputTo,\n  //     jobDescription: inputJobDescription\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyName: '',\n  //     inputCity: '',\n  //     inputFrom: '',\n  //     inputTo: '',\n  //     inputJobDescription: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchool,\n  //     inputSchoolCity,\n  //     inputSchoolFromYear,\n  //     inputSchoolToYear,\n  //     inputSchoolDegree\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     school: inputSchool,\n  //     schoolCity: inputSchoolCity,\n  //     schoolFromYeart: inputSchoolFromYear,\n  //     schoolToYear: inputSchoolToYear,\n  //     schoolDegree: inputSchoolDegree\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchool: '',\n  //     inputSchoolCity: '',\n  //     inputSchoolFromYear: '',\n  //     inputSchoolToYear: '',\n  //     inputSchoolDegree: ''\n  //   });\n  // };\n  removeWorkExperience = (element) => {\n    // const index = this.findClickedTarget(element);\n    // this.setState({\n    //   workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n    // });\n  };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  changeWorkExperienceMode = () => {\n    let mode = this.state.modes.workExperienceMode.isEdit;\n    let tempMode = {...mode};\n    if (tempMode) \n    console.log(tempMode)\n  //  this.setState({\n  //    [mode]: tempMode\n  //  })\n  };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <nav>\n          <button onClick={() => this.changeModeToEdit(modes.appMode)}>\n            EDIT MODE\n          </button>\n          <button onClick={() => this.changeModeToNonEdit(modes.appMode)}>\n            VIEW MODE\n          </button>\n        </nav>\n        <UserInfo\n          modes={modes}\n          inputs={inputs.userInfoComponentInput.inputUserInfo}\n          textDisplay={textDisplay}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <WorkExperience\n          modes={modes}\n          componentsArray={componentsArray}\n          workExperienceComponentInput={inputs.workExperienceComponentInput}\n          textWorkExperienceComponent={textDisplay.textWorkExperienceComponent}\n          handleInputChange={this.handleInputChange}\n          removeWorkExperience={this.removeWorkExperience}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n        />\n        {/* <Education />\n        <Skills /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}