{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  // handleInputChange = (e) => {\n  //   this.props.handleInputChange('inputText', e.target.value);\n  // };\n  // handleUserInfoUpdateBtn = (e) => {\n  //   e.preventDefault();\n  //   this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  // };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        onChange: true,\n        value: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: true,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRowNonEditPencil extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass InfoRowWithEditPencil extends Component {\n  // changeInfoRowToEditMode = (e) =>\n  //   this.props.changeInfoRowToEditMode(e.target, this.props.userInfoArray);\n  render() {\n    // const info = this.props.info;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u270E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass BasicUserInfo extends Component {\n  render() {\n    const {\n      appMode,\n      userInfoMode\n    } = this.props.modes;\n    let element;\n    return;\n  }\n\n}\n\nclass ExtendedUserInfo extends Component {\n  render() {\n    // const {appMode, userInfoMode} = this.props.modes;\n    // let element;\n    // if (!appMode.isEdit || (appMode.isEdit && !userInfoMode.isEdit)) {\n    //   element = <InfoRowNonEditPencil />\n    // } else {\n    //   element = <InfoRowWithEditPencil />\n    // }\n    return;\n  }\n\n}\n\nclass UserInfo extends Component {\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   this.props.changeInfoRowToEditMode(element, arr);\n  // };\n  // handleInputChange = (field, element) => {\n  //   this.props.handleInputChange(field, element);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   this.props.handleUserInfoUpdateBtn(field, element);\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.props; // userInfoArray.map((info) => {\n    //   if (appMode.isEdit && !info.mode.isEdit) {\n    //     display.push(\n    //       <InfoRow\n    //         info={info}\n    //         key={info.id}\n    //         userInfoArray={userInfoArray}\n    //         changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n    //       />\n    //     );\n    //   }\n    //   if (appMode.isEdit && info.mode.isEdit) {\n    //     display.push(\n    //       <InfoRowForm\n    //         info={info}\n    //         key={info.id}\n    //         inputText={this.props.inputText}\n    //         handleInputChange={this.handleInputChange}\n    //         handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n    //       />\n    //     );\n    //   }\n    //   if (!appMode.isEdit && !info.mode.isEdit) {\n    //     display.push(<InfoRowNonEditMode info={info} key={info.id} />);\n    //   }\n    //   return display;\n    // });\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: [/*#__PURE__*/_jsxDEV(BasicUserInfo, {\n        modes: modes,\n        userInfoArray: componentsArray.userInfoArray,\n        inputUserInfo: inputs.userInfoComponentInput.inputUserInfo,\n        userInfoText: textDisplay.userInfoComponentText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExtendedUserInfo, {\n        modes: modes,\n        userInfoArray: componentsArray.userInfoArray,\n        inputUserInfo: inputs.userInfoComponentInput.inputUserInfo,\n        userInfoText: textDisplay.userInfoComponentText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","InfoRowForm","render","InfoRowNonEditPencil","InfoRowWithEditPencil","BasicUserInfo","appMode","userInfoMode","props","modes","element","ExtendedUserInfo","UserInfo","componentsArray","inputs","textDisplay","userInfoArray","userInfoComponentInput","inputUserInfo","userInfoComponentText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;;;AAEA,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,YAAY,EAAC,KAFf;AAGE,QAAA,QAAQ,MAHV;AAIE,QAAA,KAAK;AAJP;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAtBiC;;AAyBpC,MAAMC,oBAAN,SAAmCH,SAAnC,CAA6C;AAC3CE,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAH0C;;AAM7C,MAAME,qBAAN,SAAoCJ,SAApC,CAA8C;AAC5C;AACA;AACAE,EAAAA,MAAM,GAAG;AACP;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAN2C;;AAS9C,MAAMG,aAAN,SAA4BL,SAA5B,CAAsC;AACpCE,EAAAA,MAAM,GAAG;AACP,UAAM;AAACI,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAA0B,KAAKC,KAAL,CAAWC,KAA3C;AACA,QAAIC,OAAJ;AAEA;AACD;;AANmC;;AAStC,MAAMC,gBAAN,SAA+BX,SAA/B,CAAyC;AACvCE,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAVsC;;AAazC,MAAMU,QAAN,SAAuBZ,SAAvB,CAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEO,MAAAA,KAAF;AAASI,MAAAA,eAAT;AAA0BC,MAAAA,MAA1B;AAAkCC,MAAAA;AAAlC,QAAkD,KAAKP,KAA7D,CADO,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE,QAAC,aAAD;AACE,QAAA,KAAK,EAAEC,KADT;AAEE,QAAA,aAAa,EAAEI,eAAe,CAACG,aAFjC;AAGE,QAAA,aAAa,EAAEF,MAAM,CAACG,sBAAP,CAA8BC,aAH/C;AAIE,QAAA,YAAY,EAAEH,WAAW,CAACI;AAJ5B;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,gBAAD;AACE,QAAA,KAAK,EAAEV,KADT;AAEE,QAAA,aAAa,EAAEI,eAAe,CAACG,aAFjC;AAGE,QAAA,aAAa,EAAEF,MAAM,CAACG,sBAAP,CAA8BC,aAH/C;AAIE,QAAA,YAAY,EAAEH,WAAW,CAACI;AAJ5B;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAxD8B;;AA2DjC,eAAeP,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport './UserInfo.css';\n\nclass InfoRowForm extends Component {\n  // handleInputChange = (e) => {\n  //   this.props.handleInputChange('inputText', e.target.value);\n  // };\n  // handleUserInfoUpdateBtn = (e) => {\n  //   e.preventDefault();\n  //   this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  // };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          onChange\n          value\n        ></input>\n        <button type=\"submit\" onClick>\n          Update\n        </button>\n      </form>\n    );\n  }\n}\n\nclass InfoRowNonEditPencil extends Component {\n  render() {\n    return <p></p>;\n  }\n}\n\nclass InfoRowWithEditPencil extends Component {\n  // changeInfoRowToEditMode = (e) =>\n  //   this.props.changeInfoRowToEditMode(e.target, this.props.userInfoArray);\n  render() {\n    // const info = this.props.info;\n    return <span>âœŽ</span>;\n  }\n}\n\nclass BasicUserInfo extends Component {\n  render() {\n    const {appMode, userInfoMode} = this.props.modes;\n    let element;\n    \n    return ;\n  }\n}\n\nclass ExtendedUserInfo extends Component {\n  render() {\n    // const {appMode, userInfoMode} = this.props.modes;\n    // let element;\n    // if (!appMode.isEdit || (appMode.isEdit && !userInfoMode.isEdit)) {\n    //   element = <InfoRowNonEditPencil />\n    // } else {\n    //   element = <InfoRowWithEditPencil />\n    // }\n    return ;\n  }\n}\n\nclass UserInfo extends Component {\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   this.props.changeInfoRowToEditMode(element, arr);\n  // };\n  // handleInputChange = (field, element) => {\n  //   this.props.handleInputChange(field, element);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   this.props.handleUserInfoUpdateBtn(field, element);\n  // };\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.props;\n\n    // userInfoArray.map((info) => {\n    //   if (appMode.isEdit && !info.mode.isEdit) {\n    //     display.push(\n    //       <InfoRow\n    //         info={info}\n    //         key={info.id}\n    //         userInfoArray={userInfoArray}\n    //         changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n    //       />\n    //     );\n    //   }\n    //   if (appMode.isEdit && info.mode.isEdit) {\n    //     display.push(\n    //       <InfoRowForm\n    //         info={info}\n    //         key={info.id}\n    //         inputText={this.props.inputText}\n    //         handleInputChange={this.handleInputChange}\n    //         handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n    //       />\n    //     );\n    //   }\n    //   if (!appMode.isEdit && !info.mode.isEdit) {\n    //     display.push(<InfoRowNonEditMode info={info} key={info.id} />);\n    //   }\n    //   return display;\n    // });\n    return (\n      <div className=\"UserInfoContainer\">\n        <BasicUserInfo\n          modes={modes}\n          userInfoArray={componentsArray.userInfoArray}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.userInfoComponentText}\n        />\n        <ExtendedUserInfo\n          modes={modes}\n          userInfoArray={componentsArray.userInfoArray}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.userInfoComponentText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}