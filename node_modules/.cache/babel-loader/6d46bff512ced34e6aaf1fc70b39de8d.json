{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      this.props.handleInputChange('inputText', e.target.value);\n    };\n\n    this.handleUserInfoUpdateBtn = e => {\n      e.preventDefault();\n      this.props.handleUserInfoUpdateBtn('inputText', e.target);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.handleUserInfoUpdateBtn,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = e => this.props.changeInfoRowToEditMode(e.target);\n  }\n\n  render() {\n    const {\n      modes,\n      info,\n      value,\n      inputUserInfo\n    } = this.props;\n    let element;\n\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = /*#__PURE__*/_jsxDEV(InfoRowForm, {\n          inputUserInfo: inputUserInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 19\n        }, this);\n      } else {\n        element = /*#__PURE__*/_jsxDEV(\"li\", {\n          datakey: info,\n          children: [value.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.changeInfoRowToEditMode,\n            children: \"\\u270E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      element = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this);\n    }\n\n    return element;\n  }\n\n}\n\nclass BasicUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputUserInfo,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputUserInfo: inputUserInfo,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass ExtendedUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputUserInfo,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputUserInfo: inputUserInfo,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n  }\n\n  // handleInputChange = (field, element) => {\n  //   this.props.handleInputChange(field, element);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   this.props.handleUserInfoUpdateBtn(field, element);\n  // };\n  render() {\n    const {\n      modes,\n      inputs,\n      textDisplay\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: [/*#__PURE__*/_jsxDEV(BasicUserInfo, {\n        modes: modes,\n        inputUserInfo: inputs.userInfoComponentInput.inputUserInfo,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExtendedUserInfo, {\n        modes: modes,\n        inputUserInfo: inputs.userInfoComponentInput.inputUserInfo,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","InfoRowForm","handleInputChange","e","props","target","value","handleUserInfoUpdateBtn","preventDefault","render","InfoRow","changeInfoRowToEditMode","modes","info","inputUserInfo","element","appMode","isEdit","text","BasicUserInfo","userInfoText","rows","Object","entries","id","push","ExtendedUserInfo","UserInfo","inputs","textDisplay","userInfoComponentInput","textUserInfoComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './UserInfo.css';\n\nclass InfoRowForm extends Component {\n  handleInputChange = (e) => {\n    this.props.handleInputChange('inputText', e.target.value);\n  };\n  handleUserInfoUpdateBtn = (e) => {\n    e.preventDefault();\n    this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  };\n  render() {\n    return (\n      <form>\n        <input\n        type=\"text\"\n        autoComplete=\"off\"\n        onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.handleUserInfoUpdateBtn}>Update</button>\n      </form>\n    );\n  }\n}\n\nclass InfoRow extends Component {\n  changeInfoRowToEditMode = (e) => this.props.changeInfoRowToEditMode(e.target);\n  render() {\n    const { modes, info, value, inputUserInfo } = this.props;\n    let element;\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = <InfoRowForm inputUserInfo={inputUserInfo}/>;\n      } else {\n        element = (\n          <li datakey={info}>\n            {value.text} <span onClick={this.changeInfoRowToEditMode}>✎</span>\n          </li>\n        );\n      }\n    } else {\n      element = <li>{value.text}</li>;\n    }\n    return element;\n  }\n}\n\nclass BasicUserInfo extends Component {\n  changeInfoRowToEditMode = (element) => this.props.changeInfoRowToEditMode(element);\n  render() {\n    const { modes, inputUserInfo, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName'\n      || info === 'textLastName') {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputUserInfo={inputUserInfo}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass ExtendedUserInfo extends Component {\n  changeInfoRowToEditMode = (element) => this.props.changeInfoRowToEditMode(element);\n  render() {\n    const { modes, inputUserInfo, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName'\n      || info === 'textLastName') {\n        continue;\n      } else {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputUserInfo={inputUserInfo}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass UserInfo extends Component {\n  changeInfoRowToEditMode = (element) => this.props.changeInfoRowToEditMode(element);\n  // handleInputChange = (field, element) => {\n  //   this.props.handleInputChange(field, element);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   this.props.handleUserInfoUpdateBtn(field, element);\n  // };\n  render() {\n    const { modes, inputs, textDisplay } = this.props;\n\n    return (\n      <div className=\"UserInfoContainer\">\n        <BasicUserInfo\n          modes={modes}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n        />\n        <ExtendedUserInfo\n          modes={modes}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}