{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience'; // import Education from './Education';\n// import Skills from './Skills';\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfoRowToEditMode = element => {\n      const target = element.closest('li').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n\n      for (const info in textUserInfoComponent) {\n        target === info ? tempObj[target].isEdit = true : tempObj[info].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: {\n          textUserInfoComponent: tempObj\n        }\n      });\n    };\n\n    this.changeModeToEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = true;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = false;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => {\n      const tempObj = { ...this.state.inputs\n      };\n      tempObj[component][componentProp] = inputText;\n      this.setState({\n        inputs: tempObj\n      });\n    };\n\n    this.findClickedTargetDatakey = element => {\n      return element.closest('form').getAttribute('datakey');\n    };\n\n    this.handleUserInfoUpdateBtn = element => {\n      const datakey = this.findClickedTargetDatakey(element);\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n      const inputUserInfo = this.state.inputs.userInfoComponentInput.inputUserInfo;\n      tempObj[datakey].text = inputUserInfo;\n      tempObj[datakey].isEdit = false;\n      const tempInputs = { ...this.state.inputs\n      };\n      tempInputs.userInfoComponentInput.inputUserInfo = '';\n      this.setState({\n        [textUserInfoComponent]: tempObj,\n        inputs: tempInputs\n      });\n    };\n\n    this.addNewExperience = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputCompanyName,\n        inputCompanyCity,\n        inputCompanyFrom,\n        inputCompanyTo,\n        inputCompanyRole,\n        inputCompanyJobDescription\n      } = this.state.inputs.workExperienceComponentInput;\n      const work = {\n        id: uniqid(),\n        textCompanyName: inputCompanyName,\n        textCompanyCity: inputCompanyCity,\n        textCompanyFromYear: inputCompanyFrom,\n        textCompanyToYear: inputCompanyTo,\n        textCompanyRole: inputCompanyRole,\n        textCompanyRoleDescription: inputCompanyJobDescription\n      };\n      tempArr.workExperienceArray.push(work);\n      tempModes.workExperienceMode.isEdit = false;\n\n      for (const property in tempInputs.workExperienceComponentInput) {\n        tempInputs.workExperienceComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeWorkExperience = element => {\n      const index = this.findClickedTarget(element);\n      this.setState({\n        educationArray: this.state.educationArray.splice(index, 1)\n      });\n    };\n\n    this.changeWorkExperienceMode = () => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes.workExperienceMode.isEdit ? tempModes.workExperienceMode.isEdit = false : tempModes.workExperienceMode.isEdit = true;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToEdit('appMode'),\n          children: \"EDIT MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToNonEdit('appMode'),\n          children: \"VIEW MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n        modes: modes,\n        inputs: inputs.userInfoComponentInput.inputUserInfo,\n        textDisplay: textDisplay,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WorkExperience, {\n        modes: modes,\n        componentsArray: componentsArray,\n        workExperienceComponentInput: inputs.workExperienceComponentInput,\n        textWorkExperienceComponent: textDisplay.textWorkExperienceComponent,\n        handleInputChange: this.handleInputChange,\n        removeWorkExperience: this.removeWorkExperience,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        addNewExperience: this.addNewExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","WorkExperience","App","Component","constructor","props","changeInfoRowToEditMode","element","target","closest","getAttribute","textUserInfoComponent","state","textDisplay","tempObj","info","isEdit","setState","changeModeToEdit","componentMode","tempModes","modes","changeModeToNonEdit","handleInputChange","component","componentProp","inputText","inputs","findClickedTargetDatakey","handleUserInfoUpdateBtn","datakey","inputUserInfo","userInfoComponentInput","text","tempInputs","addNewExperience","tempArr","componentsArray","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","workExperienceComponentInput","work","id","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","workExperienceArray","push","workExperienceMode","property","removeWorkExperience","index","findClickedTarget","educationArray","splice","changeWorkExperienceMode","appMode","educationMode","skillsMode","skillsArray","educationComponentInput","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","skillsComponentInput","inputSkillName","textFirstName","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","textWorkExperienceComponent","textEducationComponent","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","textSkillsComponent","textSkillName","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\n// import Education from './Education';\n// import Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n  \n  changeInfoRowToEditMode = (element) => {\n    const target = element.closest('li').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    for (const info in textUserInfoComponent) {\n      target === info\n        ? (tempObj[target].isEdit = true)\n        : (tempObj[info].isEdit = false);\n    }\n    this.setState({\n      textDisplay: {\n        textUserInfoComponent: tempObj\n      }\n    });\n  };\n  changeModeToEdit = (componentMode) => {\n    const tempModes = { ...this.state.modes };\n    tempModes[componentMode].isEdit = true;\n    this.setState({\n      modes: tempModes\n    });\n  };\n  changeModeToNonEdit = (componentMode) => {\n    const tempModes = { ...this.state.modes };\n    tempModes[componentMode].isEdit = false;\n    this.setState({\n      modes: tempModes\n    });\n  };\n  handleInputChange = (component, componentProp, inputText) => {\n    const tempObj = { ...this.state.inputs };\n    tempObj[component][componentProp] = inputText;\n    this.setState({\n      inputs: tempObj\n    });\n  };\n  findClickedTargetDatakey = (element) => {\n    return element.closest('form').getAttribute('datakey');\n  };\n  handleUserInfoUpdateBtn = (element) => {\n    const datakey = this.findClickedTargetDatakey(element);\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    const inputUserInfo =\n      this.state.inputs.userInfoComponentInput.inputUserInfo;\n    tempObj[datakey].text = inputUserInfo;\n    tempObj[datakey].isEdit = false;\n    const tempInputs = { ...this.state.inputs };\n    tempInputs.userInfoComponentInput.inputUserInfo = '';\n    this.setState({\n      [textUserInfoComponent]: tempObj,\n      inputs: tempInputs\n    });\n  };\n\n  addNewExperience = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = {...this.state.inputs};\n    const {\n      inputCompanyName,\n      inputCompanyCity,\n      inputCompanyFrom,\n      inputCompanyTo,\n      inputCompanyRole,\n      inputCompanyJobDescription\n    } = this.state.inputs.workExperienceComponentInput;\n    const work = {\n      id: uniqid(),\n      textCompanyName: inputCompanyName,\n      textCompanyCity: inputCompanyCity,\n      textCompanyFromYear: inputCompanyFrom,\n      textCompanyToYear: inputCompanyTo,\n      textCompanyRole: inputCompanyRole,\n      textCompanyRoleDescription: inputCompanyJobDescription\n    };\n    tempArr.workExperienceArray.push(work);\n    tempModes.workExperienceMode.isEdit = false;\n    for (const property in tempInputs.workExperienceComponentInput) {\n      tempInputs.workExperienceComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  };\n\n  removeWorkExperience = (element) => {\n    const index = this.findClickedTarget(element);\n    this.setState({\n      educationArray: this.state.educationArray.splice(index, 1)\n    });\n  };\n\n\n\n  changeWorkExperienceMode = () => {\n    const tempModes = { ...this.state.modes };\n    tempModes.workExperienceMode.isEdit\n      ? (tempModes.workExperienceMode.isEdit = false)\n      : (tempModes.workExperienceMode.isEdit = true);\n    this.setState({\n      modes: tempModes\n    });\n  };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <nav>\n          <button onClick={() => this.changeModeToEdit('appMode')}>\n            EDIT MODE\n          </button>\n          <button onClick={() => this.changeModeToNonEdit('appMode')}>\n            VIEW MODE\n          </button>\n        </nav>\n        <UserInfo\n          modes={modes}\n          inputs={inputs.userInfoComponentInput.inputUserInfo}\n          textDisplay={textDisplay}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <WorkExperience\n          modes={modes}\n          componentsArray={componentsArray}\n          workExperienceComponentInput={inputs.workExperienceComponentInput}\n          textWorkExperienceComponent={textDisplay.textWorkExperienceComponent}\n          handleInputChange={this.handleInputChange}\n          removeWorkExperience={this.removeWorkExperience}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          addNewExperience={this.addNewExperience}\n        />\n        {/* <Education />\n        <Skills /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}