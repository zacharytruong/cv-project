{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddExperienceForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeWorkExperienceMode = e => {\n      e.preventDefault();\n      this.props.changeWorkExperienceMode();\n    };\n\n    this.addNewExperience = e => {\n      e.preventDefault();\n      this.props.addNewExperience();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        autoComplete: \"off\",\n        name: \"companyName\",\n        value: this.props.inputCompanyNameText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"City\",\n        autoComplete: \"off\",\n        name: \"city\",\n        value: this.props.inputCityText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"From\",\n        autoComplete: \"off\",\n        name: \"from\",\n        value: this.props.inputFromText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"To\",\n        autoComplete: \"off\",\n        name: \"to\",\n        value: this.props.inputToText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"5\",\n        cols: \"30\",\n        name: \"jobDescription\",\n        placeholder: \"Job Description & Achievements\",\n        value: this.props.inputJobDescriptionText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.changeWorkExperienceMode,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewExperience,\n        children: \"+ Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddExperienceBtn extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeWorkExperienceMode = () => {\n      this.props.changeWorkExperienceMode();\n      this.props.turnOffEditMode(this.props.userInfoArray);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.changeWorkExperienceMode,\n      children: \"+ Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass WorkExperience extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeWorkExperienceMode = () => {\n      let modeState = this.state.workExperienceMode.isEdit;\n      modeState ? modeState = false : modeState = true;\n      this.setState({\n        workExperienceMode: {\n          isEdit: modeState\n        }\n      });\n    };\n\n    this.handleInputChange = (field, element) => this.props.handleInputChange(field, element);\n\n    this.turnOffEditMode = () => this.props.turnOffEditMode();\n\n    this.addNewExperience = () => this.props.addNewExperience();\n\n    this.state = {\n      workExperienceMode: {\n        isEdit: false\n      }\n    };\n  }\n\n  render() {\n    const {\n      appMode,\n      userInfoArray,\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.props;\n    const {\n      workExperienceMode\n    } = this.state;\n    const rows = [];\n    let element;\n\n    if (appMode.isEdit && !workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceBtn, {\n        userInfoArray: userInfoArray,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        turnOffEditMode: this.turnOffEditMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (appMode.isEdit && workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceForm, {\n        inputCompanyNameText: inputCompanyNameText,\n        inputCityText: inputCityText,\n        inputFromText: inputFromText,\n        inputToText: inputToText,\n        inputJobDescriptionText: inputJobDescriptionText,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        handleInputChange: this.handleInputChange,\n        addNewExperience: this.addNewExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Experiences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), rows, element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WorkExperience;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js"],"names":["React","Component","AddExperienceForm","changeWorkExperienceMode","e","preventDefault","props","addNewExperience","render","inputCompanyNameText","handleInputChange","inputCityText","inputFromText","inputToText","inputJobDescriptionText","AddExperienceBtn","turnOffEditMode","userInfoArray","WorkExperience","constructor","modeState","state","workExperienceMode","isEdit","setState","field","element","appMode","rows"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,iBAAN,SAAgCD,SAAhC,CAA0C;AAAA;AAAA;;AAAA,SACxCE,wBADwC,GACZC,CAAD,IAAO;AAChCA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWH,wBAAX;AACD,KAJuC;;AAAA,SAqBxCI,gBArBwC,GAqBpBH,CAAD,IAAO;AACxBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWC,gBAAX;AACD,KAxBuC;AAAA;;AAyBxCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,cAFd;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,IAAI,EAAC,aAJP;AAKE,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWG,oBALpB;AAME,QAAA,QAAQ,EAAE,KAAKC;AANjB;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,MAFd;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,aALpB;AAME,QAAA,QAAQ,EAAE,KAAKD;AANjB;AAAA;AAAA;AAAA;AAAA,cATF,eAiBE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,MAFd;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWM,aALpB;AAME,QAAA,QAAQ,EAAE,KAAKF;AANjB;AAAA;AAAA;AAAA;AAAA,cAjBF,eAyBE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,IAFd;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,IAAI,EAAC,IAJP;AAKE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWO,WALpB;AAME,QAAA,QAAQ,EAAE,KAAKH;AANjB;AAAA;AAAA;AAAA;AAAA,cAzBF,eAiCE;AACE,QAAA,IAAI,EAAC,GADP;AAEE,QAAA,IAAI,EAAC,IAFP;AAGE,QAAA,IAAI,EAAC,gBAHP;AAIE,QAAA,WAAW,EAAC,gCAJd;AAKE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWQ,uBALpB;AAME,QAAA,QAAQ,EAAE,KAAKJ;AANjB;AAAA;AAAA;AAAA;AAAA,cAjCF,eAyCE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKP,wBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCF,eA4CE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKI,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAkDD;;AA5EuC;;AA8E1C,MAAMQ,gBAAN,SAA+Bd,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SACvCE,wBADuC,GACZ,MAAM;AAC/B,WAAKG,KAAL,CAAWH,wBAAX;AACA,WAAKG,KAAL,CAAWU,eAAX,CAA2B,KAAKV,KAAL,CAAWW,aAAtC;AACD,KAJsC;AAAA;;AAKvCT,EAAAA,MAAM,GAAG;AACP,wBACE;AAAQ,MAAA,OAAO,EAAE,KAAKL,wBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AATsC;;AAYzC,MAAMe,cAAN,SAA6BjB,SAA7B,CAAuC;AACrCkB,EAAAA,WAAW,CAACb,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBH,wBARmB,GAQQ,MAAM;AAC/B,UAAIiB,SAAS,GAAG,KAAKC,KAAL,CAAWC,kBAAX,CAA8BC,MAA9C;AACAH,MAAAA,SAAS,GAAIA,SAAS,GAAG,KAAhB,GAA0BA,SAAS,GAAG,IAA/C;AACA,WAAKI,QAAL,CAAc;AACZF,QAAAA,kBAAkB,EAAE;AAClBC,UAAAA,MAAM,EAAEH;AADU;AADR,OAAd;AAKD,KAhBkB;;AAAA,SAiBnBV,iBAjBmB,GAiBC,CAACe,KAAD,EAAQC,OAAR,KAAoB,KAAKpB,KAAL,CAAWI,iBAAX,CAA6Be,KAA7B,EAAoCC,OAApC,CAjBrB;;AAAA,SAkBnBV,eAlBmB,GAkBD,MAAM,KAAKV,KAAL,CAAWU,eAAX,EAlBL;;AAAA,SAmBnBT,gBAnBmB,GAmBA,MAAM,KAAKD,KAAL,CAAWC,gBAAX,EAnBN;;AAEjB,SAAKc,KAAL,GAAa;AACXC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,MAAM,EAAE;AADU;AADT,KAAb;AAKD;;AAaDf,EAAAA,MAAM,GAAG;AACP,UAAM;AACJmB,MAAAA,OADI;AAEJV,MAAAA,aAFI;AAGJR,MAAAA,oBAHI;AAIJE,MAAAA,aAJI;AAKJC,MAAAA,aALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA;AAPI,QAQF,KAAKR,KART;AASA,UAAM;AAAEgB,MAAAA;AAAF,QAAyB,KAAKD,KAApC;AACA,UAAMO,IAAI,GAAG,EAAb;AACA,QAAIF,OAAJ;;AACA,QAAIC,OAAO,CAACJ,MAAR,IAAkB,CAACD,kBAAkB,CAACC,MAA1C,EAAkD;AAChDG,MAAAA,OAAO,gBACL,QAAC,gBAAD;AACE,QAAA,aAAa,EAAET,aADjB;AAEE,QAAA,wBAAwB,EAAE,KAAKd,wBAFjC;AAGE,QAAA,eAAe,EAAE,KAAKa;AAHxB;AAAA;AAAA;AAAA;AAAA,cADF;AAOD;;AACD,QAAIW,OAAO,CAACJ,MAAR,IAAkBD,kBAAkB,CAACC,MAAzC,EAAiD;AAC/CG,MAAAA,OAAO,gBACL,QAAC,iBAAD;AACE,QAAA,oBAAoB,EAAEjB,oBADxB;AAEE,QAAA,aAAa,EAAEE,aAFjB;AAGE,QAAA,aAAa,EAAEC,aAHjB;AAIE,QAAA,WAAW,EAAEC,WAJf;AAKE,QAAA,uBAAuB,EAAEC,uBAL3B;AAME,QAAA,wBAAwB,EAAE,KAAKX,wBANjC;AAOE,QAAA,iBAAiB,EAAE,KAAKO,iBAP1B;AAQE,QAAA,gBAAgB,EAAE,KAAKH;AARzB;AAAA;AAAA;AAAA;AAAA,cADF;AAYD;;AACD,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGqB,IAFH,EAGGF,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAhEoC;;AAmEvC,eAAeR,cAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass AddExperienceForm extends Component {\n  changeWorkExperienceMode = (e) => {\n    e.preventDefault();\n    this.props.changeWorkExperienceMode();\n  };\n  // handleInputChange = (e) => {\n  //   let target = e.target.name;\n  //   let field;\n  //   if (target === 'companyName') {\n  //     field = 'inputCompanyNameText';\n  //   } else if (target === 'city') {\n  //     field = 'inputCityText';\n  //   } else if (target === 'from') {\n  //     field = 'inputFromText';\n  //   } else if (target === 'to') {\n  //     field = 'inputToText';\n  //   } else if (target === 'jobDescription') {\n  //     field = 'inputJobDescriptionText';\n  //   }\n  //   this.props.handleInputChange(field, e.target.value);\n  // };\n  addNewExperience = (e) => {\n    e.preventDefault();\n    this.props.addNewExperience();\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Company Name\"\n          autoComplete=\"off\"\n          name=\"companyName\"\n          value={this.props.inputCompanyNameText}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"City\"\n          autoComplete=\"off\"\n          name=\"city\"\n          value={this.props.inputCityText}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"From\"\n          autoComplete=\"off\"\n          name=\"from\"\n          value={this.props.inputFromText}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"To\"\n          autoComplete=\"off\"\n          name=\"to\"\n          value={this.props.inputToText}\n          onChange={this.handleInputChange}\n        ></input>\n        <textarea\n          rows=\"5\"\n          cols=\"30\"\n          name=\"jobDescription\"\n          placeholder=\"Job Description & Achievements\"\n          value={this.props.inputJobDescriptionText}\n          onChange={this.handleInputChange}\n        ></textarea>\n        <button type=\"submit\" onClick={this.changeWorkExperienceMode}>\n          Cancel\n        </button>\n        <button type=\"submit\" onClick={this.addNewExperience}>\n          + Add\n        </button>\n      </form>\n    );\n  }\n}\nclass AddExperienceBtn extends Component {\n  changeWorkExperienceMode = () => {\n    this.props.changeWorkExperienceMode();\n    this.props.turnOffEditMode(this.props.userInfoArray);\n  };\n  render() {\n    return (\n      <button onClick={this.changeWorkExperienceMode}>+ Experience</button>\n    );\n  }\n}\n\nclass WorkExperience extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      workExperienceMode: {\n        isEdit: false\n      }\n    };\n  }\n  changeWorkExperienceMode = () => {\n    let modeState = this.state.workExperienceMode.isEdit;\n    modeState ? (modeState = false) : (modeState = true);\n    this.setState({\n      workExperienceMode: {\n        isEdit: modeState\n      }\n    });\n  };\n  handleInputChange = (field, element) => this.props.handleInputChange(field, element);\n  turnOffEditMode = () => this.props.turnOffEditMode();\n  addNewExperience = () => this.props.addNewExperience();\n  render() {\n    const {\n      appMode,\n      userInfoArray,\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.props;\n    const { workExperienceMode } = this.state;\n    const rows = [];\n    let element;\n    if (appMode.isEdit && !workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceBtn\n          userInfoArray={userInfoArray}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          turnOffEditMode={this.turnOffEditMode}\n        />\n      );\n    }\n    if (appMode.isEdit && workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceForm\n          inputCompanyNameText={inputCompanyNameText}\n          inputCityText={inputCityText}\n          inputFromText={inputFromText}\n          inputToText={inputToText}\n          inputJobDescriptionText={inputJobDescriptionText}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          handleInputChange={this.handleInputChange}\n          addNewExperience={this.addNewExperience}\n        />\n      );\n    }\n    return (\n      <div>\n        <h2>Experiences</h2>\n        {rows}\n        {element}\n      </div>\n    );\n  }\n}\n\nexport default WorkExperience;\n"]},"metadata":{},"sourceType":"module"}