{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      const [obj, value] = Object.entries(this.props.inputs);\n      const [subObj] = Object.entries(value);\n      this.props.handleInputChange(obj, subObj, e.target.value);\n    };\n\n    this.handleUserInfoUpdateBtn = e => {\n      e.preventDefault();\n      this.props.handleUserInfoUpdateBtn('inputText', e.target);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        value: this.props.inputs.userInfoComponentInput.inputUserInfo,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.handleUserInfoUpdateBtn,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = e => this.props.changeInfoRowToEditMode(e.target);\n\n    this.handleInputChange = (obj, componentInput, inputText) => this.props.handleInputChange(obj, componentInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      info,\n      value,\n      inputs\n    } = this.props;\n    let element;\n\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = /*#__PURE__*/_jsxDEV(InfoRowForm, {\n          inputs: inputs,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this);\n      } else {\n        element = /*#__PURE__*/_jsxDEV(\"li\", {\n          datakey: info,\n          children: [value.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.changeInfoRowToEditMode,\n            children: \"\\u270E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      element = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this);\n    }\n\n    return element;\n  }\n\n}\n\nclass BasicUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (obj, componentInput, inputText) => this.props.handleInputChange(obj, componentInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputs,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputs: inputs,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass ExtendedUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (obj, componentInput, inputText) => this.props.handleInputChange(obj, componentInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputs,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputs: inputs,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (obj, componentInput, inputText) => this.props.handleInputChange(obj, componentInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (obj, componentInput, element) => this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  }\n\n  render() {\n    const {\n      modes,\n      inputs,\n      textDisplay\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: [/*#__PURE__*/_jsxDEV(BasicUserInfo, {\n        modes: modes,\n        inputs: inputs,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExtendedUserInfo, {\n        modes: modes,\n        inputs: inputs,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","InfoRowForm","handleInputChange","e","obj","value","Object","entries","props","inputs","subObj","target","handleUserInfoUpdateBtn","preventDefault","render","userInfoComponentInput","inputUserInfo","InfoRow","changeInfoRowToEditMode","componentInput","inputText","element","modes","info","appMode","isEdit","text","BasicUserInfo","userInfoText","rows","id","push","ExtendedUserInfo","UserInfo","textDisplay","textUserInfoComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './UserInfo.css';\n\nclass InfoRowForm extends Component {\n  handleInputChange = (e) => {\n    const [obj, value] = Object.entries(this.props.inputs);\n    const [subObj] = Object.entries(value);\n    \n    this.props.handleInputChange(obj, subObj, e.target.value);\n  };\n  handleUserInfoUpdateBtn = (e) => {\n    e.preventDefault();\n    this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={this.props.inputs.userInfoComponentInput.inputUserInfo}\n          onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.handleUserInfoUpdateBtn}>\n          Update\n        </button>\n      </form>\n    );\n  }\n}\n\nclass InfoRow extends Component {\n  changeInfoRowToEditMode = (e) => this.props.changeInfoRowToEditMode(e.target);\n  handleInputChange = (obj, componentInput, inputText) =>\n    this.props.handleInputChange(obj, componentInput, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, info, value, inputs } = this.props;\n    let element;\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = (\n          <InfoRowForm\n            inputs={inputs}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n      } else {\n        element = (\n          <li datakey={info}>\n            {value.text} <span onClick={this.changeInfoRowToEditMode}>✎</span>\n          </li>\n        );\n      }\n    } else {\n      element = <li>{value.text}</li>;\n    }\n    return element;\n  }\n}\n\nclass BasicUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (obj, componentInput, inputText) =>\n    this.props.handleInputChange(obj, componentInput, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, inputs, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputs={inputs}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass ExtendedUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (obj, componentInput, inputText) =>\n    this.props.handleInputChange(obj, componentInput, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, inputs, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputs={inputs}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass UserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (obj, componentInput, inputText) =>\n    this.props.handleInputChange(obj, componentInput, inputText);\n  handleUserInfoUpdateBtn = (obj, componentInput, element) =>\n    this.props.handleUserInfoUpdateBtn(obj, componentInput, element);\n  render() {\n    const { modes, inputs, textDisplay } = this.props;\n\n    return (\n      <div className=\"UserInfoContainer\">\n        <BasicUserInfo\n          modes={modes}\n          inputs={inputs}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <ExtendedUserInfo\n          modes={modes}\n          inputs={inputs}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}