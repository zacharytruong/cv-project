{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  // handleInputChange = (e) => {\n  //   this.props.handleInputChange('inputText', e.target.value);\n  // };\n  // handleUserInfoUpdateBtn = (e) => {\n  //   e.preventDefault();\n  //   this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  // };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRow extends Component {\n  render() {\n    const {\n      modes,\n      text,\n      inputUserInfo\n    } = this.props;\n    let element;\n\n    if (modes.appMode.isEdit) {\n      if (text.isEdit) {\n        element = /*#__PURE__*/_jsxDEV(InfoRowForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 19\n        }, this);\n      } else {\n        element = /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u270E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this);\n      }\n    } else {\n      element = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this);\n    }\n\n    return element;\n  }\n\n}\n\nclass BasicUserInfo extends Component {\n  render() {\n    const {\n      modes,\n      inputuserInfo,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName') {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          text: value.text,\n          modes: modes,\n          inputuserInfo: inputuserInfo\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }, this);\n        rows.push(element);\n      } else if (info === 'textLasname') {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          text: value.text,\n          modes: modes,\n          inputuserInfo: inputuserInfo\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 19\n        }, this);\n        rows.push(element);\n      }\n\n      return rows;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n} // class ExtendedUserInfo extends Component {\n//   render() {\n//     const { modes, userInfoArray, textUserInfoComponent } = this.props;\n//     const rows = [];\n//     let element;\n//     return (\n//       <div>\n//         {rows}\n//       </div>\n//     )\n//   }\n// }\n\n\nclass UserInfo extends Component {\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   this.props.changeInfoRowToEditMode(element, arr);\n  // };\n  // handleInputChange = (field, element) => {\n  //   this.props.handleInputChange(field, element);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   this.props.handleUserInfoUpdateBtn(field, element);\n  // };\n  render() {\n    const {\n      modes,\n      inputs,\n      textDisplay\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: /*#__PURE__*/_jsxDEV(BasicUserInfo, {\n        modes: modes,\n        inputUserInfo: inputs.userInfoComponentInput.inputUserInfo,\n        userInfoText: textDisplay.textUserInfoComponent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","InfoRowForm","render","InfoRow","modes","text","inputUserInfo","props","element","appMode","isEdit","BasicUserInfo","inputuserInfo","userInfoText","rows","info","value","Object","entries","id","push","UserInfo","inputs","textDisplay","userInfoComponentInput","textUserInfoComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './UserInfo.css';\n\nclass InfoRowForm extends Component {\n  // handleInputChange = (e) => {\n  //   this.props.handleInputChange('inputText', e.target.value);\n  // };\n  // handleUserInfoUpdateBtn = (e) => {\n  //   e.preventDefault();\n  //   this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  // };\n  render() {\n    return (\n      <form>\n        <input\n          // type=\"text\"\n          // autoComplete=\"off\"\n          // onChange\n          // value\n        ></input>\n        <button type=\"submit\">\n          Update\n        </button>\n      </form>\n    );\n  }\n}\n\nclass InfoRow extends Component {\n  render() {\n    const { modes, text, inputUserInfo } = this.props;\n    let element;\n    if (modes.appMode.isEdit) {\n      if (text.isEdit) {\n        element = <InfoRowForm />\n      } else {\n          element = <li>{text} <span>âœŽ</span></li>\n      }\n    } else {\n      element = <li>{text}</li>\n    }\n    return element;\n  }\n}\n\nclass BasicUserInfo extends Component {\n  render() {\n    const { modes, inputuserInfo, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName') {\n        element = <InfoRow key={value.id} text={value.text} modes={modes} inputuserInfo={inputuserInfo}/>\n        rows.push(element);\n      } else if (info === 'textLasname') {\n        element = <InfoRow key={value.id} text={value.text} modes={modes} inputuserInfo={inputuserInfo}/>\n        rows.push(element);\n      }\n      return rows;\n    }\n    return (\n      <div>\n        <ul>\n          {rows}\n        </ul>\n      </div>\n    )\n  }\n}\n\n// class ExtendedUserInfo extends Component {\n//   render() {\n//     const { modes, userInfoArray, textUserInfoComponent } = this.props;\n//     const rows = [];\n//     let element;\n\n//     return (\n//       <div>\n//         {rows}\n//       </div>\n//     )\n//   }\n// }\n\nclass UserInfo extends Component {\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   this.props.changeInfoRowToEditMode(element, arr);\n  // };\n  // handleInputChange = (field, element) => {\n  //   this.props.handleInputChange(field, element);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   this.props.handleUserInfoUpdateBtn(field, element);\n  // };\n  render() {\n    const { modes, inputs, textDisplay } = this.props;\n\n    return (\n      <div className=\"UserInfoContainer\">\n        <BasicUserInfo\n          modes={modes}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n        />\n        {/* <ExtendedUserInfo\n          modes={modes}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n        /> */}\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}