{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/App.js\";\nimport React from 'react';\nimport Header from './components/Header';\nimport Builder from './components/Builder';\nimport Footer from './components/Footer';\nimport uniqid from 'uniqid';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeAppModeToEdit = () => {\n      this.setState({\n        appMode: {\n          isEdit: true\n        }\n      });\n    };\n\n    this.changeAppModeToNonEdit = () => {\n      this.setState({\n        appMode: {\n          isEdit: false\n        }\n      });\n    };\n\n    this.handleInputChange = (field, inputText) => {\n      this.setState({\n        [field]: inputText\n      });\n    };\n\n    this.findClickedTarget = element => {\n      const target = element.parentNode;\n      const parent = Array.from(target.parentNode.children);\n      return parent.indexOf(target);\n    };\n\n    this.handleUserInfoUpdateBtn = (field, element) => {\n      const index = this.findClickedTarget(element);\n      const tempArr = [...this.state.userInfoArray];\n      tempArr[index].text = this.state[field];\n      tempArr[index].mode.isEdit = false;\n      this.setState({\n        [field]: '',\n        userInfoArray: tempArr\n      });\n    };\n\n    this.changeInfoRowToEditMode = (element, arr) => {\n      const index = this.findClickedTarget(element);\n      const tempArr = [...arr];\n      tempArr.forEach(item => item.mode.isEdit = false);\n      tempArr[index].mode.isEdit = true;\n      this.setState({\n        [arr]: tempArr\n      });\n    };\n\n    this.turnOffUserInfoEditMode = arr => {\n      const tempArr = [...arr];\n      tempArr.forEach(item => item.mode.isEdit = false);\n      this.setState({\n        [arr]: tempArr\n      });\n    };\n\n    this.changeWorkExperienceMode = () => {\n      let modeState = this.state.workExperienceMode.isEdit;\n      modeState ? modeState = false : modeState = true;\n      this.setState({\n        workExperienceMode: {\n          isEdit: modeState\n        }\n      });\n    };\n\n    this.addNewExperience = () => {\n      const {\n        inputCompanyNameText,\n        inputCityText,\n        inputFromText,\n        inputToText,\n        inputJobDescriptionText\n      } = this.state;\n      const work = {\n        id: uniqid(),\n        companyNameText: inputCompanyNameText,\n        cityText: inputCityText,\n        fromText: inputFromText,\n        toText: inputToText,\n        jobDescriptionText: inputJobDescriptionText\n      };\n      this.setState({\n        workExperienceArray: this.state.workExperienceArray.concat(work),\n        workExperienceMode: {\n          isEdit: false\n        },\n        inputCompanyNameText: '',\n        inputCityText: '',\n        inputFromText: '',\n        inputToText: '',\n        inputJobDescriptionText: ''\n      });\n    };\n\n    this.removeWorkExperience = element => {\n      const index = this.findClickedTarget(element);\n      this.setState({\n        workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n      });\n    };\n\n    this.state = {\n      inputText: '',\n      inputCompanyNameText: '',\n      inputCityText: '',\n      inputFromText: '',\n      inputToText: '',\n      inputJobDescriptionText: '',\n      inputSchoolText: '',\n      inputSchoolCityText: '',\n      inputSchoolFromYearText: '',\n      inputSchoolToYearText: '',\n      inputSchoolDegreeText: '',\n      inputSchoolDegreeDescriptionText: '',\n      appMode: {\n        isEdit: true\n      },\n      workExperienceMode: {\n        isEdit: false\n      },\n      educationMode: {\n        isEdit: false\n      },\n      userInfoArray: [{\n        name: 'firstName',\n        text: 'First Name',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'lastName',\n        text: 'Last Name',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'currentRole',\n        text: 'Fullstack Javascript Developer',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'address',\n        text: 'Houston, TX',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'phone',\n        text: '(555) 555-5555',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'email',\n        text: 'yourname@email.com',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }, {\n        name: 'github',\n        text: 'https://github.com',\n        id: uniqid(),\n        mode: {\n          isEdit: false\n        }\n      }],\n      workExperienceArray: [],\n      educationArray: []\n    };\n  }\n\n  render() {\n    const {\n      appMode,\n      userInfoArray,\n      workExperienceArray,\n      workExperienceMode,\n      inputText,\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        appMode: appMode,\n        changeAppModeToEdit: this.changeAppModeToEdit,\n        changeAppModeToNonEdit: this.changeAppModeToNonEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Builder, {\n        appMode: appMode,\n        inputText: inputText,\n        inputCompanyNameText: inputCompanyNameText,\n        inputCityText: inputCityText,\n        inputFromText: inputFromText,\n        inputToText: inputToText,\n        inputJobDescriptionText: inputJobDescriptionText,\n        userInfoArray: userInfoArray,\n        workExperienceMode: workExperienceMode,\n        workExperienceArray: workExperienceArray,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        turnOffUserInfoEditMode: this.turnOffUserInfoEditMode,\n        addNewExperience: this.addNewExperience,\n        removeWorkExperience: this.removeWorkExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/App.js"],"names":["React","Header","Builder","Footer","uniqid","App","Component","constructor","props","changeAppModeToEdit","setState","appMode","isEdit","changeAppModeToNonEdit","handleInputChange","field","inputText","findClickedTarget","element","target","parentNode","parent","Array","from","children","indexOf","handleUserInfoUpdateBtn","index","tempArr","state","userInfoArray","text","mode","changeInfoRowToEditMode","arr","forEach","item","turnOffUserInfoEditMode","changeWorkExperienceMode","modeState","workExperienceMode","addNewExperience","inputCompanyNameText","inputCityText","inputFromText","inputToText","inputJobDescriptionText","work","id","companyNameText","cityText","fromText","toText","jobDescriptionText","workExperienceArray","concat","removeWorkExperience","splice","inputSchoolText","inputSchoolCityText","inputSchoolFromYearText","inputSchoolToYearText","inputSchoolDegreeText","inputSchoolDegreeDescriptionText","educationMode","name","educationArray","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './components/Header';\nimport Builder from './components/Builder';\nimport Footer from './components/Footer';\nimport uniqid from 'uniqid';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: '',\n      inputCompanyNameText: '',\n      inputCityText: '',\n      inputFromText: '',\n      inputToText: '',\n      inputJobDescriptionText: '',\n      inputSchoolText: '',\n      inputSchoolCityText: '',\n      inputSchoolFromYearText: '',\n      inputSchoolToYearText: '',\n      inputSchoolDegreeText: '',\n      inputSchoolDegreeDescriptionText: '',\n      appMode: {\n        isEdit: true\n      },\n      workExperienceMode: {\n        isEdit: false\n      },\n      educationMode: {\n        isEdit: false\n      },\n      userInfoArray: [\n        {\n          name: 'firstName',\n          text: 'First Name',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'lastName',\n          text: 'Last Name',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'currentRole',\n          text: 'Fullstack Javascript Developer',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'address',\n          text: 'Houston, TX',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'phone',\n          text: '(555) 555-5555',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'email',\n          text: 'yourname@email.com',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        },\n        {\n          name: 'github',\n          text: 'https://github.com',\n          id: uniqid(),\n          mode: {\n            isEdit: false\n          }\n        }\n      ],\n      workExperienceArray: [],\n      educationArray: []\n    };\n  }\n  changeAppModeToEdit = () => {\n    this.setState({\n      appMode: {\n        isEdit: true\n      }\n    });\n  };\n  changeAppModeToNonEdit = () => {\n    this.setState({\n      appMode: {\n        isEdit: false\n      }\n    });\n  };\n  handleInputChange = (field, inputText) => {\n    this.setState({\n      [field]: inputText\n    });\n  };\n  findClickedTarget = (element) => {\n    const target = element.parentNode;\n    const parent = Array.from(target.parentNode.children);\n    return parent.indexOf(target);\n  };\n  handleUserInfoUpdateBtn = (field, element) => {\n    const index = this.findClickedTarget(element);\n    const tempArr = [...this.state.userInfoArray];\n    tempArr[index].text = this.state[field];\n    tempArr[index].mode.isEdit = false;\n    this.setState({\n      [field]: '',\n      userInfoArray: tempArr\n    });\n  };\n  changeInfoRowToEditMode = (element, arr) => {\n    const index = this.findClickedTarget(element);\n    const tempArr = [...arr];\n    tempArr.forEach((item) => (item.mode.isEdit = false));\n    tempArr[index].mode.isEdit = true;\n    this.setState({\n      [arr]: tempArr\n    });\n  };\n  turnOffUserInfoEditMode = (arr) => {\n    const tempArr = [...arr];\n    tempArr.forEach((item) => (item.mode.isEdit = false));\n    this.setState({\n      [arr]: tempArr\n    });\n  };\n  changeWorkExperienceMode = () => {\n    let modeState = this.state.workExperienceMode.isEdit;\n    modeState ? (modeState = false) : (modeState = true);\n    this.setState({\n      workExperienceMode: {\n        isEdit: modeState\n      }\n    });\n  };\n  addNewExperience = () => {\n    const {\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.state;\n    const work = {\n      id: uniqid(),\n      companyNameText: inputCompanyNameText,\n      cityText: inputCityText,\n      fromText: inputFromText,\n      toText: inputToText,\n      jobDescriptionText: inputJobDescriptionText\n    };\n    this.setState({\n      workExperienceArray: this.state.workExperienceArray.concat(work),\n      workExperienceMode: {\n        isEdit: false\n      },\n      inputCompanyNameText: '',\n      inputCityText: '',\n      inputFromText: '',\n      inputToText: '',\n      inputJobDescriptionText: ''\n    });\n  };\n  removeWorkExperience = (element) => {\n    const index = this.findClickedTarget(element);\n    this.setState({\n      workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n    });\n  };\n  render() {\n    const {\n      appMode,\n      userInfoArray,\n      workExperienceArray,\n      workExperienceMode,\n      inputText,\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <Header\n          appMode={appMode}\n          changeAppModeToEdit={this.changeAppModeToEdit}\n          changeAppModeToNonEdit={this.changeAppModeToNonEdit}\n        />\n        <Builder\n          appMode={appMode}\n          inputText={inputText}\n          inputCompanyNameText={inputCompanyNameText}\n          inputCityText={inputCityText}\n          inputFromText={inputFromText}\n          inputToText={inputToText}\n          inputJobDescriptionText={inputJobDescriptionText}\n          userInfoArray={userInfoArray}\n          workExperienceMode={workExperienceMode}\n          workExperienceArray={workExperienceArray}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          turnOffUserInfoEditMode={this.turnOffUserInfoEditMode}\n          addNewExperience={this.addNewExperience}\n          removeWorkExperience={this.removeWorkExperience}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}