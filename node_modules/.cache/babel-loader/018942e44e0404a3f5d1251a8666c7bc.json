{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/Skills.js\";\nimport React, { Component } from 'react';\nimport './Skills.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SkillList extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.removeSkill = e => this.props.removeSkill(e.target);\n  }\n\n  render() {\n    const {\n      modes,\n      skill\n    } = this.props;\n    let removeBtn;\n\n    if (!modes.appMode.isEdit) {\n      removeBtn = null;\n    } else {\n      removeBtn = /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: this.removeSkill,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [skill.textSkillName, \" \", removeBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddSkillForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      this.props.handleInputChange('skillsComponentInput', 'inputSkillName', e.target.value);\n    };\n\n    this.addNewSkill = e => {\n      e.preventDefault();\n      this.props.addNewSkill();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        value: this.props.inputs,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewSkill,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddSkillBtn extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeSkillsMode = () => this.props.changeSkillsMode(true);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.changeSkillsMode,\n      children: \"+ Skill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass Skills extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeComponentMode = (component, boolean) => {\n      this.props.changeComponentMode(component, boolean);\n    };\n\n    this.addNewSkill = () => this.props.addNewSkill();\n\n    this.removeSkill = element => this.props.removeSkill(element);\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.componentModeName = 'skillsMode';\n    this.componentInputName = 'skillsComponentInput';\n  } // changeSkillsMode = (boolean) => this.props.changeSkillsMode(boolean);\n\n\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs\n    } = this.props;\n    const skillsArray = componentsArray.skillsArray;\n    const rows = skillsArray.map(skill => /*#__PURE__*/_jsxDEV(SkillList, {\n      modes: modes,\n      skill: skill,\n      removeSkill: this.removeSkill\n    }, skill.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this));\n    let element;\n\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n\n    if (modes.appMode.isEdit && !modes.skillsMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddSkillBtn, {\n        changeComponentMode: this.changeComponentMode,\n        componentModeName: this.componentModeName\n        /* changeSkillsMode={this.changeSkillsMode} */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (modes.appMode.isEdit && modes.skillsMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddSkillForm, {\n        inputs: inputs,\n        componentModeName: this.componentModeName,\n        componentInputName: this.componentInputName,\n        handleInputChange: this.handleInputChange,\n        changeComponentMode: this.changeComponentMode,\n        addNewSkill: this.addNewSkill // changeSkillsMode={this.changeSkillsMode}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Skills\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"skillContainer\",\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Skills;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/Skills.js"],"names":["React","Component","SkillList","removeSkill","e","props","target","render","modes","skill","removeBtn","appMode","isEdit","textSkillName","AddSkillForm","handleInputChange","value","addNewSkill","preventDefault","inputs","AddSkillBtn","changeSkillsMode","Skills","constructor","changeComponentMode","component","boolean","element","componentProp","inputText","componentModeName","componentInputName","componentsArray","skillsArray","rows","map","id","skillsMode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Skills.css';\n\nclass SkillList extends Component {\n  removeSkill = (e) => this.props.removeSkill(e.target);\n  render() {\n    const { modes, skill } = this.props;\n    let removeBtn;\n    if (!modes.appMode.isEdit) {\n      removeBtn = null;\n    } else {\n      removeBtn = <span onClick={this.removeSkill}>X</span>;\n    }\n    return (\n      <li>\n        {skill.textSkillName} {removeBtn}\n      </li>\n    );\n  }\n}\n\nclass AddSkillForm extends Component {\n  handleInputChange = (e) => {\n    this.props.handleInputChange(\n      'skillsComponentInput',\n      'inputSkillName',\n      e.target.value\n    );\n  };\n  addNewSkill = (e) => {\n    e.preventDefault();\n    this.props.addNewSkill();\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={this.props.inputs}\n          onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.addNewSkill}>\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nclass AddSkillBtn extends Component {\n  changeSkillsMode = () => this.props.changeSkillsMode(true);\n  render() {\n    return <button onClick={this.changeSkillsMode}>+ Skill</button>;\n  }\n}\n\nclass Skills extends Component {\n  constructor(props) {\n    super(props);\n    this.componentModeName = 'skillsMode';\n    this.componentInputName = 'skillsComponentInput';\n  }\n  // changeSkillsMode = (boolean) => this.props.changeSkillsMode(boolean);\n  changeComponentMode = (component, boolean) => {\n    this.props.changeComponentMode(component, boolean);\n  };\n  addNewSkill = () => this.props.addNewSkill();\n  removeSkill = (element) => this.props.removeSkill(element);\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  render() {\n    const { modes, componentsArray, inputs } = this.props;\n    const skillsArray = componentsArray.skillsArray;\n    const rows = skillsArray.map((skill) => (\n      <SkillList\n        modes={modes}\n        skill={skill}\n        key={skill.id}\n        removeSkill={this.removeSkill}\n      />\n    ));\n    let element;\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n    if (modes.appMode.isEdit && !modes.skillsMode.isEdit) {\n      element = (\n        <AddSkillBtn\n        changeComponentMode={this.changeComponentMode}\n        componentModeName={this.componentModeName}\n        /* changeSkillsMode={this.changeSkillsMode} */\n        />\n      );\n    }\n    if (modes.appMode.isEdit && modes.skillsMode.isEdit) {\n      element = (\n        <AddSkillForm\n          inputs={inputs}\n          componentModeName={this.componentModeName}\n          componentInputName={this.componentInputName}\n          handleInputChange={this.handleInputChange}\n          changeComponentMode={this.changeComponentMode}\n          addNewSkill={this.addNewSkill}\n          // changeSkillsMode={this.changeSkillsMode}\n        />\n      );\n    }\n    return (\n      <div>\n        <h2>Skills</h2>\n        <ul className=\"skillContainer\">{rows}</ul>\n        {element}\n      </div>\n    );\n  }\n}\n\nexport default Skills;\n"]},"metadata":{},"sourceType":"module"}