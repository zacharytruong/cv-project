{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/Skills.js\";\nimport React, { Component } from 'react';\nimport './Skills.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SkillList extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.removeSkill = e => this.props.removeSkill(e.target);\n  }\n\n  render() {\n    const {\n      modes,\n      skill\n    } = this.props;\n    let removeBtn;\n\n    if (!modes.appMode.isEdit) {\n      removeBtn = null;\n    } else {\n      removeBtn = /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: this.removeSkill,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [skill.textSkillName, \" \", removeBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddSkillForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeComponentMode = e => {\n      e.preventDefault();\n      this.props.changeComponentMode(this.props.componentModeName, false);\n    };\n\n    this.handleInputChange = e => {\n      let target = e.target.name;\n      let inputText = e.target.value;\n      this.props.handleInputChange(this.props.componentInputName, target, inputText);\n    };\n\n    this.addNewSkill = e => {\n      e.preventDefault();\n      this.props.addNewSkill();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"inputSkillName\",\n        value: this.props.inputs,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewSkill,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddSkillBtn extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeComponentMode = () => this.props.changeComponentMode(this.props.componentModeName, true);\n  }\n\n  // changeSkillsMode = () => this.props.changeSkillsMode(true);\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick:\n      /* this.changeSkillsMode */\n      this.changeComponentMode,\n      children: \"+ Skill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass Skills extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeComponentMode = (component, boolean) => {\n      this.props.changeComponentMode(component, boolean);\n    };\n\n    this.addNewSkill = () => this.props.addNewSkill();\n\n    this.removeSkill = element => this.props.removeSkill(element);\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.componentModeName = 'skillsMode';\n    this.componentInputName = 'skillsComponentInput';\n  } // changeSkillsMode = (boolean) => this.props.changeSkillsMode(boolean);\n\n\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs\n    } = this.props;\n    const skillsArray = componentsArray.skillsArray;\n    const rows = skillsArray.map(skill => /*#__PURE__*/_jsxDEV(SkillList, {\n      modes: modes,\n      skill: skill,\n      removeSkill: this.removeSkill\n    }, skill.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this));\n    let element;\n\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n\n    if (modes.appMode.isEdit && !modes.skillsMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddSkillBtn, {\n        componentModeName: this.componentModeName,\n        changeComponentMode: this.changeComponentMode\n        /* changeSkillsMode={this.changeSkillsMode} */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (modes.appMode.isEdit && modes.skillsMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddSkillForm, {\n        inputs: inputs,\n        componentModeName: this.componentModeName,\n        componentInputName: this.componentInputName,\n        handleInputChange: this.handleInputChange // changeComponentMode={this.changeComponentMode}\n        ,\n        addNewSkill: this.addNewSkill // changeSkillsMode={this.changeSkillsMode}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Skills\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"skillContainer\",\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Skills;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/Skills.js"],"names":["React","Component","SkillList","removeSkill","e","props","target","render","modes","skill","removeBtn","appMode","isEdit","textSkillName","AddSkillForm","changeComponentMode","preventDefault","componentModeName","handleInputChange","name","inputText","value","componentInputName","addNewSkill","inputs","AddSkillBtn","Skills","constructor","component","boolean","element","componentProp","componentsArray","skillsArray","rows","map","id","skillsMode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Skills.css';\n\nclass SkillList extends Component {\n  removeSkill = (e) => this.props.removeSkill(e.target);\n  render() {\n    const { modes, skill } = this.props;\n    let removeBtn;\n    if (!modes.appMode.isEdit) {\n      removeBtn = null;\n    } else {\n      removeBtn = <span onClick={this.removeSkill}>X</span>;\n    }\n    return (\n      <li>\n        {skill.textSkillName} {removeBtn}\n      </li>\n    );\n  }\n}\n\nclass AddSkillForm extends Component {\n  changeComponentMode = (e) => {\n    e.preventDefault();\n    this.props.changeComponentMode(this.props.componentModeName, false);\n  };\n  // handleInputChange = (e) => {\n  //   this.props.handleInputChange(\n  //     this.props.componentInputName,\n  //     e.target.name,\n  //     e.target.value\n  //   );\n  // };\n  handleInputChange = (e) => {\n    let target = e.target.name;\n    let inputText = e.target.value;\n    this.props.handleInputChange(this.props.componentInputName, target, inputText);\n  };\n  addNewSkill = (e) => {\n    e.preventDefault();\n    this.props.addNewSkill();\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          name=\"inputSkillName\"\n          value={this.props.inputs}\n          onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.addNewSkill}>\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nclass AddSkillBtn extends Component {\n  changeComponentMode = () => this.props.changeComponentMode(this.props.componentModeName, true);\n  // changeSkillsMode = () => this.props.changeSkillsMode(true);\n  render() {\n    return <button onClick={/* this.changeSkillsMode */this.changeComponentMode}>+ Skill</button>;\n  }\n}\n\nclass Skills extends Component {\n  constructor(props) {\n    super(props);\n    this.componentModeName = 'skillsMode';\n    this.componentInputName = 'skillsComponentInput';\n  }\n  // changeSkillsMode = (boolean) => this.props.changeSkillsMode(boolean);\n  changeComponentMode = (component, boolean) => {\n    this.props.changeComponentMode(component, boolean);\n  };\n  addNewSkill = () => this.props.addNewSkill();\n  removeSkill = (element) => this.props.removeSkill(element);\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  render() {\n    const { modes, componentsArray, inputs } = this.props;\n    const skillsArray = componentsArray.skillsArray;\n    const rows = skillsArray.map((skill) => (\n      <SkillList\n        modes={modes}\n        skill={skill}\n        key={skill.id}\n        removeSkill={this.removeSkill}\n      />\n    ));\n    let element;\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n    if (modes.appMode.isEdit && !modes.skillsMode.isEdit) {\n      element = (\n        <AddSkillBtn\n        componentModeName={this.componentModeName}\n        changeComponentMode={this.changeComponentMode}\n        /* changeSkillsMode={this.changeSkillsMode} */\n        />\n      );\n    }\n    if (modes.appMode.isEdit && modes.skillsMode.isEdit) {\n      element = (\n        <AddSkillForm\n          inputs={inputs}\n          componentModeName={this.componentModeName}\n          componentInputName={this.componentInputName}\n          handleInputChange={this.handleInputChange}\n          // changeComponentMode={this.changeComponentMode}\n          addNewSkill={this.addNewSkill}\n          // changeSkillsMode={this.changeSkillsMode}\n        />\n      );\n    }\n    return (\n      <div>\n        <h2>Skills</h2>\n        <ul className=\"skillContainer\">\n          {rows}\n        </ul>\n        {element}\n      </div>\n    );\n  }\n}\n\nexport default Skills;\n"]},"metadata":{},"sourceType":"module"}