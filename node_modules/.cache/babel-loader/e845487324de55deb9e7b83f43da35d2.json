{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js\";\nimport React, { Component } from 'react';\nimport './WorkExperience.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ExperienceHistoryRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.removeClickedTarget = e => this.props.removeClickedTarget(e.target, this.props.target, this.props.arrName);\n  }\n\n  render() {\n    const {\n      modes,\n      work\n    } = this.props;\n    let button;\n\n    if (modes.appMode.isEdit) {\n      button = /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.removeClickedTarget,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this);\n    } else button = null;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"\",\n          children: [work.textCompanyName, \", \", work.textCompanyCity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [work.textCompanyFromYear, \" - \", work.textCompanyToYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: work.textCompanyRole\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: work.textCompanyRoleDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), button]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddExperienceForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeComponentMode = e => {\n      e.preventDefault();\n      this.props.changeComponentMode(this.props.componentModeName, false);\n    };\n\n    this.handleInputChange = e => {\n      let target = e.target.name;\n      let inputText = e.target.value;\n      this.props.handleInputChange(this.props.componentInputName, target, inputText);\n    };\n\n    this.addNewExperience = e => {\n      e.preventDefault();\n      this.props.addNewExperience();\n    };\n  }\n\n  render() {\n    const {\n      inputCompanyName,\n      inputCompanyCity,\n      inputCompanyFrom,\n      inputCompanyTo,\n      inputCompanyRole,\n      inputCompanyJobDescription\n    } = this.props.workExperienceComponentInput;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        autoComplete: \"off\",\n        name: \"inputCompanyName\",\n        value: inputCompanyName,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"City\",\n        autoComplete: \"off\",\n        name: \"inputCompanyCity\",\n        value: inputCompanyCity,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"From\",\n        autoComplete: \"off\",\n        name: \"inputCompanyFrom\",\n        value: inputCompanyFrom,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"To\",\n        autoComplete: \"off\",\n        name: \"inputCompanyTo\",\n        value: inputCompanyTo,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Role\",\n        autoComplete: \"off\",\n        name: \"inputCompanyRole\",\n        value: inputCompanyRole,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"5\",\n        cols: \"30\",\n        name: \"inputCompanyJobDescription\",\n        placeholder: \"Job Description & Achievements\",\n        value: inputCompanyJobDescription,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.changeComponentMode,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewExperience,\n        children: \"+ Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddExperienceBtn extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeComponentMode = () => this.props.changeComponentMode(this.props.componentModeName, true);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.changeComponentMode,\n      children: \"+ Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass WorkExperience extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeComponentMode = (component, boolean) => {\n      this.props.changeComponentMode(component, boolean);\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.addNewExperience = () => this.props.addNewExperience();\n\n    this.removeClickedTarget = (element, target, arr) => this.props.removeClickedTarget(element, target, arr);\n\n    this.componentModeName = 'workExperienceMode';\n    this.componentInputName = 'workExperienceComponentInput';\n    this.arrName = 'workExperienceArray';\n    this.target = 'experienceContainer';\n  }\n\n  render() {\n    const {\n      modes,\n      workExperienceComponentInput,\n      componentsArray\n    } = this.props;\n    const workExperienceArray = componentsArray.workExperienceArray;\n    const rows = workExperienceArray.map(work => /*#__PURE__*/_jsxDEV(ExperienceHistoryRow, {\n      modes: modes,\n      target: this.target,\n      arrName: this.arrName,\n      work: work,\n      removeClickedTarget: this.removeClickedTarget\n    }, work.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this));\n    let element;\n\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n\n    if (modes.appMode.isEdit && !modes.workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceBtn, {\n        componentModeName: this.componentModeName,\n        changeComponentMode: this.changeComponentMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (modes.appMode.isEdit && modes.workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceForm, {\n        workExperienceComponentInput: workExperienceComponentInput,\n        componentModeName: this.componentModeName,\n        componentInputName: this.componentInputName,\n        changeComponentMode: this.changeComponentMode,\n        handleInputChange: this.handleInputChange,\n        addNewExperience: this.addNewExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container experience\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Experiences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: this.target,\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WorkExperience;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js"],"names":["React","Component","ExperienceHistoryRow","removeClickedTarget","e","props","target","arrName","render","modes","work","button","appMode","isEdit","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","AddExperienceForm","changeComponentMode","preventDefault","componentModeName","handleInputChange","name","inputText","value","componentInputName","addNewExperience","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","workExperienceComponentInput","AddExperienceBtn","WorkExperience","constructor","component","boolean","componentProp","element","arr","componentsArray","workExperienceArray","rows","map","id","workExperienceMode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './WorkExperience.css';\n\nclass ExperienceHistoryRow extends Component {\n  removeClickedTarget = (e) =>\n    this.props.removeClickedTarget(e.target, this.props.target, this.props.arrName);\n  render() {\n    const { modes, work } = this.props;\n    let button;\n    if (modes.appMode.isEdit) {\n      button = (\n        <button\n          type=\"submit\"\n          onClick={this.removeClickedTarget}\n        >\n          X\n        </button>\n      );\n    } else button = null;\n    return (\n      <div>\n        <div>\n          <p className=''>\n            {work.textCompanyName}, {work.textCompanyCity}\n          </p>\n        </div>\n        <div>\n          <p>\n            {work.textCompanyFromYear} - {work.textCompanyToYear}\n          </p>\n          <p>{work.textCompanyRole}</p>\n          <p>{work.textCompanyRoleDescription}</p>\n        </div>\n        {button}\n      </div>\n    );\n  }\n}\n\nclass AddExperienceForm extends Component {\n  changeComponentMode = (e) => {\n    e.preventDefault();\n    this.props.changeComponentMode(this.props.componentModeName, false);\n  };\n  handleInputChange = (e) => {\n    let target = e.target.name;\n    let inputText = e.target.value;\n    this.props.handleInputChange(\n      this.props.componentInputName,\n      target,\n      inputText\n    );\n  };\n  addNewExperience = (e) => {\n    e.preventDefault();\n    this.props.addNewExperience();\n  };\n  render() {\n    const {\n      inputCompanyName,\n      inputCompanyCity,\n      inputCompanyFrom,\n      inputCompanyTo,\n      inputCompanyRole,\n      inputCompanyJobDescription\n    } = this.props.workExperienceComponentInput;\n    return (\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Company Name\"\n          autoComplete=\"off\"\n          name=\"inputCompanyName\"\n          value={inputCompanyName}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"City\"\n          autoComplete=\"off\"\n          name=\"inputCompanyCity\"\n          value={inputCompanyCity}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"From\"\n          autoComplete=\"off\"\n          name=\"inputCompanyFrom\"\n          value={inputCompanyFrom}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"To\"\n          autoComplete=\"off\"\n          name=\"inputCompanyTo\"\n          value={inputCompanyTo}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"Role\"\n          autoComplete=\"off\"\n          name=\"inputCompanyRole\"\n          value={inputCompanyRole}\n          onChange={this.handleInputChange}\n        ></input>\n        <textarea\n          rows=\"5\"\n          cols=\"30\"\n          name=\"inputCompanyJobDescription\"\n          placeholder=\"Job Description & Achievements\"\n          value={inputCompanyJobDescription}\n          onChange={this.handleInputChange}\n        ></textarea>\n        <button type=\"submit\" onClick={this.changeComponentMode}>\n          Cancel\n        </button>\n        <button type=\"submit\" onClick={this.addNewExperience}>\n          + Add\n        </button>\n      </form>\n    );\n  }\n}\n\nclass AddExperienceBtn extends Component {\n  changeComponentMode = () =>\n    this.props.changeComponentMode(this.props.componentModeName, true);\n  render() {\n    return <button onClick={this.changeComponentMode}>+ Experience</button>;\n  }\n}\n\nclass WorkExperience extends Component {\n  constructor(props) {\n    super(props);\n    this.componentModeName = 'workExperienceMode';\n    this.componentInputName = 'workExperienceComponentInput';\n    this.arrName = 'workExperienceArray';\n    this.target = 'experienceContainer';\n  }\n  changeComponentMode = (component, boolean) => {\n    this.props.changeComponentMode(component, boolean);\n  };\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  addNewExperience = () => this.props.addNewExperience();\n  removeClickedTarget = (element, target, arr) =>\n    this.props.removeClickedTarget(element, target, arr);\n  render() {\n    const { modes, workExperienceComponentInput, componentsArray } = this.props;\n    const workExperienceArray = componentsArray.workExperienceArray;\n    const rows = workExperienceArray.map((work) => (\n      <ExperienceHistoryRow\n        modes={modes}\n        target={this.target}\n        arrName={this.arrName}\n        work={work}\n        key={work.id}\n        removeClickedTarget={this.removeClickedTarget}\n      />\n    ));\n    let element;\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n    if (modes.appMode.isEdit && !modes.workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceBtn\n          componentModeName={this.componentModeName}\n          changeComponentMode={this.changeComponentMode}\n        />\n      );\n    }\n    if (modes.appMode.isEdit && modes.workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceForm\n          workExperienceComponentInput={workExperienceComponentInput}\n          componentModeName={this.componentModeName}\n          componentInputName={this.componentInputName}\n          changeComponentMode={this.changeComponentMode}\n          handleInputChange={this.handleInputChange}\n          addNewExperience={this.addNewExperience}\n        />\n      );\n    }\n    return (\n      <div className='container experience'>\n        <h2>Experiences</h2>\n        <ul className={this.target}>{rows}</ul>\n        {element}\n      </div>\n    );\n  }\n}\n\nexport default WorkExperience;\n"]},"metadata":{},"sourceType":"module"}