{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js\";\nimport React, { Component } from 'react';\nimport './WorkExperience.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ExperienceHistoryRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.removeWorkExperience = e => this.props.removeWorkExperience(e.target);\n  }\n\n  render() {\n    const {\n      work\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [work.textCompanyName, \", \", work.textCompanyCity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [work.textCompanyFromYear, \" - \", work.textCompanyToYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: work.textCompanyRole\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: work.textCompanyRoleDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.removeWorkExperience,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this);\n  }\n\n} // class AddExperienceForm extends Component {\n//   changeWorkExperienceMode = (e) => {\n//     e.preventDefault();\n//     this.props.changeWorkExperienceMode();\n//   };\n//   handleInputChange = (e) => {\n//     let target = e.target.name;\n//     let field;\n//     if (target === 'companyName') {\n//       field = 'inputCompanyNameText';\n//     } else if (target === 'city') {\n//       field = 'inputCityText';\n//     } else if (target === 'from') {\n//       field = 'inputFromText';\n//     } else if (target === 'to') {\n//       field = 'inputToText';\n//     } else if (target === 'jobDescription') {\n//       field = 'inputJobDescriptionText';\n//     }\n//     this.props.handleInputChange(field, e.target.value);\n//   };\n//   addNewExperience = (e) => {\n//     e.preventDefault();\n//     this.props.addNewExperience();\n//   };\n//   render() {\n//     return (\n//       <form>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Company Name\"\n//           autoComplete=\"off\"\n//           name=\"companyName\"\n//           value={this.props.inputCompanyNameText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"City\"\n//           autoComplete=\"off\"\n//           name=\"city\"\n//           value={this.props.inputCityText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"From\"\n//           autoComplete=\"off\"\n//           name=\"from\"\n//           value={this.props.inputFromText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"To\"\n//           autoComplete=\"off\"\n//           name=\"to\"\n//           value={this.props.inputToText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <textarea\n//           rows=\"5\"\n//           cols=\"30\"\n//           name=\"jobDescription\"\n//           placeholder=\"Job Description & Achievements\"\n//           value={this.props.inputJobDescriptionText}\n//           onChange={this.handleInputChange}\n//         ></textarea>\n//         <button type=\"submit\" onClick={this.changeWorkExperienceMode}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\" onClick={this.addNewExperience}>\n//           + Add\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n\nclass AddExperienceBtn extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeWorkExperienceMode = () => this.props.changeWorkExperienceMode();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.changeWorkExperienceMode,\n      children: \"+ Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass WorkExperience extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeWorkExperienceMode = () => {\n      this.props.changeWorkExperienceMode();\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.addNewExperience = () => this.props.addNewExperience();\n\n    this.removeWorkExperience = element => this.props.removeWorkExperience(element);\n  }\n\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.props;\n    const workExperienceArray = componentsArray.workExperienceArray;\n    const rows = workExperienceArray.map(work => /*#__PURE__*/_jsxDEV(ExperienceHistoryRow, {\n      workExperienceArray: workExperienceArray,\n      work: work,\n      removeWorkExperience: this.removeWorkExperience\n    }, work.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this));\n    let element;\n\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n\n    if (modes.appMode.isEdit && !modes.workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceBtn, {\n        changeWorkExperienceMode: this.changeWorkExperienceMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (modes.appMode.isEdit && modes.workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceForm, {\n        inputCompanyName: inputs.inputCompanyName,\n        inputCompanyCity: inputs.inputCompanyCity,\n        inputCompanyFrom: inputs.inputCompanyFrom,\n        inputCompanyTo: inputs.inputCompanyTo,\n        inputCompanyRole: inputs.inputCompanyRole,\n        inputCompanyJobDescription: inputs.inputCompanyJobDescription,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        handleInputChange: this.handleInputChange,\n        addNewExperience: this.addNewExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Experiences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), rows, element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WorkExperience;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js"],"names":["React","Component","ExperienceHistoryRow","removeWorkExperience","e","props","target","render","work","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","AddExperienceBtn","changeWorkExperienceMode","WorkExperience","handleInputChange","component","componentProp","inputText","addNewExperience","element","modes","componentsArray","inputs","textDisplay","workExperienceArray","rows","map","id","appMode","isEdit","workExperienceMode","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './WorkExperience.css';\n\nclass ExperienceHistoryRow extends Component {\n  removeWorkExperience = (e) => this.props.removeWorkExperience(e.target);\n  render() {\n    const { work } = this.props;\n    return (\n      <div>\n        <div>\n          <p>\n            {work.textCompanyName}, {work.textCompanyCity}\n          </p>\n        </div>\n        <div>\n          <p>\n            {work.textCompanyFromYear} - {work.textCompanyToYear}\n          </p>\n          <p>{work.textCompanyRole}</p>\n          <p>{work.textCompanyRoleDescription}</p>\n        </div>\n        <button type=\"submit\" onClick={this.removeWorkExperience}>\n          X\n        </button>\n      </div>\n    );\n  }\n}\n\n// class AddExperienceForm extends Component {\n//   changeWorkExperienceMode = (e) => {\n//     e.preventDefault();\n//     this.props.changeWorkExperienceMode();\n//   };\n//   handleInputChange = (e) => {\n//     let target = e.target.name;\n//     let field;\n//     if (target === 'companyName') {\n//       field = 'inputCompanyNameText';\n//     } else if (target === 'city') {\n//       field = 'inputCityText';\n//     } else if (target === 'from') {\n//       field = 'inputFromText';\n//     } else if (target === 'to') {\n//       field = 'inputToText';\n//     } else if (target === 'jobDescription') {\n//       field = 'inputJobDescriptionText';\n//     }\n//     this.props.handleInputChange(field, e.target.value);\n//   };\n//   addNewExperience = (e) => {\n//     e.preventDefault();\n//     this.props.addNewExperience();\n//   };\n//   render() {\n//     return (\n//       <form>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Company Name\"\n//           autoComplete=\"off\"\n//           name=\"companyName\"\n//           value={this.props.inputCompanyNameText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"City\"\n//           autoComplete=\"off\"\n//           name=\"city\"\n//           value={this.props.inputCityText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"From\"\n//           autoComplete=\"off\"\n//           name=\"from\"\n//           value={this.props.inputFromText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"To\"\n//           autoComplete=\"off\"\n//           name=\"to\"\n//           value={this.props.inputToText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <textarea\n//           rows=\"5\"\n//           cols=\"30\"\n//           name=\"jobDescription\"\n//           placeholder=\"Job Description & Achievements\"\n//           value={this.props.inputJobDescriptionText}\n//           onChange={this.handleInputChange}\n//         ></textarea>\n//         <button type=\"submit\" onClick={this.changeWorkExperienceMode}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\" onClick={this.addNewExperience}>\n//           + Add\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nclass AddExperienceBtn extends Component {\n  changeWorkExperienceMode = () => this.props.changeWorkExperienceMode();\n  render() {\n    return (\n      <button onClick={this.changeWorkExperienceMode}>+ Experience</button>\n    );\n  }\n}\n\nclass WorkExperience extends Component {\n  changeWorkExperienceMode = () => {\n    this.props.changeWorkExperienceMode();\n  };\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  addNewExperience = () => this.props.addNewExperience();\n  removeWorkExperience = (element) => this.props.removeWorkExperience(element);\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.props;\n    const workExperienceArray = componentsArray.workExperienceArray;\n    const rows = workExperienceArray.map((work) => (\n      <ExperienceHistoryRow\n        workExperienceArray={workExperienceArray}\n        work={work}\n        key={work.id}\n        removeWorkExperience={this.removeWorkExperience}\n      />\n    ));\n    let element;\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n    if (modes.appMode.isEdit && !modes.workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceBtn\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n        />\n      );\n    }\n    if (modes.appMode.isEdit && modes.workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceForm\n          inputCompanyName={inputs.inputCompanyName}\n          inputCompanyCity={inputs.inputCompanyCity}\n          inputCompanyFrom={inputs.inputCompanyFrom}\n          inputCompanyTo={inputs.inputCompanyTo}\n          inputCompanyRole={inputs.inputCompanyRole}\n          inputCompanyJobDescription={inputs.inputCompanyJobDescription}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          handleInputChange={this.handleInputChange}\n          addNewExperience={this.addNewExperience}\n        />\n      );\n    }\n    return (\n      <div>\n        <h2>Experiences</h2>\n        {rows}\n        {element}\n      </div>\n    );\n  }\n}\n\nexport default WorkExperience;\n"]},"metadata":{},"sourceType":"module"}