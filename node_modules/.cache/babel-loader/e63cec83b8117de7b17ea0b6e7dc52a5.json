{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      console.log(this.props.inputUserInfo);\n      this.props.handleInputChange(this.props.inputUserInfo, e.target.value);\n    };\n\n    this.handleUserInfoUpdateBtn = e => {\n      e.preventDefault();\n      this.props.handleUserInfoUpdateBtn('inputText', e.target);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.handleUserInfoUpdateBtn,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = e => this.props.changeInfoRowToEditMode(e.target);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      info,\n      value,\n      inputUserInfo\n    } = this.props;\n    let element;\n\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = /*#__PURE__*/_jsxDEV(InfoRowForm, {\n          inputUserInfo: inputUserInfo,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this);\n      } else {\n        element = /*#__PURE__*/_jsxDEV(\"li\", {\n          datakey: info,\n          children: [value.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.changeInfoRowToEditMode,\n            children: \"\\u270E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      element = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this);\n    }\n\n    return element;\n  }\n\n}\n\nclass BasicUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      inputUserInfo,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputUserInfo: inputUserInfo,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass ExtendedUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      inputUserInfo,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputUserInfo: inputUserInfo,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      userInfoComponentInput,\n      textDisplay\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: [/*#__PURE__*/_jsxDEV(BasicUserInfo, {\n        modes: modes,\n        inputUserInfo: inputUserInfo,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExtendedUserInfo, {\n        modes: modes,\n        inputUserInfo: inputUserInfo,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","InfoRowForm","handleInputChange","e","console","log","props","inputUserInfo","target","value","handleUserInfoUpdateBtn","preventDefault","render","InfoRow","changeInfoRowToEditMode","objInput","inputText","modes","info","element","appMode","isEdit","text","BasicUserInfo","userInfoText","rows","Object","entries","id","push","ExtendedUserInfo","UserInfo","userInfoComponentInput","textDisplay","textUserInfoComponent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;;;AAEA,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SAClCE,iBADkC,GACbC,CAAD,IAAO;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,aAAvB;AACA,WAAKD,KAAL,CAAWJ,iBAAX,CAA6B,KAAKI,KAAL,CAAWC,aAAxC,EAAuDJ,CAAC,CAACK,MAAF,CAASC,KAAhE;AACD,KAJiC;;AAAA,SAKlCC,uBALkC,GAKPP,CAAD,IAAO;AAC/BA,MAAAA,CAAC,CAACQ,cAAF;AACA,WAAKL,KAAL,CAAWI,uBAAX,CAAmC,WAAnC,EAAgDP,CAAC,CAACK,MAAlD;AACD,KARiC;AAAA;;AASlCI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,YAAY,EAAC,KAFf;AAIE,QAAA,QAAQ,EAAE,KAAKV;AAJjB;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKQ,uBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAvBiC;;AA0BpC,MAAMG,OAAN,SAAsBb,SAAtB,CAAgC;AAAA;AAAA;;AAAA,SAC9Bc,uBAD8B,GACHX,CAAD,IAAO,KAAKG,KAAL,CAAWQ,uBAAX,CAAmCX,CAAC,CAACK,MAArC,CADH;;AAAA,SAE9BN,iBAF8B,GAEV,CAACa,QAAD,EAAWC,SAAX,KAClB,KAAKV,KAAL,CAAWJ,iBAAX,CAA6Ba,QAA7B,EAAuCC,SAAvC,CAH4B;;AAAA,SAI9BN,uBAJ8B,GAIJ,CAACK,QAAD,EAAWC,SAAX,KACxB,KAAKV,KAAL,CAAWI,uBAAX,CAAmCK,QAAnC,EAA6CC,SAA7C,CAL4B;AAAA;;AAM9BJ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEK,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeT,MAAAA,KAAf;AAAsBF,MAAAA;AAAtB,QAAwC,KAAKD,KAAnD;AACA,QAAIa,OAAJ;;AACA,QAAIF,KAAK,CAACG,OAAN,CAAcC,MAAlB,EAA0B;AACxB,UAAIZ,KAAK,CAACY,MAAV,EAAkB;AAChBF,QAAAA,OAAO,gBACL,QAAC,WAAD;AACE,UAAA,aAAa,EAAEZ,aADjB;AAEE,UAAA,iBAAiB,EAAE,KAAKL,iBAF1B;AAGE,UAAA,uBAAuB,EAAE,KAAKQ;AAHhC;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD,OARD,MAQO;AACLS,QAAAA,OAAO,gBACL;AAAI,UAAA,OAAO,EAAED,IAAb;AAAA,qBACGT,KAAK,CAACa,IADT,oBACe;AAAM,YAAA,OAAO,EAAE,KAAKR,uBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADf;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD;AACF,KAhBD,MAgBO;AACLK,MAAAA,OAAO,gBAAG;AAAA,kBAAKV,KAAK,CAACa;AAAX;AAAA;AAAA;AAAA;AAAA,cAAV;AACD;;AACD,WAAOH,OAAP;AACD;;AA7B6B;;AAgChC,MAAMI,aAAN,SAA4BvB,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SACpCc,uBADoC,GACTK,OAAD,IACxB,KAAKb,KAAL,CAAWQ,uBAAX,CAAmCK,OAAnC,CAFkC;;AAAA,SAGpCjB,iBAHoC,GAGhB,CAACa,QAAD,EAAWC,SAAX,KAClB,KAAKV,KAAL,CAAWJ,iBAAX,CAA6Ba,QAA7B,EAAuCC,SAAvC,CAJkC;;AAAA,SAKpCN,uBALoC,GAKV,CAACK,QAAD,EAAWC,SAAX,KACxB,KAAKV,KAAL,CAAWI,uBAAX,CAAmCK,QAAnC,EAA6CC,SAA7C,CANkC;AAAA;;AAOpCJ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEK,MAAAA,KAAF;AAASV,MAAAA,aAAT;AAAwBiB,MAAAA;AAAxB,QAAyC,KAAKlB,KAApD;AACA,UAAMmB,IAAI,GAAG,EAAb;AACA,QAAIN,OAAJ;;AACA,SAAK,MAAM,CAACD,IAAD,EAAOT,KAAP,CAAX,IAA4BiB,MAAM,CAACC,OAAP,CAAeH,YAAf,CAA5B,EAA0D;AACxD,UAAIN,IAAI,KAAK,eAAT,IAA4BA,IAAI,KAAK,cAAzC,EAAyD;AACvDC,QAAAA,OAAO,gBACL,QAAC,OAAD;AAEE,UAAA,KAAK,EAAEV,KAFT;AAGE,UAAA,IAAI,EAAES,IAHR;AAIE,UAAA,KAAK,EAAED,KAJT;AAKE,UAAA,aAAa,EAAEV,aALjB;AAME,UAAA,uBAAuB,EAAE,KAAKO,uBANhC;AAOE,UAAA,iBAAiB,EAAE,KAAKZ,iBAP1B;AAQE,UAAA,uBAAuB,EAAE,KAAKQ;AARhC,WACOD,KAAK,CAACmB,EADb;AAAA;AAAA;AAAA;AAAA,gBADF;AAYAH,QAAAA,IAAI,CAACI,IAAL,CAAUV,OAAV;AACD;AACF;;AACD,wBACE;AAAA,6BACE;AAAA,kBAAKM;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAjCmC;;AAoCtC,MAAMK,gBAAN,SAA+B9B,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SACvCc,uBADuC,GACZK,OAAD,IACxB,KAAKb,KAAL,CAAWQ,uBAAX,CAAmCK,OAAnC,CAFqC;;AAAA,SAGvCjB,iBAHuC,GAGnB,CAACa,QAAD,EAAWC,SAAX,KAClB,KAAKV,KAAL,CAAWJ,iBAAX,CAA6Ba,QAA7B,EAAuCC,SAAvC,CAJqC;;AAAA,SAKvCN,uBALuC,GAKb,CAACK,QAAD,EAAWC,SAAX,KACxB,KAAKV,KAAL,CAAWI,uBAAX,CAAmCK,QAAnC,EAA6CC,SAA7C,CANqC;AAAA;;AAOvCJ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEK,MAAAA,KAAF;AAASV,MAAAA,aAAT;AAAwBiB,MAAAA;AAAxB,QAAyC,KAAKlB,KAApD;AACA,UAAMmB,IAAI,GAAG,EAAb;AACA,QAAIN,OAAJ;;AACA,SAAK,MAAM,CAACD,IAAD,EAAOT,KAAP,CAAX,IAA4BiB,MAAM,CAACC,OAAP,CAAeH,YAAf,CAA5B,EAA0D;AACxD,UAAIN,IAAI,KAAK,eAAT,IAA4BA,IAAI,KAAK,cAAzC,EAAyD;AACvD;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,gBACL,QAAC,OAAD;AAEE,UAAA,KAAK,EAAEV,KAFT;AAGE,UAAA,IAAI,EAAES,IAHR;AAIE,UAAA,KAAK,EAAED,KAJT;AAKE,UAAA,aAAa,EAAEV,aALjB;AAME,UAAA,uBAAuB,EAAE,KAAKO,uBANhC;AAOE,UAAA,iBAAiB,EAAE,KAAKZ,iBAP1B;AAQE,UAAA,uBAAuB,EAAE,KAAKQ;AARhC,WACOD,KAAK,CAACmB,EADb;AAAA;AAAA;AAAA;AAAA,gBADF;AAYAH,QAAAA,IAAI,CAACI,IAAL,CAAUV,OAAV;AACD;AACF;;AACD,wBACE;AAAA,6BACE;AAAA,kBAAKM;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAnCsC;;AAsCzC,MAAMM,QAAN,SAAuB/B,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAC/Bc,uBAD+B,GACJK,OAAD,IACxB,KAAKb,KAAL,CAAWQ,uBAAX,CAAmCK,OAAnC,CAF6B;;AAAA,SAG/BjB,iBAH+B,GAGX,CAACa,QAAD,EAAWC,SAAX,KAClB,KAAKV,KAAL,CAAWJ,iBAAX,CAA6Ba,QAA7B,EAAuCC,SAAvC,CAJ6B;;AAAA,SAK/BN,uBAL+B,GAKL,CAACK,QAAD,EAAWC,SAAX,KACxB,KAAKV,KAAL,CAAWI,uBAAX,CAAmCK,QAAnC,EAA6CC,SAA7C,CAN6B;AAAA;;AAO/BJ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEK,MAAAA,KAAF;AAASe,MAAAA,sBAAT;AAAiCC,MAAAA;AAAjC,QAAiD,KAAK3B,KAA5D;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE,QAAC,aAAD;AACE,QAAA,KAAK,EAAEW,KADT;AAEE,QAAA,aAAa,EAAEV,aAFjB;AAGE,QAAA,YAAY,EAAE0B,WAAW,CAACC,qBAH5B;AAIE,QAAA,uBAAuB,EAAE,KAAKpB,uBAJhC;AAKE,QAAA,iBAAiB,EAAE,KAAKZ,iBAL1B;AAME,QAAA,uBAAuB,EAAE,KAAKQ;AANhC;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,gBAAD;AACE,QAAA,KAAK,EAAEO,KADT;AAEE,QAAA,aAAa,EAAEV,aAFjB;AAGE,QAAA,YAAY,EAAE0B,WAAW,CAACC,qBAH5B;AAIE,QAAA,uBAAuB,EAAE,KAAKpB,uBAJhC;AAKE,QAAA,iBAAiB,EAAE,KAAKZ,iBAL1B;AAME,QAAA,uBAAuB,EAAE,KAAKQ;AANhC;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AA9B8B;;AAiCjC,eAAeqB,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport './UserInfo.css';\n\nclass InfoRowForm extends Component {\n  handleInputChange = (e) => {\n    console.log(this.props.inputUserInfo)\n    this.props.handleInputChange(this.props.inputUserInfo, e.target.value);\n  };\n  handleUserInfoUpdateBtn = (e) => {\n    e.preventDefault();\n    this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          \n          onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.handleUserInfoUpdateBtn}>\n          Update\n        </button>\n      </form>\n    );\n  }\n}\n\nclass InfoRow extends Component {\n  changeInfoRowToEditMode = (e) => this.props.changeInfoRowToEditMode(e.target);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, info, value, inputUserInfo } = this.props;\n    let element;\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = (\n          <InfoRowForm\n            inputUserInfo={inputUserInfo}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n      } else {\n        element = (\n          <li datakey={info}>\n            {value.text} <span onClick={this.changeInfoRowToEditMode}>✎</span>\n          </li>\n        );\n      }\n    } else {\n      element = <li>{value.text}</li>;\n    }\n    return element;\n  }\n}\n\nclass BasicUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, inputUserInfo, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputUserInfo={inputUserInfo}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass ExtendedUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, inputUserInfo, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputUserInfo={inputUserInfo}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass UserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, userInfoComponentInput, textDisplay } = this.props;\n\n    return (\n      <div className=\"UserInfoContainer\">\n        <BasicUserInfo\n          modes={modes}\n          inputUserInfo={inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <ExtendedUserInfo\n          modes={modes}\n          inputUserInfo={inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}