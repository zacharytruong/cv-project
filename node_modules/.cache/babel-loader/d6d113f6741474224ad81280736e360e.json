{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeModeToEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = true;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = false;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeInfoRowToEditMode = element => {\n      this.changeAllModesToNonEditExceptApp();\n      const target = element.closest('li').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n\n      for (const info in textUserInfoComponent) {\n        target === info ? tempObj[target].isEdit = true : tempObj[info].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: {\n          textUserInfoComponent: tempObj\n        }\n      });\n    };\n\n    this.changeUserInfoModeNonEdit = () => {\n      const textDisplay = { ...this.state.textDisplay\n      };\n      const textUserInfoComponent = textDisplay.textUserInfoComponent;\n\n      for (const property in textUserInfoComponent) {\n        textUserInfoComponent[property].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: textDisplay\n      });\n    };\n\n    this.changeAllModesToNonEditExceptApp = () => {\n      const tempModes = { ...this.state.modes\n      };\n\n      for (const property in tempModes) {\n        if (property !== 'appMode') {\n          tempModes[property].isEdit = false;\n        }\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => {\n      const tempObj = { ...this.state.inputs\n      };\n      tempObj[component][componentProp] = inputText;\n      this.setState({\n        inputs: tempObj\n      });\n    };\n\n    this.handleUserInfoUpdateBtn = element => {\n      const datakey = element.closest('form').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n      const inputUserInfo = this.state.inputs.userInfoComponentInput.inputUserInfo;\n      tempObj[datakey].text = inputUserInfo;\n      tempObj[datakey].isEdit = false;\n      const tempInputs = { ...this.state.inputs\n      };\n      tempInputs.userInfoComponentInput.inputUserInfo = '';\n      this.setState({\n        [textUserInfoComponent]: tempObj,\n        inputs: tempInputs\n      });\n    };\n\n    this.changeWorkExperienceMode = boolean => {\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      this.changeAllModesToNonEditExceptApp();\n      this.changeUserInfoModeNonEdit();\n      tempModes.workExperienceMode.isEdit = boolean;\n\n      for (const property in tempInputs.workExperienceComponentInput) {\n        tempInputs.workExperienceComponentInput[property] = '';\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeEducationMode = boolean => {\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      this.changeAllModesToNonEditExceptApp();\n      this.changeUserInfoModeNonEdit();\n      tempModes.educationMode.isEdit = boolean;\n\n      for (const property in tempInputs.educationComponentInput) {\n        tempInputs.educationComponentInput[property] = '';\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.addNewExperience = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputCompanyName,\n        inputCompanyCity,\n        inputCompanyFrom,\n        inputCompanyTo,\n        inputCompanyRole,\n        inputCompanyJobDescription\n      } = this.state.inputs.workExperienceComponentInput;\n      const work = {\n        id: uniqid(),\n        textCompanyName: inputCompanyName,\n        textCompanyCity: inputCompanyCity,\n        textCompanyFromYear: inputCompanyFrom,\n        textCompanyToYear: inputCompanyTo,\n        textCompanyRole: inputCompanyRole,\n        textCompanyRoleDescription: inputCompanyJobDescription\n      };\n      tempArr.workExperienceArray.push(work);\n      tempModes.workExperienceMode.isEdit = false;\n\n      for (const property in tempInputs.workExperienceComponentInput) {\n        tempInputs.workExperienceComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeWorkExperience = element => {\n      const index = Array.from(element.closest('.experienceContainer').children).indexOf(element.parentNode);\n      const tempArr = { ...this.state.componentsArray\n      };\n      tempArr.workExperienceArray.splice(index, 1);\n      this.setState({\n        componentsArray: tempArr\n      });\n    };\n\n    this.addNewEducation = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputSchool,\n        inputSchoolCity,\n        inputSchoolFromYear,\n        inputSchoolToYear,\n        inputSchoolDegree\n      } = this.state.inputs.educationComponentInput;\n      const education = {\n        id: uniqid(),\n        textSchoolName: inputSchool,\n        textSchoolCity: inputSchoolCity,\n        textSchoolFromYear: inputSchoolFromYear,\n        textSchoolToYear: inputSchoolToYear,\n        textSchoolDegree: inputSchoolDegree\n      };\n      tempArr.educationArray.push(education);\n      tempModes.educationMode.isEdit = false;\n\n      for (const property in tempInputs.educationComponentInput) {\n        tempInputs.educationComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeEducation = element => {\n      const index = Array.from(element.closest('.educationContainer').children).indexOf(element.parentNode);\n      const tempArr = { ...this.state.componentsArray\n      };\n      tempArr.educationArray.splice(index, 1);\n      this.setState({\n        componentsArray: tempArr\n      });\n    };\n\n    this.changeSkillsMode = boolean => {\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      this.changeAllModesToNonEditExceptApp();\n      this.changeUserInfoModeNonEdit();\n      tempModes.skillsMode.isEdit = boolean;\n\n      for (const property in tempInputs.skillsComponentInput) {\n        tempInputs.skillsComponentInput[property] = '';\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.addNewSkill = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputSkillName\n      } = this.state.inputs.skillsComponentInput;\n      const skill = {\n        id: uniqid(),\n        textSkillName: inputSkillName\n      };\n      tempArr.skillsArray.push(skill);\n      tempModes.skillsMode.isEdit = false;\n\n      for (const property in tempInputs.skillsComponentInput) {\n        tempInputs.skillsComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeSkill = element => {\n      const index = Array.from(element.closest('.skillContainer').children).indexOf(element.parentNode);\n      const tempArr = { ...this.state.componentsArray\n      };\n      tempArr.skillsArray.splice(index, 1);\n      this.setState({\n        componentsArray: tempArr\n      });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [{\n          id: uniqid(),\n          textCompanyName: 'Side',\n          textCompanyCity: 'SF',\n          textCompanyFromYear: '2019',\n          textCompanyToYear: 'Present',\n          textCompanyRole: 'WSE',\n          textCompanyRoleDescription: 'Build websites.'\n        }, {\n          id: uniqid(),\n          textCompanyName: 'OBM',\n          textCompanyCity: 'Cleveland',\n          textCompanyFromYear: '2015',\n          textCompanyToYear: '2017',\n          textCompanyRole: 'IT',\n          textCompanyRoleDescription: 'Build IT.'\n        }],\n        educationArray: [{\n          id: uniqid(),\n          textSchoolName: 'CTU',\n          textSchoolCity: 'Colorado',\n          textSchoolFromYear: '2017',\n          textSchoolToYear: '2021',\n          textSchoolDegree: 'PHD'\n        }, {\n          id: uniqid(),\n          textSchoolName: 'ITT',\n          textSchoolCity: 'Cleveland',\n          textSchoolFromYear: '2011',\n          textSchoolToYear: '2015',\n          textSchoolDegree: 'BCS'\n        }],\n        skillsArray: [{\n          id: uniqid(),\n          textSkillName: 'html'\n        }, {\n          id: uniqid(),\n          textSkillName: 'css'\n        }, {\n          id: uniqid(),\n          textSkillName: 'javascript'\n        }]\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToEdit('appMode'),\n          children: \"EDIT MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToNonEdit('appMode'),\n          children: \"VIEW MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n        modes: modes,\n        inputs: inputs.userInfoComponentInput.inputUserInfo,\n        textDisplay: textDisplay,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WorkExperience, {\n        modes: modes,\n        componentsArray: componentsArray,\n        workExperienceComponentInput: inputs.workExperienceComponentInput,\n        handleInputChange: this.handleInputChange,\n        removeWorkExperience: this.removeWorkExperience,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        addNewExperience: this.addNewExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Education, {\n        modes: modes,\n        componentsArray: componentsArray,\n        educationComponentInput: inputs.educationComponentInput,\n        handleInputChange: this.handleInputChange,\n        changeEducationMode: this.changeEducationMode,\n        addNewEducation: this.addNewEducation,\n        removeEducation: this.removeEducation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Skills, {\n        modes: modes,\n        componentsArray: componentsArray,\n        inputs: inputs.skillsComponentInput.inputSkillName,\n        handleInputChange: this.handleInputChange,\n        changeSkillsMode: this.changeSkillsMode,\n        addNewSkill: this.addNewSkill,\n        removeSkill: this.removeSkill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","WorkExperience","Education","Skills","App","Component","constructor","props","changeModeToEdit","componentMode","tempModes","state","modes","isEdit","setState","changeModeToNonEdit","changeInfoRowToEditMode","element","changeAllModesToNonEditExceptApp","target","closest","getAttribute","textUserInfoComponent","textDisplay","tempObj","info","changeUserInfoModeNonEdit","property","handleInputChange","component","componentProp","inputText","inputs","handleUserInfoUpdateBtn","datakey","inputUserInfo","userInfoComponentInput","text","tempInputs","changeWorkExperienceMode","boolean","workExperienceMode","workExperienceComponentInput","changeEducationMode","educationMode","educationComponentInput","addNewExperience","tempArr","componentsArray","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","work","id","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","workExperienceArray","push","removeWorkExperience","index","Array","from","children","indexOf","parentNode","splice","addNewEducation","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","education","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","educationArray","removeEducation","changeSkillsMode","skillsMode","skillsComponentInput","addNewSkill","inputSkillName","skill","textSkillName","skillsArray","removeSkill","appMode","textFirstName","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [\n          {\n            id: uniqid(),\n            textCompanyName: 'Side',\n            textCompanyCity: 'SF',\n            textCompanyFromYear: '2019',\n            textCompanyToYear: 'Present',\n            textCompanyRole: 'WSE',\n            textCompanyRoleDescription: 'Build websites.'\n          },\n          {\n            id: uniqid(),\n            textCompanyName: 'OBM',\n            textCompanyCity: 'Cleveland',\n            textCompanyFromYear: '2015',\n            textCompanyToYear: '2017',\n            textCompanyRole: 'IT',\n            textCompanyRoleDescription: 'Build IT.'\n          }\n        ],\n        educationArray: [\n          {\n            id: uniqid(),\n            textSchoolName: 'CTU',\n            textSchoolCity: 'Colorado',\n            textSchoolFromYear: '2017',\n            textSchoolToYear: '2021',\n            textSchoolDegree: 'PHD'\n          },\n          {\n            id: uniqid(),\n            textSchoolName: 'ITT',\n            textSchoolCity: 'Cleveland',\n            textSchoolFromYear: '2011',\n            textSchoolToYear: '2015',\n            textSchoolDegree: 'BCS'\n          }\n        ],\n        skillsArray: [\n          {\n            id: uniqid(),\n            textSkillName: 'html'\n          },\n          {\n            id: uniqid(),\n            textSkillName: 'css'\n          },\n          {\n            id: uniqid(),\n            textSkillName: 'javascript'\n          }\n        ]\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        }\n      }\n    };\n  }\n\n  changeModeToEdit = (componentMode) => {\n    const tempModes = { ...this.state.modes };\n    tempModes[componentMode].isEdit = true;\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeModeToNonEdit = (componentMode) => {\n    const tempModes = { ...this.state.modes };\n    tempModes[componentMode].isEdit = false;\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeInfoRowToEditMode = (element) => {\n    this.changeAllModesToNonEditExceptApp();\n    const target = element.closest('li').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    for (const info in textUserInfoComponent) {\n      target === info\n        ? (tempObj[target].isEdit = true)\n        : (tempObj[info].isEdit = false);\n    }\n    this.setState({\n      textDisplay: {\n        textUserInfoComponent: tempObj\n      }\n    });\n  };\n\n  changeUserInfoModeNonEdit = () => {\n    const textDisplay = { ...this.state.textDisplay };\n    const textUserInfoComponent = textDisplay.textUserInfoComponent;\n    for (const property in textUserInfoComponent) {\n      textUserInfoComponent[property].isEdit = false;\n    }\n    this.setState({\n      textDisplay: textDisplay\n    });\n  };\n\n  changeAllModesToNonEditExceptApp = () => {\n    const tempModes = { ...this.state.modes };\n    for (const property in tempModes) {\n      if (property !== 'appMode') {\n        tempModes[property].isEdit = false;\n      }\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  handleInputChange = (component, componentProp, inputText) => {\n    const tempObj = { ...this.state.inputs };\n    tempObj[component][componentProp] = inputText;\n    this.setState({\n      inputs: tempObj\n    });\n  };\n\n  // findClickedTargetDatakey = (element) => {\n  //   return element.closest('form').getAttribute('datakey');\n  // };\n\n  handleUserInfoUpdateBtn = (element) => {\n    const datakey = element.closest('form').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    const inputUserInfo =\n      this.state.inputs.userInfoComponentInput.inputUserInfo;\n    tempObj[datakey].text = inputUserInfo;\n    tempObj[datakey].isEdit = false;\n    const tempInputs = { ...this.state.inputs };\n    tempInputs.userInfoComponentInput.inputUserInfo = '';\n    this.setState({\n      [textUserInfoComponent]: tempObj,\n      inputs: tempInputs\n    });\n  };\n\n  changeWorkExperienceMode = (boolean) => {\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    this.changeAllModesToNonEditExceptApp();\n    this.changeUserInfoModeNonEdit();\n    tempModes.workExperienceMode.isEdit = boolean;\n    for (const property in tempInputs.workExperienceComponentInput) {\n      tempInputs.workExperienceComponentInput[property] = '';\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeEducationMode = (boolean) => {\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    this.changeAllModesToNonEditExceptApp();\n    this.changeUserInfoModeNonEdit();\n    tempModes.educationMode.isEdit = boolean;\n    for (const property in tempInputs.educationComponentInput) {\n      tempInputs.educationComponentInput[property] = '';\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  addNewExperience = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputCompanyName,\n      inputCompanyCity,\n      inputCompanyFrom,\n      inputCompanyTo,\n      inputCompanyRole,\n      inputCompanyJobDescription\n    } = this.state.inputs.workExperienceComponentInput;\n    const work = {\n      id: uniqid(),\n      textCompanyName: inputCompanyName,\n      textCompanyCity: inputCompanyCity,\n      textCompanyFromYear: inputCompanyFrom,\n      textCompanyToYear: inputCompanyTo,\n      textCompanyRole: inputCompanyRole,\n      textCompanyRoleDescription: inputCompanyJobDescription\n    };\n    tempArr.workExperienceArray.push(work);\n    tempModes.workExperienceMode.isEdit = false;\n    for (const property in tempInputs.workExperienceComponentInput) {\n      tempInputs.workExperienceComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  };\n\n  removeWorkExperience = (element) => {\n    const index = Array.from(element.closest('.experienceContainer').children).indexOf(element.parentNode);\n    const tempArr = { ...this.state.componentsArray };\n    tempArr.workExperienceArray.splice(index, 1);\n    this.setState({\n      componentsArray: tempArr\n    });\n  };\n\n  \n\n  addNewEducation = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputSchool,\n      inputSchoolCity,\n      inputSchoolFromYear,\n      inputSchoolToYear,\n      inputSchoolDegree\n    } = this.state.inputs.educationComponentInput;\n    const education = {\n      id: uniqid(),\n      textSchoolName: inputSchool,\n      textSchoolCity: inputSchoolCity,\n      textSchoolFromYear: inputSchoolFromYear,\n      textSchoolToYear: inputSchoolToYear,\n      textSchoolDegree: inputSchoolDegree\n    };\n    tempArr.educationArray.push(education);\n    tempModes.educationMode.isEdit = false;\n    for (const property in tempInputs.educationComponentInput) {\n      tempInputs.educationComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  };\n\n  removeEducation = (element) => {\n    const index = Array.from(element.closest('.educationContainer').children).indexOf(element.parentNode);\n    const tempArr = { ...this.state.componentsArray };\n    tempArr.educationArray.splice(index, 1);\n    this.setState({\n      componentsArray: tempArr\n    });\n  };\n\n  changeSkillsMode = (boolean) => {\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    this.changeAllModesToNonEditExceptApp();\n    this.changeUserInfoModeNonEdit();\n    tempModes.skillsMode.isEdit = boolean;\n    for (const property in tempInputs.skillsComponentInput) {\n      tempInputs.skillsComponentInput[property] = '';\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  addNewSkill = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputSkillName\n    } = this.state.inputs.skillsComponentInput;\n    const skill = {\n      id: uniqid(),\n      textSkillName: inputSkillName\n    };\n    tempArr.skillsArray.push(skill);\n    tempModes.skillsMode.isEdit = false;\n    for (const property in tempInputs.skillsComponentInput) {\n      tempInputs.skillsComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  }\n\n  removeSkill = (element) => {\n    const index = Array.from(element.closest('.skillContainer').children).indexOf(element.parentNode);\n    const tempArr = { ...this.state.componentsArray };\n    tempArr.skillsArray.splice(index, 1);\n    this.setState({\n      componentsArray: tempArr\n    });\n  };\n\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <nav>\n          <button onClick={() => this.changeModeToEdit('appMode')}>\n            EDIT MODE\n          </button>\n          <button onClick={() => this.changeModeToNonEdit('appMode')}>\n            VIEW MODE\n          </button>\n        </nav>\n        <UserInfo\n          modes={modes}\n          inputs={inputs.userInfoComponentInput.inputUserInfo}\n          textDisplay={textDisplay}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <WorkExperience\n          modes={modes}\n          componentsArray={componentsArray}\n          workExperienceComponentInput={inputs.workExperienceComponentInput}\n          handleInputChange={this.handleInputChange}\n          removeWorkExperience={this.removeWorkExperience}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          addNewExperience={this.addNewExperience}\n        />\n        <Education\n          modes={modes}\n          componentsArray={componentsArray}\n          educationComponentInput={inputs.educationComponentInput}\n          handleInputChange={this.handleInputChange}\n          changeEducationMode={this.changeEducationMode}\n          addNewEducation={this.addNewEducation}\n          removeEducation={this.removeEducation}\n        />\n        <Skills\n          modes={modes}\n          componentsArray={componentsArray}\n          inputs={inputs.skillsComponentInput.inputSkillName}\n          handleInputChange={this.handleInputChange}\n          changeSkillsMode={this.changeSkillsMode}\n          addNewSkill={this.addNewSkill}\n          removeSkill={this.removeSkill}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}