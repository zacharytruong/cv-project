{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js\";\nimport React, { Component } from 'react';\nimport './WorkExperience.css'; // class ExperienceHistoryRow extends Component {\n//   removeWorkExperience = (e) => this.props.removeWorkExperience(e.target);\n//   render() {\n//     const { work } = this.props;\n//     return (\n//       <div>\n//         <div>\n//           <p>\n//             {work.companyNameText}, {work.cityText}\n//           </p>\n//         </div>\n//         <div>\n//           <p>\n//             {work.fromText} - {work.toText}\n//           </p>\n//           <p>{work.jobDescriptionText}</p>\n//         </div>\n//         <button type=\"submit\" onClick={this.removeWorkExperience}>\n//           X\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n// class AddExperienceForm extends Component {\n//   changeWorkExperienceMode = (e) => {\n//     e.preventDefault();\n//     this.props.changeWorkExperienceMode();\n//   };\n//   handleInputChange = (e) => {\n//     let target = e.target.name;\n//     let field;\n//     if (target === 'companyName') {\n//       field = 'inputCompanyNameText';\n//     } else if (target === 'city') {\n//       field = 'inputCityText';\n//     } else if (target === 'from') {\n//       field = 'inputFromText';\n//     } else if (target === 'to') {\n//       field = 'inputToText';\n//     } else if (target === 'jobDescription') {\n//       field = 'inputJobDescriptionText';\n//     }\n//     this.props.handleInputChange(field, e.target.value);\n//   };\n//   addNewExperience = (e) => {\n//     e.preventDefault();\n//     this.props.addNewExperience();\n//   };\n//   render() {\n//     return (\n//       <form>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Company Name\"\n//           autoComplete=\"off\"\n//           name=\"companyName\"\n//           value={this.props.inputCompanyNameText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"City\"\n//           autoComplete=\"off\"\n//           name=\"city\"\n//           value={this.props.inputCityText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"From\"\n//           autoComplete=\"off\"\n//           name=\"from\"\n//           value={this.props.inputFromText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"To\"\n//           autoComplete=\"off\"\n//           name=\"to\"\n//           value={this.props.inputToText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <textarea\n//           rows=\"5\"\n//           cols=\"30\"\n//           name=\"jobDescription\"\n//           placeholder=\"Job Description & Achievements\"\n//           value={this.props.inputJobDescriptionText}\n//           onChange={this.handleInputChange}\n//         ></textarea>\n//         <button type=\"submit\" onClick={this.changeWorkExperienceMode}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\" onClick={this.addNewExperience}>\n//           + Add\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n// class AddExperienceBtn extends Component {\n//   changeWorkExperienceMode = () => this.props.changeWorkExperienceMode();\n//   render() {\n//     return (\n//       <button onClick={this.changeWorkExperienceMode}>+ Experience</button>\n//     );\n//   }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WorkExperience extends Component {\n  // changeWorkExperienceMode = () => {\n  //   this.props.changeWorkExperienceMode();\n  //   this.props.turnOffUserInfoEditMode(this.props.userInfoArray);\n  // };\n  // handleInputChange = (field, element) =>\n  //   this.props.handleInputChange(field, element);\n  // addNewExperience = () => this.props.addNewExperience();\n  // removeWorkExperience = (element) => this.props.removeWorkExperience(element);\n  render() {\n    const {\n      modes,\n      workExperienceArray,\n      inputs\n    } = this.props; // const rows = this.props.workExperienceArray.map((work) => (\n    //   <ExperienceHistoryRow\n    //     workExperienceArray={workExperienceArray}\n    //     work={work}\n    //     key={work.id}\n    //     removeWorkExperience={this.removeWorkExperience}\n    //   />\n    // ));\n\n    let element; // if (!appMode.isEdit) { element = null};\n    // if (appMode.isEdit && !workExperienceMode.isEdit) {\n    //   element = (\n    //     <AddExperienceBtn\n    //       changeWorkExperienceMode={this.changeWorkExperienceMode}\n    //     />\n    //   );\n    // }\n    // if (appMode.isEdit && workExperienceMode.isEdit) {\n    //   element = (\n    //     <AddExperienceForm\n    //       inputCompanyNameText={inputCompanyNameText}\n    //       inputCityText={inputCityText}\n    //       inputFromText={inputFromText}\n    //       inputToText={inputToText}\n    //       inputJobDescriptionText={inputJobDescriptionText}\n    //       changeWorkExperienceMode={this.changeWorkExperienceMode}\n    //       handleInputChange={this.handleInputChange}\n    //       addNewExperience={this.addNewExperience}\n    //     />\n    //   );\n    // }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Experiences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WorkExperience;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js"],"names":["React","Component","WorkExperience","render","modes","workExperienceArray","inputs","props","element"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,scAAN,SAA6BD,SAA7B,CAAuC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,mBAFI;AAGJC,MAAAA;AAHI,QAIF,KAAKC,KAJT,CADO,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIC,OAAJ,CAdO,CAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AArDoC;;AAwDvC,eAAeN,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport './WorkExperience.css'\n\n// class ExperienceHistoryRow extends Component {\n//   removeWorkExperience = (e) => this.props.removeWorkExperience(e.target);\n//   render() {\n//     const { work } = this.props;\n//     return (\n//       <div>\n//         <div>\n//           <p>\n//             {work.companyNameText}, {work.cityText}\n//           </p>\n//         </div>\n//         <div>\n//           <p>\n//             {work.fromText} - {work.toText}\n//           </p>\n//           <p>{work.jobDescriptionText}</p>\n//         </div>\n//         <button type=\"submit\" onClick={this.removeWorkExperience}>\n//           X\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n\n// class AddExperienceForm extends Component {\n//   changeWorkExperienceMode = (e) => {\n//     e.preventDefault();\n//     this.props.changeWorkExperienceMode();\n//   };\n//   handleInputChange = (e) => {\n//     let target = e.target.name;\n//     let field;\n//     if (target === 'companyName') {\n//       field = 'inputCompanyNameText';\n//     } else if (target === 'city') {\n//       field = 'inputCityText';\n//     } else if (target === 'from') {\n//       field = 'inputFromText';\n//     } else if (target === 'to') {\n//       field = 'inputToText';\n//     } else if (target === 'jobDescription') {\n//       field = 'inputJobDescriptionText';\n//     }\n//     this.props.handleInputChange(field, e.target.value);\n//   };\n//   addNewExperience = (e) => {\n//     e.preventDefault();\n//     this.props.addNewExperience();\n//   };\n//   render() {\n//     return (\n//       <form>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Company Name\"\n//           autoComplete=\"off\"\n//           name=\"companyName\"\n//           value={this.props.inputCompanyNameText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"City\"\n//           autoComplete=\"off\"\n//           name=\"city\"\n//           value={this.props.inputCityText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"From\"\n//           autoComplete=\"off\"\n//           name=\"from\"\n//           value={this.props.inputFromText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <input\n//           type=\"text\"\n//           placeholder=\"To\"\n//           autoComplete=\"off\"\n//           name=\"to\"\n//           value={this.props.inputToText}\n//           onChange={this.handleInputChange}\n//         ></input>\n//         <textarea\n//           rows=\"5\"\n//           cols=\"30\"\n//           name=\"jobDescription\"\n//           placeholder=\"Job Description & Achievements\"\n//           value={this.props.inputJobDescriptionText}\n//           onChange={this.handleInputChange}\n//         ></textarea>\n//         <button type=\"submit\" onClick={this.changeWorkExperienceMode}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\" onClick={this.addNewExperience}>\n//           + Add\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// class AddExperienceBtn extends Component {\n//   changeWorkExperienceMode = () => this.props.changeWorkExperienceMode();\n//   render() {\n//     return (\n//       <button onClick={this.changeWorkExperienceMode}>+ Experience</button>\n//     );\n//   }\n// }\n\nclass WorkExperience extends Component {\n  // changeWorkExperienceMode = () => {\n  //   this.props.changeWorkExperienceMode();\n  //   this.props.turnOffUserInfoEditMode(this.props.userInfoArray);\n  // };\n  // handleInputChange = (field, element) =>\n  //   this.props.handleInputChange(field, element);\n  // addNewExperience = () => this.props.addNewExperience();\n  // removeWorkExperience = (element) => this.props.removeWorkExperience(element);\n  render() {\n    const {\n      modes,\n      workExperienceArray,\n      inputs\n    } = this.props;\n    // const rows = this.props.workExperienceArray.map((work) => (\n    //   <ExperienceHistoryRow\n    //     workExperienceArray={workExperienceArray}\n    //     work={work}\n    //     key={work.id}\n    //     removeWorkExperience={this.removeWorkExperience}\n    //   />\n    // ));\n    let element;\n    // if (!appMode.isEdit) { element = null};\n    // if (appMode.isEdit && !workExperienceMode.isEdit) {\n    //   element = (\n    //     <AddExperienceBtn\n    //       changeWorkExperienceMode={this.changeWorkExperienceMode}\n    //     />\n    //   );\n    // }\n    // if (appMode.isEdit && workExperienceMode.isEdit) {\n    //   element = (\n    //     <AddExperienceForm\n    //       inputCompanyNameText={inputCompanyNameText}\n    //       inputCityText={inputCityText}\n    //       inputFromText={inputFromText}\n    //       inputToText={inputToText}\n    //       inputJobDescriptionText={inputJobDescriptionText}\n    //       changeWorkExperienceMode={this.changeWorkExperienceMode}\n    //       handleInputChange={this.handleInputChange}\n    //       addNewExperience={this.addNewExperience}\n    //     />\n    //   );\n    // }\n    return (\n      <div>\n        <h2>Experiences</h2>\n        {/* {rows}\n        {element} */}\n      </div>\n    );\n  }\n}\n\nexport default WorkExperience;\n"]},"metadata":{},"sourceType":"module"}