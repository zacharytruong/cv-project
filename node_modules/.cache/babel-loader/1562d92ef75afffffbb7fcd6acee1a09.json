{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfoRowToEditMode = element => {\n      this.changeAllModesToNonEditExceptApp();\n      const target = element.closest('li').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n\n      for (const info in textUserInfoComponent) {\n        target === info ? tempObj[target].isEdit = true : tempObj[info].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: {\n          textUserInfoComponent: tempObj\n        }\n      });\n    };\n\n    this.changeModeToEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = true;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = false;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeUserInfoModeNonEdit = () => {\n      const textDisplay = { ...this.state.textDisplay\n      };\n      const textUserInfoComponent = textDisplay.textUserInfoComponent;\n\n      for (const property in textUserInfoComponent) {\n        textUserInfoComponent[property].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: textDisplay\n      });\n    };\n\n    this.changeAllModesToNonEditExceptApp = () => {\n      const tempModes = { ...this.state.modes\n      };\n\n      for (const property in tempModes) {\n        if (property !== 'appMode') {\n          tempModes[property].isEdit = false;\n        }\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => {\n      const tempObj = { ...this.state.inputs\n      };\n      tempObj[component][componentProp] = inputText;\n      this.setState({\n        inputs: tempObj\n      });\n    };\n\n    this.findClickedTargetDatakey = element => {\n      return element.closest('form').getAttribute('datakey');\n    };\n\n    this.handleUserInfoUpdateBtn = element => {\n      const datakey = this.findClickedTargetDatakey(element);\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n      const inputUserInfo = this.state.inputs.userInfoComponentInput.inputUserInfo;\n      tempObj[datakey].text = inputUserInfo;\n      tempObj[datakey].isEdit = false;\n      const tempInputs = { ...this.state.inputs\n      };\n      tempInputs.userInfoComponentInput.inputUserInfo = '';\n      this.setState({\n        [textUserInfoComponent]: tempObj,\n        inputs: tempInputs\n      });\n    };\n\n    this.addNewExperience = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputCompanyName,\n        inputCompanyCity,\n        inputCompanyFrom,\n        inputCompanyTo,\n        inputCompanyRole,\n        inputCompanyJobDescription\n      } = this.state.inputs.workExperienceComponentInput;\n      const work = {\n        id: uniqid(),\n        textCompanyName: inputCompanyName,\n        textCompanyCity: inputCompanyCity,\n        textCompanyFromYear: inputCompanyFrom,\n        textCompanyToYear: inputCompanyTo,\n        textCompanyRole: inputCompanyRole,\n        textCompanyRoleDescription: inputCompanyJobDescription\n      };\n      tempArr.workExperienceArray.push(work);\n      tempModes.workExperienceMode.isEdit = false;\n\n      for (const property in tempInputs.workExperienceComponentInput) {\n        tempInputs.workExperienceComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeWorkExperience = element => {\n      const index = Array.from(element.closest('.experienceContainer').children).indexOf(element.parentNode);\n      const tempArr = { ...this.state.componentsArray\n      };\n      tempArr.workExperienceArray.splice(index, 1);\n      this.setState({\n        componentsArray: tempArr\n      });\n    };\n\n    this.changeWorkExperienceMode = boolean => {\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      this.changeAllModesToNonEditExceptApp();\n      this.changeUserInfoModeNonEdit();\n      tempModes.workExperienceMode.isEdit = boolean;\n\n      for (const property in tempInputs.workExperienceComponentInput) {\n        tempInputs.workExperienceComponentInput[property] = '';\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeEducationMode = boolean => {\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      this.changeAllModesToNonEditExceptApp();\n      this.changeUserInfoModeNonEdit();\n      tempModes.educationMode.isEdit = boolean;\n\n      for (const property in tempInputs.educationComponentInput) {\n        tempInputs.educationComponentInput[property] = '';\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.addNewEducation = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputSchool,\n        inputSchoolCity,\n        inputSchoolFromYear,\n        inputSchoolToYear,\n        inputSchoolDegree\n      } = this.state.inputs.educationComponentInput;\n      const education = {\n        id: uniqid(),\n        textSchoolName: inputSchool,\n        textSchoolCity: inputSchoolCity,\n        textSchoolFromYear: inputSchoolFromYear,\n        textSchoolToYear: inputSchoolToYear,\n        textSchoolDegree: inputSchoolDegree\n      };\n      tempArr.educationArray.push(education);\n      tempModes.educationMode.isEdit = false;\n\n      for (const property in tempInputs.educationComponentInput) {\n        tempInputs.educationComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeEducation = element => {\n      const index = Array.from(element.closest('.educationContainer').children).indexOf(element.parentNode);\n      const tempArr = { ...this.state.componentsArray\n      };\n      tempArr.educationArray.splice(index, 1);\n      this.setState({\n        componentsArray: tempArr\n      });\n    };\n\n    this.changeSkillsMode = boolean => {\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      this.changeAllModesToNonEditExceptApp();\n      this.changeUserInfoModeNonEdit();\n      tempModes.skillsMode.isEdit = boolean;\n\n      for (const property in tempInputs.skillsComponentInput) {\n        tempInputs.skillsComponentInput[property] = '';\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.addNewSkill = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputSkillName\n      } = this.state.inputs.skillsComponentInput;\n      const skill = {\n        id: uniqid(),\n        textSkillName: inputSkillName\n      };\n      tempArr.skillsArray.push(skill);\n      tempModes.skillsMode.isEdit = false;\n\n      for (const property in tempInputs.skillsComponentInput) {\n        tempInputs.skillsComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeSkill = element => {\n      const index = Array.from(element.closest('.skillContainer').children).indexOf(element.parentNode);\n      const tempArr = { ...this.state.componentsArray\n      };\n      tempArr.skillsArray.splice(index, 1);\n      this.setState({\n        componentsArray: tempArr\n      });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [{\n          id: uniqid(),\n          textCompanyName: 'Side',\n          textCompanyCity: 'SF',\n          textCompanyFromYear: '2019',\n          textCompanyToYear: 'Present',\n          textCompanyRole: 'WSE',\n          textCompanyRoleDescription: 'Build websites.'\n        }, {\n          id: uniqid(),\n          textCompanyName: 'OBM',\n          textCompanyCity: 'Cleveland',\n          textCompanyFromYear: '2015',\n          textCompanyToYear: '2017',\n          textCompanyRole: 'IT',\n          textCompanyRoleDescription: 'Build IT.'\n        }],\n        educationArray: [{\n          id: uniqid(),\n          textSchoolName: 'CTU',\n          textSchoolCity: 'Colorado',\n          textSchoolFromYear: '2017',\n          textSchoolToYear: inputSchoolToYear,\n          textSchoolDegree: inputSchoolDegree\n        }],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToEdit('appMode'),\n          children: \"EDIT MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToNonEdit('appMode'),\n          children: \"VIEW MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n        modes: modes,\n        inputs: inputs.userInfoComponentInput.inputUserInfo,\n        textDisplay: textDisplay,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WorkExperience, {\n        modes: modes,\n        componentsArray: componentsArray,\n        workExperienceComponentInput: inputs.workExperienceComponentInput,\n        handleInputChange: this.handleInputChange,\n        removeWorkExperience: this.removeWorkExperience,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        addNewExperience: this.addNewExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Education, {\n        modes: modes,\n        componentsArray: componentsArray,\n        educationComponentInput: inputs.educationComponentInput,\n        handleInputChange: this.handleInputChange,\n        changeEducationMode: this.changeEducationMode,\n        addNewEducation: this.addNewEducation,\n        removeEducation: this.removeEducation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Skills, {\n        modes: modes,\n        componentsArray: componentsArray,\n        inputs: inputs.skillsComponentInput.inputSkillName,\n        handleInputChange: this.handleInputChange,\n        changeSkillsMode: this.changeSkillsMode,\n        addNewSkill: this.addNewSkill,\n        removeSkill: this.removeSkill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","WorkExperience","Education","Skills","App","Component","constructor","props","changeInfoRowToEditMode","element","changeAllModesToNonEditExceptApp","target","closest","getAttribute","textUserInfoComponent","state","textDisplay","tempObj","info","isEdit","setState","changeModeToEdit","componentMode","tempModes","modes","changeModeToNonEdit","changeUserInfoModeNonEdit","property","handleInputChange","component","componentProp","inputText","inputs","findClickedTargetDatakey","handleUserInfoUpdateBtn","datakey","inputUserInfo","userInfoComponentInput","text","tempInputs","addNewExperience","tempArr","componentsArray","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","workExperienceComponentInput","work","id","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","workExperienceArray","push","workExperienceMode","removeWorkExperience","index","Array","from","children","indexOf","parentNode","splice","changeWorkExperienceMode","boolean","changeEducationMode","educationMode","educationComponentInput","addNewEducation","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","education","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","educationArray","removeEducation","changeSkillsMode","skillsMode","skillsComponentInput","addNewSkill","inputSkillName","skill","textSkillName","skillsArray","removeSkill","appMode","textFirstName","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [\n          {\n            id: uniqid(),\n            textCompanyName: 'Side',\n            textCompanyCity: 'SF',\n            textCompanyFromYear: '2019',\n            textCompanyToYear: 'Present',\n            textCompanyRole: 'WSE',\n            textCompanyRoleDescription: 'Build websites.'\n          },\n          {\n            id: uniqid(),\n            textCompanyName: 'OBM',\n            textCompanyCity: 'Cleveland',\n            textCompanyFromYear: '2015',\n            textCompanyToYear: '2017',\n            textCompanyRole: 'IT',\n            textCompanyRoleDescription: 'Build IT.'\n          }\n        ],\n        educationArray: [\n          {\n            id: uniqid(),\n            textSchoolName: 'CTU',\n            textSchoolCity: 'Colorado',\n            textSchoolFromYear: '2017',\n            textSchoolToYear: inputSchoolToYear,\n            textSchoolDegree: inputSchoolDegree\n          }\n        ],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        }\n      }\n    };\n  }\n\n  changeInfoRowToEditMode = (element) => {\n    this.changeAllModesToNonEditExceptApp();\n    const target = element.closest('li').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    for (const info in textUserInfoComponent) {\n      target === info\n        ? (tempObj[target].isEdit = true)\n        : (tempObj[info].isEdit = false);\n    }\n    this.setState({\n      textDisplay: {\n        textUserInfoComponent: tempObj\n      }\n    });\n  };\n\n  changeModeToEdit = (componentMode) => {\n    const tempModes = { ...this.state.modes };\n    tempModes[componentMode].isEdit = true;\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeModeToNonEdit = (componentMode) => {\n    const tempModes = { ...this.state.modes };\n    tempModes[componentMode].isEdit = false;\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeUserInfoModeNonEdit = () => {\n    const textDisplay = { ...this.state.textDisplay };\n    const textUserInfoComponent = textDisplay.textUserInfoComponent;\n    for (const property in textUserInfoComponent) {\n      textUserInfoComponent[property].isEdit = false;\n    }\n    this.setState({\n      textDisplay: textDisplay\n    });\n  };\n\n  changeAllModesToNonEditExceptApp = () => {\n    const tempModes = { ...this.state.modes };\n    for (const property in tempModes) {\n      if (property !== 'appMode') {\n        tempModes[property].isEdit = false;\n      }\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  handleInputChange = (component, componentProp, inputText) => {\n    const tempObj = { ...this.state.inputs };\n    tempObj[component][componentProp] = inputText;\n    this.setState({\n      inputs: tempObj\n    });\n  };\n\n  findClickedTargetDatakey = (element) => {\n    return element.closest('form').getAttribute('datakey');\n  };\n\n  handleUserInfoUpdateBtn = (element) => {\n    const datakey = this.findClickedTargetDatakey(element);\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    const inputUserInfo =\n      this.state.inputs.userInfoComponentInput.inputUserInfo;\n    tempObj[datakey].text = inputUserInfo;\n    tempObj[datakey].isEdit = false;\n    const tempInputs = { ...this.state.inputs };\n    tempInputs.userInfoComponentInput.inputUserInfo = '';\n    this.setState({\n      [textUserInfoComponent]: tempObj,\n      inputs: tempInputs\n    });\n  };\n\n  addNewExperience = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputCompanyName,\n      inputCompanyCity,\n      inputCompanyFrom,\n      inputCompanyTo,\n      inputCompanyRole,\n      inputCompanyJobDescription\n    } = this.state.inputs.workExperienceComponentInput;\n    const work = {\n      id: uniqid(),\n      textCompanyName: inputCompanyName,\n      textCompanyCity: inputCompanyCity,\n      textCompanyFromYear: inputCompanyFrom,\n      textCompanyToYear: inputCompanyTo,\n      textCompanyRole: inputCompanyRole,\n      textCompanyRoleDescription: inputCompanyJobDescription\n    };\n    tempArr.workExperienceArray.push(work);\n    tempModes.workExperienceMode.isEdit = false;\n    for (const property in tempInputs.workExperienceComponentInput) {\n      tempInputs.workExperienceComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  };\n\n  removeWorkExperience = (element) => {\n    const index = Array.from(element.closest('.experienceContainer').children).indexOf(element.parentNode);\n    const tempArr = { ...this.state.componentsArray };\n    tempArr.workExperienceArray.splice(index, 1);\n    this.setState({\n      componentsArray: tempArr\n    });\n  };\n\n  changeWorkExperienceMode = (boolean) => {\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    this.changeAllModesToNonEditExceptApp();\n    this.changeUserInfoModeNonEdit();\n    tempModes.workExperienceMode.isEdit = boolean;\n    for (const property in tempInputs.workExperienceComponentInput) {\n      tempInputs.workExperienceComponentInput[property] = '';\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeEducationMode = (boolean) => {\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    this.changeAllModesToNonEditExceptApp();\n    this.changeUserInfoModeNonEdit();\n    tempModes.educationMode.isEdit = boolean;\n    for (const property in tempInputs.educationComponentInput) {\n      tempInputs.educationComponentInput[property] = '';\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  addNewEducation = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputSchool,\n      inputSchoolCity,\n      inputSchoolFromYear,\n      inputSchoolToYear,\n      inputSchoolDegree\n    } = this.state.inputs.educationComponentInput;\n    const education = {\n      id: uniqid(),\n      textSchoolName: inputSchool,\n      textSchoolCity: inputSchoolCity,\n      textSchoolFromYear: inputSchoolFromYear,\n      textSchoolToYear: inputSchoolToYear,\n      textSchoolDegree: inputSchoolDegree\n    };\n    tempArr.educationArray.push(education);\n    tempModes.educationMode.isEdit = false;\n    for (const property in tempInputs.educationComponentInput) {\n      tempInputs.educationComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  };\n\n  removeEducation = (element) => {\n    const index = Array.from(element.closest('.educationContainer').children).indexOf(element.parentNode);\n    const tempArr = { ...this.state.componentsArray };\n    tempArr.educationArray.splice(index, 1);\n    this.setState({\n      componentsArray: tempArr\n    });\n  };\n\n  changeSkillsMode = (boolean) => {\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    this.changeAllModesToNonEditExceptApp();\n    this.changeUserInfoModeNonEdit();\n    tempModes.skillsMode.isEdit = boolean;\n    for (const property in tempInputs.skillsComponentInput) {\n      tempInputs.skillsComponentInput[property] = '';\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  addNewSkill = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputSkillName\n    } = this.state.inputs.skillsComponentInput;\n    const skill = {\n      id: uniqid(),\n      textSkillName: inputSkillName\n    };\n    tempArr.skillsArray.push(skill);\n    tempModes.skillsMode.isEdit = false;\n    for (const property in tempInputs.skillsComponentInput) {\n      tempInputs.skillsComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  }\n\n  removeSkill = (element) => {\n    const index = Array.from(element.closest('.skillContainer').children).indexOf(element.parentNode);\n    const tempArr = { ...this.state.componentsArray };\n    tempArr.skillsArray.splice(index, 1);\n    this.setState({\n      componentsArray: tempArr\n    });\n  };\n\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <nav>\n          <button onClick={() => this.changeModeToEdit('appMode')}>\n            EDIT MODE\n          </button>\n          <button onClick={() => this.changeModeToNonEdit('appMode')}>\n            VIEW MODE\n          </button>\n        </nav>\n        <UserInfo\n          modes={modes}\n          inputs={inputs.userInfoComponentInput.inputUserInfo}\n          textDisplay={textDisplay}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <WorkExperience\n          modes={modes}\n          componentsArray={componentsArray}\n          workExperienceComponentInput={inputs.workExperienceComponentInput}\n          handleInputChange={this.handleInputChange}\n          removeWorkExperience={this.removeWorkExperience}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          addNewExperience={this.addNewExperience}\n        />\n        <Education\n          modes={modes}\n          componentsArray={componentsArray}\n          educationComponentInput={inputs.educationComponentInput}\n          handleInputChange={this.handleInputChange}\n          changeEducationMode={this.changeEducationMode}\n          addNewEducation={this.addNewEducation}\n          removeEducation={this.removeEducation}\n        />\n        <Skills\n          modes={modes}\n          componentsArray={componentsArray}\n          inputs={inputs.skillsComponentInput.inputSkillName}\n          handleInputChange={this.handleInputChange}\n          changeSkillsMode={this.changeSkillsMode}\n          addNewSkill={this.addNewSkill}\n          removeSkill={this.removeSkill}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}