{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience'; // import Education from './Education';\n// import Skills from './Skills';\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeInfoRowToEditMode = element => {\n      const target = element.closest('li').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n\n      for (const info in textUserInfoComponent) {\n        target === info ? tempObj[target].isEdit = true : tempObj[info].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: {\n          textUserInfoComponent: tempObj\n        }\n      });\n    };\n\n    this.changeModeToEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = true;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[componentMode].isEdit = false;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => {\n      const tempObj = { ...this.state.inputs\n      };\n      tempObj[component][componentProp] = inputText;\n      this.setState({\n        inputs: tempObj\n      });\n    };\n\n    this.findClickedTargetDatakey = element => {\n      return element.closest('form').getAttribute('datakey');\n    };\n\n    this.handleUserInfoUpdateBtn = element => {\n      const datakey = this.findClickedTargetDatakey(element);\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n      const inputUserInfo = this.state.inputs.userInfoComponentInput.inputUserInfo;\n      tempObj[datakey].text = inputUserInfo;\n      tempObj[datakey].isEdit = false;\n      const tempInputs = { ...this.state.inputs\n      };\n      tempInputs.userInfoComponentInput.inputUserInfo = '';\n      this.setState({\n        [textUserInfoComponent]: tempObj,\n        inputs: tempInputs\n      });\n    };\n\n    this.addNewExperience = () => {\n      const {\n        inputCompanyName,\n        inputCompanyCity,\n        inputCompanyFrom,\n        inputCompanyTo,\n        inputCompanyRole,\n        inputCompanyJobDescription\n      } = this.state.inputs.workExperienceComponentInput;\n      const work = {\n        id: uniqid(),\n        textCompanyName: inputCompanyName,\n        textCompanyCity: inputCity,\n        textCompanyFromYear: inputFrom,\n        to: inputTo,\n        jobDescription: inputJobDescription\n      };\n      this.setState({\n        workExperienceArray: this.state.workExperienceArray.concat(work),\n        workExperienceMode: {\n          isEdit: false\n        },\n        inputCompanyName: '',\n        inputCity: '',\n        inputFrom: '',\n        inputTo: '',\n        inputJobDescription: ''\n      });\n    };\n\n    this.addNewEducation = () => {\n      const {\n        inputSchool,\n        inputSchoolCity,\n        inputSchoolFromYear,\n        inputSchoolToYear,\n        inputSchoolDegree\n      } = this.state;\n      const education = {\n        id: uniqid(),\n        school: inputSchool,\n        schoolCity: inputSchoolCity,\n        schoolFromYeart: inputSchoolFromYear,\n        schoolToYear: inputSchoolToYear,\n        schoolDegree: inputSchoolDegree\n      };\n      this.setState({\n        educationArray: this.state.educationArray.concat(education),\n        educationMode: {\n          isEdit: false\n        },\n        inputSchool: '',\n        inputSchoolCity: '',\n        inputSchoolFromYear: '',\n        inputSchoolToYear: '',\n        inputSchoolDegree: ''\n      });\n    };\n\n    this.removeWorkExperience = element => {// const index = this.findClickedTarget(element);\n      // this.setState({\n      //   workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n      // });\n    };\n\n    this.changeWorkExperienceMode = () => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes.workExperienceMode.isEdit ? tempModes.workExperienceMode.isEdit = false : tempModes.workExperienceMode.isEdit = true;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToEdit('appMode'),\n          children: \"EDIT MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeModeToNonEdit('appMode'),\n          children: \"VIEW MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n        modes: modes,\n        inputs: inputs.userInfoComponentInput.inputUserInfo,\n        textDisplay: textDisplay,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WorkExperience, {\n        modes: modes,\n        componentsArray: componentsArray,\n        workExperienceComponentInput: inputs.workExperienceComponentInput,\n        textWorkExperienceComponent: textDisplay.textWorkExperienceComponent,\n        handleInputChange: this.handleInputChange,\n        removeWorkExperience: this.removeWorkExperience,\n        changeWorkExperienceMode: this.changeWorkExperienceMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","WorkExperience","App","Component","constructor","props","changeInfoRowToEditMode","element","target","closest","getAttribute","textUserInfoComponent","state","textDisplay","tempObj","info","isEdit","setState","changeModeToEdit","componentMode","tempModes","modes","changeModeToNonEdit","handleInputChange","component","componentProp","inputText","inputs","findClickedTargetDatakey","handleUserInfoUpdateBtn","datakey","inputUserInfo","userInfoComponentInput","text","tempInputs","addNewExperience","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","workExperienceComponentInput","work","id","textCompanyName","textCompanyCity","inputCity","textCompanyFromYear","inputFrom","to","inputTo","jobDescription","inputJobDescription","workExperienceArray","concat","workExperienceMode","addNewEducation","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","education","school","schoolCity","schoolFromYeart","schoolToYear","schoolDegree","educationArray","educationMode","removeWorkExperience","changeWorkExperienceMode","appMode","skillsMode","componentsArray","skillsArray","educationComponentInput","skillsComponentInput","inputSkillName","textFirstName","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","textWorkExperienceComponent","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","textEducationComponent","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","textSkillsComponent","textSkillName","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\n// import Education from './Education';\n// import Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '☎️',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: '📧',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '❤️ (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n  changeInfoRowToEditMode = (element) => {\n    const target = element.closest('li').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    for (const info in textUserInfoComponent) {\n      target === info\n        ? (tempObj[target].isEdit = true)\n        : (tempObj[info].isEdit = false);\n    }\n    this.setState({\n      textDisplay: {\n        textUserInfoComponent: tempObj\n      }\n    });\n  };\n  changeModeToEdit = (componentMode) => {\n    const tempModes = {...this.state.modes};\n    tempModes[componentMode].isEdit = true;\n    this.setState({\n      modes: tempModes\n    })\n  };\n  changeModeToNonEdit = (componentMode) => {\n    const tempModes = {...this.state.modes};\n    tempModes[componentMode].isEdit = false;\n    this.setState({\n      modes: tempModes\n    })\n  };\n  handleInputChange = (component, componentProp, inputText) => {\n    const tempObj = { ...this.state.inputs };\n    tempObj[component][componentProp] = inputText;\n    this.setState({\n      inputs: tempObj\n    });\n  };\n  findClickedTargetDatakey = (element) => {\n    return element.closest('form').getAttribute('datakey');\n  };\n  handleUserInfoUpdateBtn = (element) => {\n    const datakey = this.findClickedTargetDatakey(element);\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    const inputUserInfo =\n      this.state.inputs.userInfoComponentInput.inputUserInfo;\n    tempObj[datakey].text = inputUserInfo;\n    tempObj[datakey].isEdit = false;\n    const tempInputs = { ...this.state.inputs };\n    tempInputs.userInfoComponentInput.inputUserInfo = '';\n    this.setState({\n      [textUserInfoComponent]: tempObj,\n      inputs: tempInputs\n    });\n  };\n\n  addNewExperience = () => {\n    const {\n      inputCompanyName,\n      inputCompanyCity,\n      inputCompanyFrom,\n      inputCompanyTo,\n      inputCompanyRole,\n      inputCompanyJobDescription\n    } = this.state.inputs.workExperienceComponentInput;\n    const work = {\n      id: uniqid(),\n      textCompanyName: inputCompanyName,\n      textCompanyCity: inputCity,\n      textCompanyFromYear: inputFrom,\n      to: inputTo,\n      jobDescription: inputJobDescription\n    };\n    this.setState({\n      workExperienceArray: this.state.workExperienceArray.concat(work),\n      workExperienceMode: {\n        isEdit: false\n      },\n      inputCompanyName: '',\n      inputCity: '',\n      inputFrom: '',\n      inputTo: '',\n      inputJobDescription: ''\n    });\n  };\n  addNewEducation = () => {\n    const {\n      inputSchool,\n      inputSchoolCity,\n      inputSchoolFromYear,\n      inputSchoolToYear,\n      inputSchoolDegree\n    } = this.state;\n    const education = {\n      id: uniqid(),\n      school: inputSchool,\n      schoolCity: inputSchoolCity,\n      schoolFromYeart: inputSchoolFromYear,\n      schoolToYear: inputSchoolToYear,\n      schoolDegree: inputSchoolDegree\n    };\n    this.setState({\n      educationArray: this.state.educationArray.concat(education),\n      educationMode: {\n        isEdit: false\n      },\n      inputSchool: '',\n      inputSchoolCity: '',\n      inputSchoolFromYear: '',\n      inputSchoolToYear: '',\n      inputSchoolDegree: ''\n    });\n  };\n  removeWorkExperience = (element) => {\n    // const index = this.findClickedTarget(element);\n    // this.setState({\n    //   workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n    // });\n  };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  changeWorkExperienceMode = () => {\n    const tempModes = {...this.state.modes};\n    tempModes.workExperienceMode.isEdit ? tempModes.workExperienceMode.isEdit = false : tempModes.workExperienceMode.isEdit = true;\n    this.setState({\n      modes: tempModes\n    })\n  };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <nav>\n          <button onClick={() => this.changeModeToEdit('appMode')}>\n            EDIT MODE\n          </button>\n          <button onClick={() => this.changeModeToNonEdit('appMode')}>\n            VIEW MODE\n          </button>\n        </nav>\n        <UserInfo\n          modes={modes}\n          inputs={inputs.userInfoComponentInput.inputUserInfo}\n          textDisplay={textDisplay}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <WorkExperience\n          modes={modes}\n          componentsArray={componentsArray}\n          workExperienceComponentInput={inputs.workExperienceComponentInput}\n          textWorkExperienceComponent={textDisplay.textWorkExperienceComponent}\n          handleInputChange={this.handleInputChange}\n          removeWorkExperience={this.removeWorkExperience}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n        />\n        {/* <Education />\n        <Skills /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}