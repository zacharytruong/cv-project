{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/App.js\";\nimport React from 'react';\nimport Header from './components/Header';\nimport Builder from './components/Builder';\nimport Footer from './components/Footer';\nimport uniqid from 'uniqid';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeModeToEdit = modes => {\n      console.log(modes);\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      this.setState({});\n      console.log(componentMode);\n    };\n\n    this.handleInputChange = (objInput, inputText) => {\n      this.setState({\n        [objInput]: inputText\n      });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        userInfoMode: {\n          isEdit: false\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        userInfoArray: [],\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: '',\n          textLastName: '',\n          textAddress1: '',\n          textAddress2: '',\n          textPhone: '',\n          textEmail: '',\n          textGithub: ''\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n\n  // findClickedTarget = (element) => {\n  //   const target = element.parentNode;\n  //   const parent = Array.from(target.parentNode.children);\n  //   return parent.indexOf(target);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...this.state.userInfoArray];\n  //   tempArr[index]. = this.state[field];\n  //   tempArr[index].mode.isEdit = false;\n  //   this.setState({\n  //     [field]: '',\n  //     userInfoArray: tempArr\n  //   });\n  // };\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyName,\n  //     inputCity,\n  //     inputFrom,\n  //     inputTo,\n  //     inputJobDescription\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyName: inputCompanyName,\n  //     city: inputCity,\n  //     from: inputFrom,\n  //     to: inputTo,\n  //     jobDescription: inputJobDescription\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyName: '',\n  //     inputCity: '',\n  //     inputFrom: '',\n  //     inputTo: '',\n  //     inputJobDescription: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchool,\n  //     inputSchoolCity,\n  //     inputSchoolFromYear,\n  //     inputSchoolToYear,\n  //     inputSchoolDegree\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     school: inputSchool,\n  //     schoolCity: inputSchoolCity,\n  //     schoolFromYeart: inputSchoolFromYear,\n  //     schoolToYear: inputSchoolToYear,\n  //     schoolDegree: inputSchoolDegree\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchool: '',\n  //     inputSchoolCity: '',\n  //     inputSchoolFromYear: '',\n  //     inputSchoolToYear: '',\n  //     inputSchoolDegree: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        modes: modes,\n        changeModeToEdit: this.changeModeToEdit,\n        changeModeToNonEdit: this.changeModeToNonEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/App.js"],"names":["React","Header","Builder","Footer","uniqid","App","Component","constructor","props","changeModeToEdit","modes","console","log","changeModeToNonEdit","componentMode","setState","handleInputChange","objInput","inputText","state","appMode","isEdit","userInfoMode","workExperienceMode","educationMode","skillsMode","componentsArray","userInfoArray","workExperienceArray","educationArray","skillsArray","inputs","userInfoComponentInput","inputUserInfo","workExperienceComponentInput","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","educationComponentInput","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","skillsComponentInput","inputSkillName","textDisplay","textUserInfoComponent","textFirstName","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","textWorkExperienceComponent","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","textEducationComponent","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","textSkillsComponent","textSkillName","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './components/Header';\nimport Builder from './components/Builder';\nimport Footer from './components/Footer';\nimport uniqid from 'uniqid';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        userInfoMode: {\n          isEdit: false\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        userInfoArray: [],\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: '',\n          textLastName: '',\n          textAddress1: '',\n          textAddress2: '',\n          textPhone: '',\n          textEmail: '',\n          textGithub: ''\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n  changeModeToEdit = (modes) => {\n    \n    console.log(modes)\n  };\n  changeModeToNonEdit = (componentMode) => {\n    this.setState({\n     \n    })\n    console.log(componentMode)\n  };\n  handleInputChange = (objInput, inputText) => {\n    this.setState({\n      [objInput]: inputText\n    });\n  };\n  // findClickedTarget = (element) => {\n  //   const target = element.parentNode;\n  //   const parent = Array.from(target.parentNode.children);\n  //   return parent.indexOf(target);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...this.state.userInfoArray];\n  //   tempArr[index]. = this.state[field];\n  //   tempArr[index].mode.isEdit = false;\n  //   this.setState({\n  //     [field]: '',\n  //     userInfoArray: tempArr\n  //   });\n  // };\n\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyName,\n  //     inputCity,\n  //     inputFrom,\n  //     inputTo,\n  //     inputJobDescription\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyName: inputCompanyName,\n  //     city: inputCity,\n  //     from: inputFrom,\n  //     to: inputTo,\n  //     jobDescription: inputJobDescription\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyName: '',\n  //     inputCity: '',\n  //     inputFrom: '',\n  //     inputTo: '',\n  //     inputJobDescription: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchool,\n  //     inputSchoolCity,\n  //     inputSchoolFromYear,\n  //     inputSchoolToYear,\n  //     inputSchoolDegree\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     school: inputSchool,\n  //     schoolCity: inputSchoolCity,\n  //     schoolFromYeart: inputSchoolFromYear,\n  //     schoolToYear: inputSchoolToYear,\n  //     schoolDegree: inputSchoolDegree\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchool: '',\n  //     inputSchoolCity: '',\n  //     inputSchoolFromYear: '',\n  //     inputSchoolToYear: '',\n  //     inputSchoolDegree: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <Header\n          modes={modes}\n          changeModeToEdit={this.changeModeToEdit}\n          changeModeToNonEdit={this.changeModeToNonEdit}\n        />\n        {/* <Builder\n          modes={modes}\n          componentsArray={componentsArray}\n          inputs={inputs}\n          textDisplay={textDisplay}\n          changeModeToEdit={this.changeModeToEdit}\n          changeModeToNonEdit={this.changeModeToNonEdit}\n        /> */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}