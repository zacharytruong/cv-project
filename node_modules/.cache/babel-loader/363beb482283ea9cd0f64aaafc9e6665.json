{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeAppMode = (component, boolean) => {\n      const tempModes = { ...this.state.modes\n      };\n      tempModes[component].isEdit = boolean;\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeAllModesToNonEditExceptApp = () => {\n      const tempModes = { ...this.state.modes\n      };\n\n      for (const property in tempModes) {\n        if (property !== 'appMode') {\n          tempModes[property].isEdit = false;\n        }\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.changeInfoRowToEditMode = element => {\n      this.changeAllModesToNonEditExceptApp();\n      const target = element.closest('li').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n\n      for (const info in tempObj) {\n        target === info ? tempObj[target].isEdit = true : tempObj[info].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: {\n          textUserInfoComponent: tempObj\n        }\n      });\n    };\n\n    this.changeUserInfoModeNonEdit = () => {\n      const textDisplay = { ...this.state.textDisplay\n      };\n      const textUserInfoComponent = textDisplay.textUserInfoComponent;\n\n      for (const property in textUserInfoComponent) {\n        textUserInfoComponent[property].isEdit = false;\n      }\n\n      this.setState({\n        textDisplay: textDisplay\n      });\n    };\n\n    this.handleInputChange = (component, componentProp, inputText) => {\n      const tempObj = { ...this.state.inputs\n      };\n      tempObj[component][componentProp] = inputText;\n      this.setState({\n        inputs: tempObj\n      });\n    };\n\n    this.handleUserInfoUpdateBtn = element => {\n      const datakey = element.closest('form').getAttribute('datakey');\n      const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n      const tempObj = { ...textUserInfoComponent\n      };\n      const inputUserInfo = this.state.inputs.userInfoComponentInput.inputUserInfo;\n      tempObj[datakey].text = inputUserInfo;\n      tempObj[datakey].isEdit = false;\n      const tempInputs = { ...this.state.inputs\n      };\n      tempInputs.userInfoComponentInput.inputUserInfo = '';\n      this.setState({\n        [textUserInfoComponent]: tempObj,\n        inputs: tempInputs\n      });\n    };\n\n    this.changeComponentMode = (component, boolean) => {\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      this.changeAllModesToNonEditExceptApp();\n      this.changeUserInfoModeNonEdit();\n      tempModes[component].isEdit = boolean;\n\n      for (const property in tempInputs[component]) {\n        tempInputs[component][property] = '';\n      }\n\n      this.setState({\n        modes: tempModes\n      });\n    };\n\n    this.addNewExperience = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputCompanyName,\n        inputCompanyCity,\n        inputCompanyFrom,\n        inputCompanyTo,\n        inputCompanyRole,\n        inputCompanyJobDescription\n      } = this.state.inputs.workExperienceComponentInput;\n      const work = {\n        id: uniqid(),\n        textCompanyName: inputCompanyName,\n        textCompanyCity: inputCompanyCity,\n        textCompanyFromYear: inputCompanyFrom,\n        textCompanyToYear: inputCompanyTo,\n        textCompanyRole: inputCompanyRole,\n        textCompanyRoleDescription: inputCompanyJobDescription\n      };\n      tempArr.workExperienceArray.push(work);\n      tempModes.workExperienceMode.isEdit = false;\n\n      for (const property in tempInputs.workExperienceComponentInput) {\n        tempInputs.workExperienceComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.addNewEducation = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputSchool,\n        inputSchoolCity,\n        inputSchoolFromYear,\n        inputSchoolToYear,\n        inputSchoolDegree\n      } = this.state.inputs.educationComponentInput;\n      const education = {\n        id: uniqid(),\n        textSchoolName: inputSchool,\n        textSchoolCity: inputSchoolCity,\n        textSchoolFromYear: inputSchoolFromYear,\n        textSchoolToYear: inputSchoolToYear,\n        textSchoolDegree: inputSchoolDegree\n      };\n      tempArr.educationArray.push(education);\n      tempModes.educationMode.isEdit = false;\n\n      for (const property in tempInputs.educationComponentInput) {\n        tempInputs.educationComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.addNewSkill = () => {\n      const tempArr = { ...this.state.componentsArray\n      };\n      const tempModes = { ...this.state.modes\n      };\n      const tempInputs = { ...this.state.inputs\n      };\n      const {\n        inputSkillName\n      } = this.state.inputs.skillsComponentInput;\n      const skill = {\n        id: uniqid(),\n        textSkillName: inputSkillName\n      };\n      tempArr.skillsArray.push(skill);\n      tempModes.skillsMode.isEdit = false;\n\n      for (const property in tempInputs.skillsComponentInput) {\n        tempInputs.skillsComponentInput[property] = '';\n      }\n\n      this.setState({\n        componentsArray: tempArr,\n        modes: tempModes,\n        inputs: tempInputs\n      });\n    };\n\n    this.removeClickedTarget = (element, target, arrName) => {\n      console.log(`.`); // console.log(Array.from(element.closest(String(target)).children).indexOf(element.parentNode))\n      // const index = Array.from(element.closest(target).children).indexOf(element.parentNode);\n      // const tempArr = { ...this.state.componentsArray };\n      // tempArr[arrName].splice(index, 1);\n      // this.setState({\n      //   componentsArray: tempArr\n      // });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [{\n          id: uniqid(),\n          textCompanyName: 'Side',\n          textCompanyCity: 'SF',\n          textCompanyFromYear: '2019',\n          textCompanyToYear: 'Present',\n          textCompanyRole: 'WSE',\n          textCompanyRoleDescription: 'Build websites.'\n        }, {\n          id: uniqid(),\n          textCompanyName: 'OBM',\n          textCompanyCity: 'Cleveland',\n          textCompanyFromYear: '2015',\n          textCompanyToYear: '2017',\n          textCompanyRole: 'IT',\n          textCompanyRoleDescription: 'Build IT.'\n        }],\n        educationArray: [{\n          id: uniqid(),\n          textSchoolName: 'CTU',\n          textSchoolCity: 'Colorado',\n          textSchoolFromYear: '2017',\n          textSchoolToYear: '2021',\n          textSchoolDegree: 'PHD'\n        }, {\n          id: uniqid(),\n          textSchoolName: 'ITT',\n          textSchoolCity: 'Cleveland',\n          textSchoolFromYear: '2011',\n          textSchoolToYear: '2015',\n          textSchoolDegree: 'BCS'\n        }],\n        skillsArray: [{\n          id: uniqid(),\n          textSkillName: 'html'\n        }, {\n          id: uniqid(),\n          textSkillName: 'css'\n        }, {\n          id: uniqid(),\n          textSkillName: 'javascript'\n        }]\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '‚òéÔ∏è',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: 'üìß',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '‚ù§Ô∏è (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        }\n      }\n    };\n  }\n\n  // removeWorkExperience = (element) => {\n  //   const index = Array.from(element.closest('.experienceContainer').children).indexOf(element.parentNode);\n  //   const tempArr = { ...this.state.componentsArray };\n  //   tempArr.workExperienceArray.splice(index, 1);\n  //   this.setState({\n  //     componentsArray: tempArr\n  //   });\n  // };\n  // removeEducation = (element) => {\n  //   const index = Array.from(element.closest('.educationContainer').children).indexOf(element.parentNode);\n  //   const tempArr = { ...this.state.componentsArray };\n  //   tempArr.educationArray.splice(index, 1);\n  //   this.setState({\n  //     componentsArray: tempArr\n  //   });\n  // };\n  // removeSkill = (element) => {\n  //   const index = Array.from(element.closest('.skillContainer').children).indexOf(element.parentNode);\n  //   const tempArr = { ...this.state.componentsArray };\n  //   tempArr.skillsArray.splice(index, 1);\n  //   this.setState({\n  //     componentsArray: tempArr\n  //   });\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeAppMode('appMode', true),\n          children: \"EDIT MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.changeAppMode('appMode', false),\n          children: \"VIEW MODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n        modes: modes,\n        inputs: inputs.userInfoComponentInput.inputUserInfo,\n        textDisplay: textDisplay,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WorkExperience, {\n        modes: modes,\n        componentsArray: componentsArray,\n        workExperienceComponentInput: inputs.workExperienceComponentInput,\n        handleInputChange: this.handleInputChange,\n        changeComponentMode: this.changeComponentMode,\n        addNewExperience: this.addNewExperience,\n        removeClickedTarget: this.removeClickedTarget // removeWorkExperience={this.removeWorkExperience}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Education, {\n        modes: modes,\n        componentsArray: componentsArray,\n        educationComponentInput: inputs.educationComponentInput,\n        handleInputChange: this.handleInputChange,\n        changeComponentMode: this.changeComponentMode,\n        addNewEducation: this.addNewEducation,\n        removeClickedTarget: this.removeClickedTarget // removeWorkExperience={this.removeWorkExperience}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Skills, {\n        modes: modes,\n        componentsArray: componentsArray,\n        inputs: inputs.skillsComponentInput.inputSkillName,\n        handleInputChange: this.handleInputChange,\n        changeComponentMode: this.changeComponentMode,\n        addNewSkill: this.addNewSkill,\n        removeClickedTarget: this.removeClickedTarget // removeWorkExperience={this.removeWorkExperience}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","WorkExperience","Education","Skills","App","Component","constructor","props","changeAppMode","component","boolean","tempModes","state","modes","isEdit","setState","changeAllModesToNonEditExceptApp","property","changeInfoRowToEditMode","element","target","closest","getAttribute","textUserInfoComponent","textDisplay","tempObj","info","changeUserInfoModeNonEdit","handleInputChange","componentProp","inputText","inputs","handleUserInfoUpdateBtn","datakey","inputUserInfo","userInfoComponentInput","text","tempInputs","changeComponentMode","addNewExperience","tempArr","componentsArray","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","workExperienceComponentInput","work","id","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","workExperienceArray","push","workExperienceMode","addNewEducation","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","educationComponentInput","education","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","educationArray","educationMode","addNewSkill","inputSkillName","skillsComponentInput","skill","textSkillName","skillsArray","skillsMode","removeClickedTarget","arrName","console","log","appMode","textFirstName","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [\n          {\n            id: uniqid(),\n            textCompanyName: 'Side',\n            textCompanyCity: 'SF',\n            textCompanyFromYear: '2019',\n            textCompanyToYear: 'Present',\n            textCompanyRole: 'WSE',\n            textCompanyRoleDescription: 'Build websites.'\n          },\n          {\n            id: uniqid(),\n            textCompanyName: 'OBM',\n            textCompanyCity: 'Cleveland',\n            textCompanyFromYear: '2015',\n            textCompanyToYear: '2017',\n            textCompanyRole: 'IT',\n            textCompanyRoleDescription: 'Build IT.'\n          }\n        ],\n        educationArray: [\n          {\n            id: uniqid(),\n            textSchoolName: 'CTU',\n            textSchoolCity: 'Colorado',\n            textSchoolFromYear: '2017',\n            textSchoolToYear: '2021',\n            textSchoolDegree: 'PHD'\n          },\n          {\n            id: uniqid(),\n            textSchoolName: 'ITT',\n            textSchoolCity: 'Cleveland',\n            textSchoolFromYear: '2011',\n            textSchoolToYear: '2015',\n            textSchoolDegree: 'BCS'\n          }\n        ],\n        skillsArray: [\n          {\n            id: uniqid(),\n            textSkillName: 'html'\n          },\n          {\n            id: uniqid(),\n            textSkillName: 'css'\n          },\n          {\n            id: uniqid(),\n            textSkillName: 'javascript'\n          }\n        ]\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: {\n            text: 'First Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textLastName: {\n            text: 'Last Name',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress1: {\n            text: 'Address 1',\n            id: uniqid(),\n            isEdit: false\n          },\n          textAddress2: {\n            text: 'Address 2',\n            id: uniqid(),\n            isEdit: false\n          },\n          textPhone: {\n            text: '‚òéÔ∏è',\n            id: uniqid(),\n            isEdit: false\n          },\n          textEmail: {\n            text: 'üìß',\n            id: uniqid(),\n            isEdit: false\n          },\n          textGithub: {\n            text: '‚ù§Ô∏è (URL):',\n            id: uniqid(),\n            isEdit: false\n          }\n        }\n      }\n    };\n  }\n\n  changeAppMode = (component, boolean) => {\n    const tempModes = { ...this.state.modes };\n    tempModes[component].isEdit = boolean;\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeAllModesToNonEditExceptApp = () => {\n    const tempModes = { ...this.state.modes };\n    for (const property in tempModes) {\n      if (property !== 'appMode') {\n        tempModes[property].isEdit = false;\n      }\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  changeInfoRowToEditMode = (element) => {\n    this.changeAllModesToNonEditExceptApp();\n    const target = element.closest('li').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    for (const info in tempObj) {\n      target === info\n        ? (tempObj[target].isEdit = true)\n        : (tempObj[info].isEdit = false);\n    }\n    this.setState({\n      textDisplay: {\n        textUserInfoComponent: tempObj\n      }\n    });\n  };\n\n  changeUserInfoModeNonEdit = () => {\n    const textDisplay = { ...this.state.textDisplay };\n    const textUserInfoComponent = textDisplay.textUserInfoComponent;\n    for (const property in textUserInfoComponent) {\n      textUserInfoComponent[property].isEdit = false;\n    }\n    this.setState({\n      textDisplay: textDisplay\n    });\n  };\n\n  handleInputChange = (component, componentProp, inputText) => {\n    const tempObj = { ...this.state.inputs };\n    tempObj[component][componentProp] = inputText;\n    this.setState({\n      inputs: tempObj\n    });\n  };\n\n  handleUserInfoUpdateBtn = (element) => {\n    const datakey = element.closest('form').getAttribute('datakey');\n    const textUserInfoComponent = this.state.textDisplay.textUserInfoComponent;\n    const tempObj = { ...textUserInfoComponent };\n    const inputUserInfo =\n      this.state.inputs.userInfoComponentInput.inputUserInfo;\n    tempObj[datakey].text = inputUserInfo;\n    tempObj[datakey].isEdit = false;\n    const tempInputs = { ...this.state.inputs };\n    tempInputs.userInfoComponentInput.inputUserInfo = '';\n    this.setState({\n      [textUserInfoComponent]: tempObj,\n      inputs: tempInputs\n    });\n  };\n\n  changeComponentMode = (component, boolean) => {\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    this.changeAllModesToNonEditExceptApp();\n    this.changeUserInfoModeNonEdit();\n    tempModes[component].isEdit = boolean;\n    for (const property in tempInputs[component]) {\n      tempInputs[component][property] = '';\n    }\n    this.setState({\n      modes: tempModes\n    });\n  };\n\n  addNewExperience = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputCompanyName,\n      inputCompanyCity,\n      inputCompanyFrom,\n      inputCompanyTo,\n      inputCompanyRole,\n      inputCompanyJobDescription\n    } = this.state.inputs.workExperienceComponentInput;\n    const work = {\n      id: uniqid(),\n      textCompanyName: inputCompanyName,\n      textCompanyCity: inputCompanyCity,\n      textCompanyFromYear: inputCompanyFrom,\n      textCompanyToYear: inputCompanyTo,\n      textCompanyRole: inputCompanyRole,\n      textCompanyRoleDescription: inputCompanyJobDescription\n    };\n    tempArr.workExperienceArray.push(work);\n    tempModes.workExperienceMode.isEdit = false;\n    for (const property in tempInputs.workExperienceComponentInput) {\n      tempInputs.workExperienceComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  };\n\n  addNewEducation = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputSchool,\n      inputSchoolCity,\n      inputSchoolFromYear,\n      inputSchoolToYear,\n      inputSchoolDegree\n    } = this.state.inputs.educationComponentInput;\n    const education = {\n      id: uniqid(),\n      textSchoolName: inputSchool,\n      textSchoolCity: inputSchoolCity,\n      textSchoolFromYear: inputSchoolFromYear,\n      textSchoolToYear: inputSchoolToYear,\n      textSchoolDegree: inputSchoolDegree\n    };\n    tempArr.educationArray.push(education);\n    tempModes.educationMode.isEdit = false;\n    for (const property in tempInputs.educationComponentInput) {\n      tempInputs.educationComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  };\n\n  addNewSkill = () => {\n    const tempArr = { ...this.state.componentsArray };\n    const tempModes = { ...this.state.modes };\n    const tempInputs = { ...this.state.inputs };\n    const {\n      inputSkillName\n    } = this.state.inputs.skillsComponentInput;\n    const skill = {\n      id: uniqid(),\n      textSkillName: inputSkillName\n    };\n    tempArr.skillsArray.push(skill);\n    tempModes.skillsMode.isEdit = false;\n    for (const property in tempInputs.skillsComponentInput) {\n      tempInputs.skillsComponentInput[property] = '';\n    }\n    this.setState({\n      componentsArray: tempArr,\n      modes: tempModes,\n      inputs: tempInputs\n    });\n  }\n\n  removeClickedTarget = (element, target, arrName) => {\n    console.log(`.`)\n    // console.log(Array.from(element.closest(String(target)).children).indexOf(element.parentNode))\n    // const index = Array.from(element.closest(target).children).indexOf(element.parentNode);\n    // const tempArr = { ...this.state.componentsArray };\n    // tempArr[arrName].splice(index, 1);\n    // this.setState({\n    //   componentsArray: tempArr\n    // });\n  };\n\n  // removeWorkExperience = (element) => {\n  //   const index = Array.from(element.closest('.experienceContainer').children).indexOf(element.parentNode);\n  //   const tempArr = { ...this.state.componentsArray };\n  //   tempArr.workExperienceArray.splice(index, 1);\n  //   this.setState({\n  //     componentsArray: tempArr\n  //   });\n  // };\n\n  // removeEducation = (element) => {\n  //   const index = Array.from(element.closest('.educationContainer').children).indexOf(element.parentNode);\n  //   const tempArr = { ...this.state.componentsArray };\n  //   tempArr.educationArray.splice(index, 1);\n  //   this.setState({\n  //     componentsArray: tempArr\n  //   });\n  // };\n\n  // removeSkill = (element) => {\n  //   const index = Array.from(element.closest('.skillContainer').children).indexOf(element.parentNode);\n  //   const tempArr = { ...this.state.componentsArray };\n  //   tempArr.skillsArray.splice(index, 1);\n  //   this.setState({\n  //     componentsArray: tempArr\n  //   });\n  // };\n\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <nav>\n          <button onClick={() => this.changeAppMode('appMode', true)}>\n            EDIT MODE\n          </button>\n          <button onClick={() => this.changeAppMode('appMode', false)}>\n            VIEW MODE\n          </button>\n        </nav>\n        <UserInfo\n          modes={modes}\n          inputs={inputs.userInfoComponentInput.inputUserInfo}\n          textDisplay={textDisplay}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <WorkExperience\n          modes={modes}\n          componentsArray={componentsArray}\n          workExperienceComponentInput={inputs.workExperienceComponentInput}\n          handleInputChange={this.handleInputChange}\n          changeComponentMode={this.changeComponentMode}\n          addNewExperience={this.addNewExperience}\n          removeClickedTarget={this.removeClickedTarget}\n          // removeWorkExperience={this.removeWorkExperience}\n        />\n        <Education\n          modes={modes}\n          componentsArray={componentsArray}\n          educationComponentInput={inputs.educationComponentInput}\n          handleInputChange={this.handleInputChange}\n          changeComponentMode={this.changeComponentMode}\n          addNewEducation={this.addNewEducation}\n          removeClickedTarget={this.removeClickedTarget}\n          // removeWorkExperience={this.removeWorkExperience}\n        />\n        <Skills\n          modes={modes}\n          componentsArray={componentsArray}\n          inputs={inputs.skillsComponentInput.inputSkillName}\n          handleInputChange={this.handleInputChange}\n          changeComponentMode={this.changeComponentMode}\n          addNewSkill={this.addNewSkill}\n          removeClickedTarget={this.removeClickedTarget}\n          // removeWorkExperience={this.removeWorkExperience}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}