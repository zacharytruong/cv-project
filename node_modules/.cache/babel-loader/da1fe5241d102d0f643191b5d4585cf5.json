{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/Skills.js\";\nimport React, { Component } from 'react';\nimport './Skills.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SkillList extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.removeClickedTarget = e => this.props.removeClickedTarget(e.target, this.props.target, this.props.arrName);\n  }\n\n  render() {\n    const {\n      modes,\n      skill\n    } = this.props;\n    let removeBtn;\n\n    if (!modes.appMode.isEdit) {\n      removeBtn = null;\n    } else {\n      removeBtn = /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: this.removeClickedTarget,\n        className: \"redX\",\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), \" \", removeBtn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddSkillForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      let target = e.target.name;\n      let inputText = e.target.value;\n      this.props.handleInputChange(this.props.componentInputName, target, inputText);\n    };\n\n    this.addNewSkill = e => {\n      e.preventDefault();\n      this.props.addNewSkill();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"inputSkillName\",\n        value: this.props.inputs,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewSkill,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddSkillBtn extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeComponentMode = () => this.props.changeComponentMode(this.props.componentModeName, true);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.changeComponentMode,\n      children: \"+ Skill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass Skills extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeComponentMode = (component, boolean) => {\n      this.props.changeComponentMode(component, boolean);\n    };\n\n    this.addNewSkill = () => this.props.addNewSkill();\n\n    this.handleInputChange = (component, componentProp, inputText) => this.props.handleInputChange(component, componentProp, inputText);\n\n    this.removeClickedTarget = (element, target, arr) => this.props.removeClickedTarget(element, target, arr);\n\n    this.componentModeName = 'skillsMode';\n    this.componentInputName = 'skillsComponentInput';\n    this.arrName = 'skillsArray';\n    this.target = 'skillsContainer';\n  }\n\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs\n    } = this.props;\n    const skillsArray = componentsArray.skillsArray;\n    const rows = skillsArray.map(skill => /*#__PURE__*/_jsxDEV(SkillList, {\n      modes: modes,\n      target: this.target,\n      arrName: this.arrName,\n      skill: skill,\n      removeClickedTarget: this.removeClickedTarget\n    }, skill.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this));\n    let element;\n\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n\n    if (modes.appMode.isEdit && !modes.skillsMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddSkillBtn, {\n        componentModeName: this.componentModeName,\n        changeComponentMode: this.changeComponentMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (modes.appMode.isEdit && modes.skillsMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddSkillForm, {\n        inputs: inputs,\n        componentModeName: this.componentModeName,\n        componentInputName: this.componentInputName,\n        handleInputChange: this.handleInputChange,\n        addNewSkill: this.addNewSkill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container skills\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Skills\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: this.target,\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Skills;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/Skills.js"],"names":["React","Component","SkillList","removeClickedTarget","e","props","target","arrName","render","modes","skill","removeBtn","appMode","isEdit","AddSkillForm","handleInputChange","name","inputText","value","componentInputName","addNewSkill","preventDefault","inputs","AddSkillBtn","changeComponentMode","componentModeName","Skills","constructor","component","boolean","componentProp","element","arr","componentsArray","skillsArray","rows","map","id","skillsMode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAChCE,mBADgC,GACTC,CAAD,IACpB,KAAKC,KAAL,CAAWF,mBAAX,CACEC,CAAC,CAACE,MADJ,EAEE,KAAKD,KAAL,CAAWC,MAFb,EAGE,KAAKD,KAAL,CAAWE,OAHb,CAF8B;AAAA;;AAOhCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmB,KAAKL,KAA9B;AACA,QAAIM,SAAJ;;AACA,QAAI,CAACF,KAAK,CAACG,OAAN,CAAcC,MAAnB,EAA2B;AACzBF,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,gBACP;AAAM,QAAA,OAAO,EAAE,KAAKR,mBAApB;AAAyC,QAAA,SAAS,EAAC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;;AACD,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,OACiBQ,SADjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAxB+B;;AA2BlC,MAAMG,YAAN,SAA2Bb,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SACnCc,iBADmC,GACdX,CAAD,IAAO;AACzB,UAAIE,MAAM,GAAGF,CAAC,CAACE,MAAF,CAASU,IAAtB;AACA,UAAIC,SAAS,GAAGb,CAAC,CAACE,MAAF,CAASY,KAAzB;AACA,WAAKb,KAAL,CAAWU,iBAAX,CACE,KAAKV,KAAL,CAAWc,kBADb,EAEEb,MAFF,EAGEW,SAHF;AAKD,KATkC;;AAAA,SAUnCG,WAVmC,GAUpBhB,CAAD,IAAO;AACnBA,MAAAA,CAAC,CAACiB,cAAF;AACA,WAAKhB,KAAL,CAAWe,WAAX;AACD,KAbkC;AAAA;;AAcnCZ,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,YAAY,EAAC,KAFf;AAGE,QAAA,IAAI,EAAC,gBAHP;AAIE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWiB,MAJpB;AAKE,QAAA,QAAQ,EAAE,KAAKP;AALjB;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKK,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AA7BkC;;AAgCrC,MAAMG,WAAN,SAA0BtB,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SAClCuB,mBADkC,GACZ,MACpB,KAAKnB,KAAL,CAAWmB,mBAAX,CAA+B,KAAKnB,KAAL,CAAWoB,iBAA1C,EAA6D,IAA7D,CAFgC;AAAA;;AAGlCjB,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,OAAO,EAAE,KAAKgB,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AALiC;;AAQpC,MAAME,MAAN,SAAqBzB,SAArB,CAA+B;AAC7B0B,EAAAA,WAAW,CAACtB,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBmB,mBAPmB,GAOG,CAACI,SAAD,EAAYC,OAAZ,KAAwB;AAC5C,WAAKxB,KAAL,CAAWmB,mBAAX,CAA+BI,SAA/B,EAA0CC,OAA1C;AACD,KATkB;;AAAA,SAUnBT,WAVmB,GAUL,MAAM,KAAKf,KAAL,CAAWe,WAAX,EAVD;;AAAA,SAWnBL,iBAXmB,GAWC,CAACa,SAAD,EAAYE,aAAZ,EAA2Bb,SAA3B,KAClB,KAAKZ,KAAL,CAAWU,iBAAX,CAA6Ba,SAA7B,EAAwCE,aAAxC,EAAuDb,SAAvD,CAZiB;;AAAA,SAanBd,mBAbmB,GAaG,CAAC4B,OAAD,EAAUzB,MAAV,EAAkB0B,GAAlB,KACpB,KAAK3B,KAAL,CAAWF,mBAAX,CAA+B4B,OAA/B,EAAwCzB,MAAxC,EAAgD0B,GAAhD,CAdiB;;AAEjB,SAAKP,iBAAL,GAAyB,YAAzB;AACA,SAAKN,kBAAL,GAA0B,sBAA1B;AACA,SAAKZ,OAAL,GAAe,aAAf;AACA,SAAKD,MAAL,GAAc,iBAAd;AACD;;AASDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASwB,MAAAA,eAAT;AAA0BX,MAAAA;AAA1B,QAAqC,KAAKjB,KAAhD;AACA,UAAM6B,WAAW,GAAGD,eAAe,CAACC,WAApC;AACA,UAAMC,IAAI,GAAGD,WAAW,CAACE,GAAZ,CAAiB1B,KAAD,iBAC3B,QAAC,SAAD;AACE,MAAA,KAAK,EAAED,KADT;AAEE,MAAA,MAAM,EAAE,KAAKH,MAFf;AAGE,MAAA,OAAO,EAAE,KAAKC,OAHhB;AAIE,MAAA,KAAK,EAAEG,KAJT;AAME,MAAA,mBAAmB,EAAE,KAAKP;AAN5B,OAKOO,KAAK,CAAC2B,EALb;AAAA;AAAA;AAAA;AAAA,YADW,CAAb;AAUA,QAAIN,OAAJ;;AACA,QAAI,CAACtB,KAAK,CAACG,OAAN,CAAcC,MAAnB,EAA2B;AACzBkB,MAAAA,OAAO,GAAG,IAAV;AACD;;AACD,QAAItB,KAAK,CAACG,OAAN,CAAcC,MAAd,IAAwB,CAACJ,KAAK,CAAC6B,UAAN,CAAiBzB,MAA9C,EAAsD;AACpDkB,MAAAA,OAAO,gBACL,QAAC,WAAD;AACE,QAAA,iBAAiB,EAAE,KAAKN,iBAD1B;AAEE,QAAA,mBAAmB,EAAE,KAAKD;AAF5B;AAAA;AAAA;AAAA;AAAA,cADF;AAMD;;AACD,QAAIf,KAAK,CAACG,OAAN,CAAcC,MAAd,IAAwBJ,KAAK,CAAC6B,UAAN,CAAiBzB,MAA7C,EAAqD;AACnDkB,MAAAA,OAAO,gBACL,QAAC,YAAD;AACE,QAAA,MAAM,EAAET,MADV;AAEE,QAAA,iBAAiB,EAAE,KAAKG,iBAF1B;AAGE,QAAA,kBAAkB,EAAE,KAAKN,kBAH3B;AAIE,QAAA,iBAAiB,EAAE,KAAKJ,iBAJ1B;AAKE,QAAA,WAAW,EAAE,KAAKK;AALpB;AAAA;AAAA;AAAA;AAAA,cADF;AASD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAE,KAAKd,MAApB;AAAA,kBAA6B6B;AAA7B;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGJ,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AA3D4B;;AA8D/B,eAAeL,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport './Skills.css';\n\nclass SkillList extends Component {\n  removeClickedTarget = (e) =>\n    this.props.removeClickedTarget(\n      e.target,\n      this.props.target,\n      this.props.arrName\n    );\n  render() {\n    const { modes, skill } = this.props;\n    let removeBtn;\n    if (!modes.appMode.isEdit) {\n      removeBtn = null;\n    } else {\n      removeBtn = (\n        <span onClick={this.removeClickedTarget} className=\"redX\">\n          X\n        </span>\n      );\n    }\n    return (\n      <li>\n        <span></span> {removeBtn}\n      </li>\n    );\n  }\n}\n\nclass AddSkillForm extends Component {\n  handleInputChange = (e) => {\n    let target = e.target.name;\n    let inputText = e.target.value;\n    this.props.handleInputChange(\n      this.props.componentInputName,\n      target,\n      inputText\n    );\n  };\n  addNewSkill = (e) => {\n    e.preventDefault();\n    this.props.addNewSkill();\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          name=\"inputSkillName\"\n          value={this.props.inputs}\n          onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.addNewSkill}>\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nclass AddSkillBtn extends Component {\n  changeComponentMode = () =>\n    this.props.changeComponentMode(this.props.componentModeName, true);\n  render() {\n    return <button onClick={this.changeComponentMode}>+ Skill</button>;\n  }\n}\n\nclass Skills extends Component {\n  constructor(props) {\n    super(props);\n    this.componentModeName = 'skillsMode';\n    this.componentInputName = 'skillsComponentInput';\n    this.arrName = 'skillsArray';\n    this.target = 'skillsContainer';\n  }\n  changeComponentMode = (component, boolean) => {\n    this.props.changeComponentMode(component, boolean);\n  };\n  addNewSkill = () => this.props.addNewSkill();\n  handleInputChange = (component, componentProp, inputText) =>\n    this.props.handleInputChange(component, componentProp, inputText);\n  removeClickedTarget = (element, target, arr) =>\n    this.props.removeClickedTarget(element, target, arr);\n  render() {\n    const { modes, componentsArray, inputs } = this.props;\n    const skillsArray = componentsArray.skillsArray;\n    const rows = skillsArray.map((skill) => (\n      <SkillList\n        modes={modes}\n        target={this.target}\n        arrName={this.arrName}\n        skill={skill}\n        key={skill.id}\n        removeClickedTarget={this.removeClickedTarget}\n      />\n    ));\n    let element;\n    if (!modes.appMode.isEdit) {\n      element = null;\n    }\n    if (modes.appMode.isEdit && !modes.skillsMode.isEdit) {\n      element = (\n        <AddSkillBtn\n          componentModeName={this.componentModeName}\n          changeComponentMode={this.changeComponentMode}\n        />\n      );\n    }\n    if (modes.appMode.isEdit && modes.skillsMode.isEdit) {\n      element = (\n        <AddSkillForm\n          inputs={inputs}\n          componentModeName={this.componentModeName}\n          componentInputName={this.componentInputName}\n          handleInputChange={this.handleInputChange}\n          addNewSkill={this.addNewSkill}\n        />\n      );\n    }\n    return (\n      <div className=\"container skills\">\n        <h2>Skills</h2>\n        <ul className={this.target}>{rows}</ul>\n        {element}\n      </div>\n    );\n  }\n}\n\nexport default Skills;\n"]},"metadata":{},"sourceType":"module"}