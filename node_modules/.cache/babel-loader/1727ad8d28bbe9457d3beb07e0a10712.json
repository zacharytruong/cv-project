{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddExperienceForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeWorkExperienceMode = e => {\n      e.preventDefault();\n      this.props.changeWorkExperienceMode();\n    };\n\n    this.handleInputChange = e => {\n      const {\n        inputCompanyNameText,\n        inputCityText,\n        inputFromText,\n        inputToText,\n        inputJobDescriptionText\n      } = this.props;\n      let target = e.target.name;\n      let field;\n\n      if (target === 'companyName') {\n        field = inputCompanyNameText;\n      } else if (target === 'city') {\n        field = inputCityText;\n      } else if (target === 'from') {\n        field = inputFromText;\n      } else if (target === 'to') {\n        field = inputToText;\n      } else if (target === 'jobDescription') {\n        field = inputJobDescriptionText;\n      }\n\n      console.log(field);\n      this.props.handleInputChange(field, e.target.value);\n    };\n\n    this.addNewExperience = e => {\n      e.preventDefault();\n      this.props.addNewExperience();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        autoComplete: \"off\",\n        name: \"companyName\",\n        value: this.props.inputCompanyNameText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"City\",\n        autoComplete: \"off\",\n        name: \"city\",\n        value: this.props.inputCityText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"From\",\n        autoComplete: \"off\",\n        name: \"from\",\n        value: this.props.inputFromText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"To\",\n        autoComplete: \"off\",\n        name: \"to\",\n        value: this.props.inputToText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"5\",\n        cols: \"30\",\n        name: \"jobDescription\",\n        placeholder: \"Job Description & Achievements\",\n        value: this.props.inputJobDescriptionText,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.changeWorkExperienceMode,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewExperience,\n        children: \"+ Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass AddExperienceBtn extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeWorkExperienceMode = () => this.props.changeWorkExperienceMode();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.changeWorkExperienceMode,\n      children: \"+ Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass WorkExperience extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeWorkExperienceMode = () => {\n      let modeState = this.state.workExperienceMode.isEdit;\n      modeState ? modeState = false : modeState = true;\n      this.setState({\n        workExperienceMode: {\n          isEdit: modeState\n        }\n      });\n    };\n\n    this.handleInputChange = (field, element) => this.props.handleInputChange(field, element);\n\n    this.addNewExperience = () => this.props.addNewExperience();\n\n    this.state = {\n      workExperienceMode: {\n        isEdit: false\n      }\n    };\n  }\n\n  render() {\n    const {\n      appMode,\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.props;\n    const {\n      workExperienceMode\n    } = this.state;\n    const rows = [];\n    let element;\n\n    if (appMode.isEdit && !workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceBtn, {\n        changeWorkExperienceMode: this.changeWorkExperienceMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (appMode.isEdit && workExperienceMode.isEdit) {\n      element = /*#__PURE__*/_jsxDEV(AddExperienceForm, {\n        inputCompanyNameText: inputCompanyNameText,\n        inputCityText: inputCityText,\n        inputFromText: inputFromText,\n        inputToText: inputToText,\n        inputJobDescriptionText: inputJobDescriptionText,\n        changeWorkExperienceMode: this.changeWorkExperienceMode,\n        handleInputChange: this.handleInputChange,\n        addNewExperience: this.addNewExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Experiences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), rows, element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WorkExperience;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/WorkExperience.js"],"names":["React","Component","AddExperienceForm","changeWorkExperienceMode","e","preventDefault","props","handleInputChange","inputCompanyNameText","inputCityText","inputFromText","inputToText","inputJobDescriptionText","target","name","field","console","log","value","addNewExperience","render","AddExperienceBtn","WorkExperience","constructor","modeState","state","workExperienceMode","isEdit","setState","element","appMode","rows"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass AddExperienceForm extends Component {\n  changeWorkExperienceMode = (e) => {\n    e.preventDefault();\n    this.props.changeWorkExperienceMode();\n  };\n  handleInputChange = (e) => {\n    const {\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.props;\n    let target = e.target.name;\n    let field;\n    if (target === 'companyName') {\n      field = inputCompanyNameText;\n    } else if (target === 'city') {\n      field = inputCityText;\n    } else if (target === 'from') {\n      field = inputFromText;\n    } else if (target === 'to') {\n      field = inputToText;\n    } else if (target === 'jobDescription') {\n      field = inputJobDescriptionText;\n    }\n    console.log(field)\n    this.props.handleInputChange(field, e.target.value);\n  };\n  addNewExperience = (e) => {\n    e.preventDefault();\n    this.props.addNewExperience();\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Company Name\"\n          autoComplete=\"off\"\n          name=\"companyName\"\n          value={this.props.inputCompanyNameText}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"City\"\n          autoComplete=\"off\"\n          name=\"city\"\n          value={this.props.inputCityText}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"From\"\n          autoComplete=\"off\"\n          name=\"from\"\n          value={this.props.inputFromText}\n          onChange={this.handleInputChange}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"To\"\n          autoComplete=\"off\"\n          name=\"to\"\n          value={this.props.inputToText}\n          onChange={this.handleInputChange}\n        ></input>\n        <textarea\n          rows=\"5\"\n          cols=\"30\"\n          name=\"jobDescription\"\n          placeholder=\"Job Description & Achievements\"\n          value={this.props.inputJobDescriptionText}\n          onChange={this.handleInputChange}\n        ></textarea>\n        <button type=\"submit\" onClick={this.changeWorkExperienceMode}>\n          Cancel\n        </button>\n        <button type=\"submit\" onClick={this.addNewExperience}>\n          + Add\n        </button>\n      </form>\n    );\n  }\n}\nclass AddExperienceBtn extends Component {\n  changeWorkExperienceMode = () => this.props.changeWorkExperienceMode();\n  render() {\n    return (\n      <button onClick={this.changeWorkExperienceMode}>+ Experience</button>\n    );\n  }\n}\n\nclass WorkExperience extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      workExperienceMode: {\n        isEdit: false\n      }\n    };\n  }\n  changeWorkExperienceMode = () => {\n    let modeState = this.state.workExperienceMode.isEdit;\n    modeState ? (modeState = false) : (modeState = true);\n    this.setState({\n      workExperienceMode: {\n        isEdit: modeState\n      }\n    });\n  };\n  handleInputChange = (field, element) => this.props.handleInputChange(field, element);\n  addNewExperience = () => this.props.addNewExperience();\n  render() {\n    const {\n      appMode,\n      inputCompanyNameText,\n      inputCityText,\n      inputFromText,\n      inputToText,\n      inputJobDescriptionText\n    } = this.props;\n    const { workExperienceMode } = this.state;\n    const rows = [];\n    let element;\n    if (appMode.isEdit && !workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceBtn\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n        />\n      );\n    }\n    if (appMode.isEdit && workExperienceMode.isEdit) {\n      element = (\n        <AddExperienceForm\n          inputCompanyNameText={inputCompanyNameText}\n          inputCityText={inputCityText}\n          inputFromText={inputFromText}\n          inputToText={inputToText}\n          inputJobDescriptionText={inputJobDescriptionText}\n          changeWorkExperienceMode={this.changeWorkExperienceMode}\n          handleInputChange={this.handleInputChange}\n          addNewExperience={this.addNewExperience}\n        />\n      );\n    }\n    return (\n      <div>\n        <h2>Experiences</h2>\n        {rows}\n        {element}\n      </div>\n    );\n  }\n}\n\nexport default WorkExperience;\n"]},"metadata":{},"sourceType":"module"}