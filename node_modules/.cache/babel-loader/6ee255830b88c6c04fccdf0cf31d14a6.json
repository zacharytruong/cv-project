{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js\";\nimport React, { Component } from 'react';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfoRowForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleInputChange = e => {\n      this.props.handleInputChange(this.props.inpu, e.target.value);\n    };\n\n    this.handleUserInfoUpdateBtn = e => {\n      e.preventDefault();\n      this.props.handleUserInfoUpdateBtn('inputText', e.target);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        value: this.props.inputUserInfo,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.handleUserInfoUpdateBtn,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass InfoRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = e => this.props.changeInfoRowToEditMode(e.target);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      info,\n      value,\n      inputUserInfo\n    } = this.props;\n    let element;\n\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = /*#__PURE__*/_jsxDEV(InfoRowForm, {\n          inputUserInfo: inputUserInfo,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this);\n      } else {\n        element = /*#__PURE__*/_jsxDEV(\"li\", {\n          datakey: info,\n          children: [value.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.changeInfoRowToEditMode,\n            children: \"\\u270E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      element = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this);\n    }\n\n    return element;\n  }\n\n}\n\nclass BasicUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      inputUserInfo,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputUserInfo: inputUserInfo,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass ExtendedUserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      inputUserInfo,\n      userInfoText\n    } = this.props;\n    const rows = [];\n    let element;\n\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = /*#__PURE__*/_jsxDEV(InfoRow, {\n          value: value,\n          info: info,\n          modes: modes,\n          inputUserInfo: inputUserInfo,\n          changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n          handleInputChange: this.handleInputChange,\n          handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this);\n        rows.push(element);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass UserInfo extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.changeInfoRowToEditMode = element => this.props.changeInfoRowToEditMode(element);\n\n    this.handleInputChange = (objInput, inputText) => this.props.handleInputChange(objInput, inputText);\n\n    this.handleUserInfoUpdateBtn = (objInput, inputText) => this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  }\n\n  render() {\n    const {\n      modes,\n      inputs,\n      textDisplay\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserInfoContainer\",\n      children: [/*#__PURE__*/_jsxDEV(BasicUserInfo, {\n        modes: modes,\n        inputUserInfo: inputs.userInfoComponentInput.inputUserInfo,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExtendedUserInfo, {\n        modes: modes,\n        inputUserInfo: inputs.userInfoComponentInput.inputUserInfo,\n        userInfoText: textDisplay.textUserInfoComponent,\n        changeInfoRowToEditMode: this.changeInfoRowToEditMode,\n        handleInputChange: this.handleInputChange,\n        handleUserInfoUpdateBtn: this.handleUserInfoUpdateBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/UserInfo.js"],"names":["React","Component","InfoRowForm","handleInputChange","e","props","inpu","target","value","handleUserInfoUpdateBtn","preventDefault","render","inputUserInfo","InfoRow","changeInfoRowToEditMode","objInput","inputText","modes","info","element","appMode","isEdit","text","BasicUserInfo","userInfoText","rows","Object","entries","id","push","ExtendedUserInfo","UserInfo","inputs","textDisplay","userInfoComponentInput","textUserInfoComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './UserInfo.css';\n\nclass InfoRowForm extends Component {\n  handleInputChange = (e) => {\n    this.props.handleInputChange(this.props.inpu, e.target.value);\n  };\n  handleUserInfoUpdateBtn = (e) => {\n    e.preventDefault();\n    this.props.handleUserInfoUpdateBtn('inputText', e.target);\n  };\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={this.props.inputUserInfo}\n          onChange={this.handleInputChange}\n        ></input>\n        <button type=\"submit\" onClick={this.handleUserInfoUpdateBtn}>\n          Update\n        </button>\n      </form>\n    );\n  }\n}\n\nclass InfoRow extends Component {\n  changeInfoRowToEditMode = (e) => this.props.changeInfoRowToEditMode(e.target);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, info, value, inputUserInfo } = this.props;\n    let element;\n    if (modes.appMode.isEdit) {\n      if (value.isEdit) {\n        element = (\n          <InfoRowForm\n            inputUserInfo={inputUserInfo}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n      } else {\n        element = (\n          <li datakey={info}>\n            {value.text} <span onClick={this.changeInfoRowToEditMode}>✎</span>\n          </li>\n        );\n      }\n    } else {\n      element = <li>{value.text}</li>;\n    }\n    return element;\n  }\n}\n\nclass BasicUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, inputUserInfo, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputUserInfo={inputUserInfo}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass ExtendedUserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, inputUserInfo, userInfoText } = this.props;\n    const rows = [];\n    let element;\n    for (const [info, value] of Object.entries(userInfoText)) {\n      if (info === 'textFirstName' || info === 'textLastName') {\n        continue;\n      } else {\n        element = (\n          <InfoRow\n            key={value.id}\n            value={value}\n            info={info}\n            modes={modes}\n            inputUserInfo={inputUserInfo}\n            changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n            handleInputChange={this.handleInputChange}\n            handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n          />\n        );\n        rows.push(element);\n      }\n    }\n    return (\n      <div>\n        <ul>{rows}</ul>\n      </div>\n    );\n  }\n}\n\nclass UserInfo extends Component {\n  changeInfoRowToEditMode = (element) =>\n    this.props.changeInfoRowToEditMode(element);\n  handleInputChange = (objInput, inputText) =>\n    this.props.handleInputChange(objInput, inputText);\n  handleUserInfoUpdateBtn = (objInput, inputText) =>\n    this.props.handleUserInfoUpdateBtn(objInput, inputText);\n  render() {\n    const { modes, inputs, textDisplay } = this.props;\n\n    return (\n      <div className=\"UserInfoContainer\">\n        <BasicUserInfo\n          modes={modes}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n        <ExtendedUserInfo\n          modes={modes}\n          inputUserInfo={inputs.userInfoComponentInput.inputUserInfo}\n          userInfoText={textDisplay.textUserInfoComponent}\n          changeInfoRowToEditMode={this.changeInfoRowToEditMode}\n          handleInputChange={this.handleInputChange}\n          handleUserInfoUpdateBtn={this.handleUserInfoUpdateBtn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n"]},"metadata":{},"sourceType":"module"}