{"ast":null,"code":"var _jsxFileName = \"/Users/zachtruong/TOP/cv-project/src/components/App.js\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeModeToEdit = componentMode => {\n      componentMode.isEdit = true;\n      this.setState(componentMode);\n      console.log(this.state.modes.appMode);\n    };\n\n    this.changeModeToNonEdit = componentMode => {\n      componentMode.isEdit = false;\n      this.setState(componentMode);\n      console.log(this.state.modes.appMode);\n    };\n\n    this.handleInputChange = (objInput, inputText) => {\n      this.setState({\n        [objInput]: inputText\n      });\n    };\n\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        userInfoFirstNameMode: {\n          isEdit: false\n        },\n        userInfoLastNameMode: {\n          isEdit: false\n        },\n        userInfoAddress1Mode: {\n          isEdit: false\n        },\n        userInfoAddress2Mode: {\n          isEdit: false\n        },\n        userInfoPhoneMode: {\n          isEdit: false\n        },\n        userInfoGithubMode: {\n          isEdit: false\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: '',\n          textLastName: '',\n          textAddress1: '',\n          textAddress2: '',\n          textPhone: '',\n          textEmail: '',\n          textGithub: ''\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n\n  // findClickedTarget = (element) => {\n  //   const target = element.parentNode;\n  //   const parent = Array.from(target.parentNode.children);\n  //   return parent.indexOf(target);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...this.state.userInfoArray];\n  //   tempArr[index]. = this.state[field];\n  //   tempArr[index].mode.isEdit = false;\n  //   this.setState({\n  //     [field]: '',\n  //     userInfoArray: tempArr\n  //   });\n  // };\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyName,\n  //     inputCity,\n  //     inputFrom,\n  //     inputTo,\n  //     inputJobDescription\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyName: inputCompanyName,\n  //     city: inputCity,\n  //     from: inputFrom,\n  //     to: inputTo,\n  //     jobDescription: inputJobDescription\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyName: '',\n  //     inputCity: '',\n  //     inputFrom: '',\n  //     inputTo: '',\n  //     inputJobDescription: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchool,\n  //     inputSchoolCity,\n  //     inputSchoolFromYear,\n  //     inputSchoolToYear,\n  //     inputSchoolDegree\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     school: inputSchool,\n  //     schoolCity: inputSchoolCity,\n  //     schoolFromYeart: inputSchoolFromYear,\n  //     schoolToYear: inputSchoolToYear,\n  //     schoolDegree: inputSchoolDegree\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchool: '',\n  //     inputSchoolCity: '',\n  //     inputSchoolFromYear: '',\n  //     inputSchoolToYear: '',\n  //     inputSchoolDegree: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const {\n      modes,\n      componentsArray,\n      inputs,\n      textDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.changeModeToEdit(modes.appMode),\n        children: \"EDIT MODE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.changeModeToNonEdit(modes.appMode),\n        children: \"VIEW MODE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zachtruong/TOP/cv-project/src/components/App.js"],"names":["React","uniqid","UserInfo","WorkExperience","Education","Skills","App","Component","constructor","props","changeModeToEdit","componentMode","isEdit","setState","console","log","state","modes","appMode","changeModeToNonEdit","handleInputChange","objInput","inputText","userInfoFirstNameMode","userInfoLastNameMode","userInfoAddress1Mode","userInfoAddress2Mode","userInfoPhoneMode","userInfoGithubMode","workExperienceMode","educationMode","skillsMode","componentsArray","workExperienceArray","educationArray","skillsArray","inputs","userInfoComponentInput","inputUserInfo","workExperienceComponentInput","inputCompanyName","inputCompanyCity","inputCompanyFrom","inputCompanyTo","inputCompanyRole","inputCompanyJobDescription","educationComponentInput","inputSchool","inputSchoolCity","inputSchoolFromYear","inputSchoolToYear","inputSchoolDegree","skillsComponentInput","inputSkillName","textDisplay","textUserInfoComponent","textFirstName","textLastName","textAddress1","textAddress2","textPhone","textEmail","textGithub","textWorkExperienceComponent","textCompanyName","textCompanyCity","textCompanyFromYear","textCompanyToYear","textCompanyRole","textCompanyRoleDescription","textEducationComponent","textSchoolName","textSchoolCity","textSchoolFromYear","textSchoolToYear","textSchoolDegree","textSkillsComponent","textSkillName","render"],"mappings":"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,mBAAmB,EAAE,EAHM;AAI3BC,UAAAA,iBAAiB,EAAE,EAJQ;AAK3BC,UAAAA,eAAe,EAAE,EALU;AAM3BC,UAAAA,0BAA0B,EAAE;AAND,SAVlB;AAkBXC,QAAAA,sBAAsB,EAAE;AACtBC,UAAAA,cAAc,EAAE,EADM;AAEtBC,UAAAA,cAAc,EAAE,EAFM;AAGtBC,UAAAA,kBAAkB,EAAE,EAHE;AAItBC,UAAAA,gBAAgB,EAAE,EAJI;AAKtBC,UAAAA,gBAAgB,EAAE;AALI,SAlBb;AAyBXC,QAAAA,mBAAmB,EAAE;AACnBC,UAAAA,aAAa,EAAE;AADI;AAzBV;AA7DF,KAAb;AA2FD;;AAgBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE7D,MAAAA,KAAF;AAASe,MAAAA,eAAT;AAA0BI,MAAAA,MAA1B;AAAkCkB,MAAAA;AAAlC,QAAkD,KAAKtC,KAA7D;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAG,MAAM,KAAKN,gBAAL,CAAsBO,KAAK,CAACC,OAA5B,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAG,MAAM,KAAKC,mBAAL,CAAyBF,KAAK,CAACC,OAA/B,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAzP+B;;AA4PlC,eAAeZ,GAAf","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport UserInfo from './UserInfo';\nimport WorkExperience from './WorkExperience';\nimport Education from './Education';\nimport Skills from './Skills';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modes: {\n        appMode: {\n          isEdit: true\n        },\n        userInfoFirstNameMode: {\n          isEdit: false\n        },\n        userInfoLastNameMode: {\n          isEdit: false\n        },\n        userInfoAddress1Mode: {\n          isEdit: false\n        },\n        userInfoAddress2Mode: {\n          isEdit: false\n        },\n        userInfoPhoneMode: {\n          isEdit: false\n        },\n        userInfoGithubMode: {\n          isEdit: false\n        },\n        workExperienceMode: {\n          isEdit: false\n        },\n        educationMode: {\n          isEdit: false\n        },\n        skillsMode: {\n          isEdit: false\n        }\n      },\n      componentsArray: {\n        workExperienceArray: [],\n        educationArray: [],\n        skillsArray: []\n      },\n      inputs: {\n        userInfoComponentInput: {\n          inputUserInfo: ''\n        },\n        workExperienceComponentInput: {\n          inputCompanyName: '',\n          inputCompanyCity: '',\n          inputCompanyFrom: '',\n          inputCompanyTo: '',\n          inputCompanyRole: '',\n          inputCompanyJobDescription: ''\n        },\n        educationComponentInput: {\n          inputSchool: '',\n          inputSchoolCity: '',\n          inputSchoolFromYear: '',\n          inputSchoolToYear: '',\n          inputSchoolDegree: ''\n        },\n        skillsComponentInput: {\n          inputSkillName: ''\n        }\n      },\n      textDisplay: {\n        textUserInfoComponent: {\n          textFirstName: '',\n          textLastName: '',\n          textAddress1: '',\n          textAddress2: '',\n          textPhone: '',\n          textEmail: '',\n          textGithub: ''\n        },\n        textWorkExperienceComponent: {\n          textCompanyName: '',\n          textCompanyCity: '',\n          textCompanyFromYear: '',\n          textCompanyToYear: '',\n          textCompanyRole: '',\n          textCompanyRoleDescription: ''\n        },\n        textEducationComponent: {\n          textSchoolName: '',\n          textSchoolCity: '',\n          textSchoolFromYear: '',\n          textSchoolToYear: '',\n          textSchoolDegree: ''\n        },\n        textSkillsComponent: {\n          textSkillName: ''\n        }\n      }\n    };\n  }\n  changeModeToEdit = (componentMode) => {\n    componentMode.isEdit = true;\n    this.setState(componentMode)\n    console.log(this.state.modes.appMode)\n  };\n  changeModeToNonEdit = (componentMode) => {\n    componentMode.isEdit = false;\n    this.setState(componentMode)\n    console.log(this.state.modes.appMode)\n  };\n  handleInputChange = (objInput, inputText) => {\n    this.setState({\n      [objInput]: inputText\n    });\n  };\n  // findClickedTarget = (element) => {\n  //   const target = element.parentNode;\n  //   const parent = Array.from(target.parentNode.children);\n  //   return parent.indexOf(target);\n  // };\n  // handleUserInfoUpdateBtn = (field, element) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...this.state.userInfoArray];\n  //   tempArr[index]. = this.state[field];\n  //   tempArr[index].mode.isEdit = false;\n  //   this.setState({\n  //     [field]: '',\n  //     userInfoArray: tempArr\n  //   });\n  // };\n\n  // changeInfoRowToEditMode = (element, arr) => {\n  //   const index = this.findClickedTarget(element);\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   tempArr[index].mode.isEdit = true;\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // turnOffUserInfoEditMode = (arr) => {\n  //   const tempArr = [...arr];\n  //   tempArr.forEach((item) => (item.mode.isEdit = false));\n  //   this.setState({\n  //     [arr]: tempArr\n  //   });\n  // };\n  // addNewExperience = () => {\n  //   const {\n  //     inputCompanyName,\n  //     inputCity,\n  //     inputFrom,\n  //     inputTo,\n  //     inputJobDescription\n  //   } = this.state;\n  //   const work = {\n  //     id: uniqid(),\n  //     companyName: inputCompanyName,\n  //     city: inputCity,\n  //     from: inputFrom,\n  //     to: inputTo,\n  //     jobDescription: inputJobDescription\n  //   };\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.concat(work),\n  //     workExperienceMode: {\n  //       isEdit: false\n  //     },\n  //     inputCompanyName: '',\n  //     inputCity: '',\n  //     inputFrom: '',\n  //     inputTo: '',\n  //     inputJobDescription: ''\n  //   });\n  // };\n  // addNewEducation = () => {\n  //   const {\n  //     inputSchool,\n  //     inputSchoolCity,\n  //     inputSchoolFromYear,\n  //     inputSchoolToYear,\n  //     inputSchoolDegree\n  //   } = this.state;\n  //   const education = {\n  //     id: uniqid(),\n  //     school: inputSchool,\n  //     schoolCity: inputSchoolCity,\n  //     schoolFromYeart: inputSchoolFromYear,\n  //     schoolToYear: inputSchoolToYear,\n  //     schoolDegree: inputSchoolDegree\n  //   };\n  //   this.setState({\n  //     educationArray: this.state.educationArray.concat(education),\n  //     educationMode: {\n  //       isEdit: false\n  //     },\n  //     inputSchool: '',\n  //     inputSchoolCity: '',\n  //     inputSchoolFromYear: '',\n  //     inputSchoolToYear: '',\n  //     inputSchoolDegree: ''\n  //   });\n  // };\n  // removeWorkExperience = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     workExperienceArray: this.state.workExperienceArray.splice(index, 1)\n  //   });\n  // };\n  // removeEducationHistory = (element) => {\n  //   const index = this.findClickedTarget(element);\n  //   this.setState({\n  //     educationArray: this.state.educationArray.splice(index, 1)\n  //   });\n  // };\n  // changeUserInfoMode = () => {\n  //   let modeState = this.state.userInfoMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     userInfoMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeWorkExperienceMode = () => {\n  //   let modeState = this.state.workExperienceMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     workExperienceMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  // changeEducationMode = () => {\n  //   let modeState = this.state.educationMode.isEdit;\n  //   modeState ? (modeState = false) : (modeState = true);\n  //   this.setState({\n  //     educationMode: {\n  //       isEdit: modeState\n  //     }\n  //   });\n  // };\n  render() {\n    const { modes, componentsArray, inputs, textDisplay } = this.state;\n    return (\n      <div className=\"appContainer\">\n        <button onClick={(() => this.changeModeToEdit(modes.appMode))}>EDIT MODE</button>\n        <button onClick={(() => this.changeModeToNonEdit(modes.appMode))}>VIEW MODE</button>\n        <UserInfo />\n        {/* <WorkExperience />\n        <Education />\n        <Skills /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}